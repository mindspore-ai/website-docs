:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_fake_quant_with_min_max_vars.h:

Program Listing for File fake_quant_with_min_max_vars.h
=======================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_fake_quant_with_min_max_vars.h>` (``include/converter/include/ops/fake_quant_with_min_max_vars.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_FAKE_QUANT_WITH_MIN_MAX_VARS_H_
   #define MINDSPORE_CORE_OPS_FAKE_QUANT_WITH_MIN_MAX_VARS_H_
   #include <vector>
   #include <memory>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameFakeQuantWithMinMaxVars = "FakeQuantWithMinMaxVars";
   class MIND_API FakeQuantWithMinMaxVars : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(FakeQuantWithMinMaxVars);
     FakeQuantWithMinMaxVars() : BaseOperator(kNameFakeQuantWithMinMaxVars) {}
     void Init(const bool narrow_range = false, const int64_t num_bits = 8);
     void set_narrow_range(const bool narrow_range);
     void set_num_bits(const int64_t num_bits);
     bool get_narrow_range() const;
     int64_t get_num_bits() const;
   };
   MIND_API abstract::AbstractBasePtr FakeQuantWithMinMaxVarsInfer(
     const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
     const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_FAKE_QUANT_WITH_MIN_MAX_VARS_H_
