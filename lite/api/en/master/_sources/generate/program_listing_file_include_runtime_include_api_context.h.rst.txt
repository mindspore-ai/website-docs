:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_runtime_include_api_context.h:

Program Listing for File context.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_runtime_include_api_context.h>` (``include/runtime/include/api/context.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_INCLUDE_API_CONTEXT_H
   #define MINDSPORE_INCLUDE_API_CONTEXT_H
   
   #include <string>
   #include <memory>
   #include <vector>
   #include <map>
   #include "include/api/types.h"
   #include "include/api/dual_abi_helper.h"
   
   namespace mindspore {
   enum class DelegateMode {
     kNoDelegate = 0,
     kCoreML = 1,
     kNNAPI = 2,
   };
   
   enum class DeviceType {
     kCPU = 0,
     kGPU,
     kKirinNPU,
     kAscend,
     kAscend910,
     kAscend310,
     kCustomDevice,
     kAllDevice,
     // add new type here
     kInvalidDeviceType = 100,
   };
   
   class Allocator;
   class AbstractDelegate;
   class Delegate;
   class DeviceInfoContext;
   
   class MS_API Context {
    public:
     struct Data;
     Context();
     ~Context() = default;
     Context(const Context &rhs) : data_(rhs.data_) {}
   
     void SetThreadNum(int32_t thread_num);
   
     int32_t GetThreadNum() const;
   
     void SetInterOpParallelNum(int32_t parallel_num);
   
     int32_t GetInterOpParallelNum() const;
   
     void SetThreadAffinity(int mode);
   
     int GetThreadAffinityMode() const;
   
     void SetThreadAffinity(const std::vector<int> &core_list);
   
     std::vector<int32_t> GetThreadAffinityCoreList() const;
   
     void SetEnableParallel(bool is_parallel);
   
     bool GetEnableParallel() const;
   
     void SetBuiltInDelegate(DelegateMode mode);
   
     DelegateMode GetBuiltInDelegate() const;
   
     void set_delegate(const std::shared_ptr<AbstractDelegate> &delegate);
   
     // deprecated
     void SetDelegate(const std::shared_ptr<Delegate> &delegate);
   
     std::shared_ptr<AbstractDelegate> get_delegate() const;
   
     // deprecated
     std::shared_ptr<Delegate> GetDelegate() const;
   
     void SetMultiModalHW(bool float_mode);
   
     bool GetMultiModalHW() const;
   
     std::vector<std::shared_ptr<DeviceInfoContext>> &MutableDeviceInfo();
   
    private:
     std::shared_ptr<Data> data_;
   };
   
   class MS_API DeviceInfoContext : public std::enable_shared_from_this<DeviceInfoContext> {
    public:
     struct Data;
   
     DeviceInfoContext();
     virtual ~DeviceInfoContext() = default;
   
     virtual enum DeviceType GetDeviceType() const = 0;
   
     template <class T>
     std::shared_ptr<T> Cast() {
       static_assert(std::is_base_of<DeviceInfoContext, T>::value, "Wrong cast type.");
       if (GetDeviceType() != T().GetDeviceType()) {
         return nullptr;
       }
   
       return std::static_pointer_cast<T>(shared_from_this());
     }
     inline std::string GetProvider() const;
   
     inline void SetProvider(const std::string &provider);
   
     inline std::string GetProviderDevice() const;
   
     inline void SetProviderDevice(const std::string &device);
   
     void SetAllocator(const std::shared_ptr<Allocator> &allocator);
   
     std::shared_ptr<Allocator> GetAllocator() const;
   
    protected:
     std::vector<char> GetProviderChar() const;
     void SetProvider(const std::vector<char> &provider);
     std::vector<char> GetProviderDeviceChar() const;
     void SetProviderDevice(const std::vector<char> &device);
   
     std::shared_ptr<Data> data_;
   };
   
   std::string DeviceInfoContext::GetProvider() const { return CharToString(GetProviderChar()); }
   void DeviceInfoContext::SetProvider(const std::string &provider) { SetProvider(StringToChar(provider)); }
   std::string DeviceInfoContext::GetProviderDevice() const { return CharToString(GetProviderDeviceChar()); }
   void DeviceInfoContext::SetProviderDevice(const std::string &device) { SetProviderDevice(StringToChar(device)); }
   
   class MS_API AutoDeviceInfo : public DeviceInfoContext {
    public:
     enum DeviceType GetDeviceType() const override { return DeviceType::kAllDevice; };
   };
   
   class MS_API CPUDeviceInfo : public DeviceInfoContext {
    public:
     enum DeviceType GetDeviceType() const override { return DeviceType::kCPU; };
   
     void SetEnableFP16(bool is_fp16);
   
     bool GetEnableFP16() const;
   };
   
   class MS_API KirinNPUDeviceInfo : public DeviceInfoContext {
    public:
     enum DeviceType GetDeviceType() const override { return DeviceType::kKirinNPU; };
   
     void SetEnableFP16(bool is_fp16);
   
     bool GetEnableFP16() const;
   
     void SetFrequency(int frequency);
   
     int GetFrequency() const;
   };
   
   class MS_API GPUDeviceInfo : public DeviceInfoContext {
    public:
     enum DeviceType GetDeviceType() const override { return DeviceType::kGPU; };
   
     void SetDeviceID(uint32_t device_id);
   
     uint32_t GetDeviceID() const;
   
     int GetRankID() const;
   
     int GetGroupSize() const;
   
     inline void SetPrecisionMode(const std::string &precision_mode);
   
     inline std::string GetPrecisionMode() const;
   
     void SetEnableFP16(bool is_fp16);
   
     bool GetEnableFP16() const;
   
     void SetEnableGLTexture(bool is_enable_gl_texture);
   
     bool GetEnableGLTexture() const;
   
     void SetGLContext(void *gl_context);
   
     void *GetGLContext() const;
   
     void SetGLDisplay(void *gl_display);
   
     void *GetGLDisplay() const;
   
    private:
     void SetPrecisionMode(const std::vector<char> &precision_mode);
     std::vector<char> GetPrecisionModeChar() const;
   };
   
   void GPUDeviceInfo::SetPrecisionMode(const std::string &precision_mode) {
     SetPrecisionMode(StringToChar(precision_mode));
   }
   std::string GPUDeviceInfo::GetPrecisionMode() const { return CharToString(GetPrecisionModeChar()); }
   
   class MS_API AscendDeviceInfo : public DeviceInfoContext {
    public:
     enum DeviceType GetDeviceType() const override { return DeviceType::kAscend; };
   
     void SetDeviceID(uint32_t device_id);
   
     uint32_t GetDeviceID() const;
   
     inline void SetInsertOpConfigPath(const std::string &cfg_path);
   
     inline std::string GetInsertOpConfigPath() const;
   
     inline void SetInputFormat(const std::string &format);
   
     inline std::string GetInputFormat() const;
   
     inline void SetInputShape(const std::string &shape);
   
     inline std::string GetInputShape() const;
   
     void SetInputShapeMap(const std::map<int, std::vector<int>> &shape);
   
     std::map<int, std::vector<int>> GetInputShapeMap() const;
   
     void SetDynamicBatchSize(const std::vector<size_t> &dynamic_batch_size);
   
     inline std::string GetDynamicBatchSize() const;
   
     inline void SetDynamicImageSize(const std::string &dynamic_image_size);
   
     inline std::string GetDynamicImageSize() const;
   
     void SetOutputType(enum DataType output_type);
   
     enum DataType GetOutputType() const;
   
     inline void SetPrecisionMode(const std::string &precision_mode);
   
     inline std::string GetPrecisionMode() const;
   
     inline void SetOpSelectImplMode(const std::string &op_select_impl_mode);
   
     inline std::string GetOpSelectImplMode() const;
   
     inline void SetFusionSwitchConfigPath(const std::string &cfg_path);
   
     inline std::string GetFusionSwitchConfigPath() const;
   
     inline void SetBufferOptimizeMode(const std::string &buffer_optimize_mode);
   
     inline std::string GetBufferOptimizeMode() const;
   
    private:
     void SetInsertOpConfigPath(const std::vector<char> &cfg_path);
     std::vector<char> GetInsertOpConfigPathChar() const;
   
     void SetInputFormat(const std::vector<char> &format);
     std::vector<char> GetInputFormatChar() const;
   
     void SetInputShape(const std::vector<char> &shape);
     std::vector<char> GetInputShapeChar() const;
   
     std::vector<char> GetDynamicBatchSizeChar() const;
   
     void SetDynamicImageSize(const std::vector<char> &dynamic_image_size);
     std::vector<char> GetDynamicImageSizeChar() const;
   
     void SetPrecisionMode(const std::vector<char> &precision_mode);
     std::vector<char> GetPrecisionModeChar() const;
   
     void SetOpSelectImplMode(const std::vector<char> &op_select_impl_mode);
     std::vector<char> GetOpSelectImplModeChar() const;
   
     void SetFusionSwitchConfigPath(const std::vector<char> &cfg_path);
     std::vector<char> GetFusionSwitchConfigPathChar() const;
   
     void SetBufferOptimizeMode(const std::vector<char> &buffer_optimize_mode);
     std::vector<char> GetBufferOptimizeModeChar() const;
   };
   
   using Ascend310DeviceInfo = AscendDeviceInfo;
   using Ascend910DeviceInfo = AscendDeviceInfo;
   
   void AscendDeviceInfo::SetInsertOpConfigPath(const std::string &cfg_path) {
     SetInsertOpConfigPath(StringToChar(cfg_path));
   }
   std::string AscendDeviceInfo::GetInsertOpConfigPath() const { return CharToString(GetInsertOpConfigPathChar()); }
   
   void AscendDeviceInfo::SetInputFormat(const std::string &format) { SetInputFormat(StringToChar(format)); }
   std::string AscendDeviceInfo::GetInputFormat() const { return CharToString(GetInputFormatChar()); }
   
   void AscendDeviceInfo::SetInputShape(const std::string &shape) { SetInputShape(StringToChar(shape)); }
   std::string AscendDeviceInfo::GetInputShape() const { return CharToString(GetInputShapeChar()); }
   
   std::string AscendDeviceInfo::GetDynamicBatchSize() const { return CharToString(GetDynamicBatchSizeChar()); }
   
   void AscendDeviceInfo::SetDynamicImageSize(const std::string &dynamic_image_size) {
     SetDynamicImageSize(StringToChar(dynamic_image_size));
   }
   
   std::string AscendDeviceInfo::GetDynamicImageSize() const { return CharToString(GetDynamicImageSizeChar()); }
   
   void AscendDeviceInfo::SetPrecisionMode(const std::string &precision_mode) {
     SetPrecisionMode(StringToChar(precision_mode));
   }
   std::string AscendDeviceInfo::GetPrecisionMode() const { return CharToString(GetPrecisionModeChar()); }
   
   void AscendDeviceInfo::SetOpSelectImplMode(const std::string &op_select_impl_mode) {
     SetOpSelectImplMode(StringToChar(op_select_impl_mode));
   }
   std::string AscendDeviceInfo::GetOpSelectImplMode() const { return CharToString(GetOpSelectImplModeChar()); }
   
   void AscendDeviceInfo::SetFusionSwitchConfigPath(const std::string &cfg_path) {
     SetFusionSwitchConfigPath(StringToChar(cfg_path));
   }
   std::string AscendDeviceInfo::GetFusionSwitchConfigPath() const {
     return CharToString(GetFusionSwitchConfigPathChar());
   }
   
   void AscendDeviceInfo::SetBufferOptimizeMode(const std::string &buffer_optimize_mode) {
     SetBufferOptimizeMode(StringToChar(buffer_optimize_mode));
   }
   std::string AscendDeviceInfo::GetBufferOptimizeMode() const { return CharToString(GetBufferOptimizeModeChar()); }
   }  // namespace mindspore
   #endif  // MINDSPORE_INCLUDE_API_CONTEXT_H
