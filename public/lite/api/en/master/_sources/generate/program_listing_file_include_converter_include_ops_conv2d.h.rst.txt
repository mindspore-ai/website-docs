:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_conv2d.h:

Program Listing for File conv2d.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_conv2d.h>` (``include/converter/include/ops/conv2d.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_CONV2D_H_
   #define MINDSPORE_CORE_OPS_CONV2D_H_
   #include <map>
   #include <memory>
   #include <string>
   #include <vector>
   
   #include "mindapi/base/format.h"
   #include "mindapi/base/types.h"
   #include "ops/base_operator.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameConv2D = "Conv2D";
   class MIND_API Conv2D : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Conv2D);
     Conv2D() : BaseOperator(kNameConv2D) { InitIOName({"x", "w"}, {"output"}); }
     explicit Conv2D(const std::string k_name) : BaseOperator(k_name) { InitIOName({"x", "w"}, {"output"}); }
     void Init(int64_t out_channel, const std::vector<int64_t> &kernel_size, int64_t mode = 1,
               const PadMode &pad_mode = VALID, const std::vector<int64_t> &pad = {0, 0, 0, 0},
               const std::vector<int64_t> &stride = {1, 1, 1, 1}, const std::vector<int64_t> &dilation = {1, 1, 1, 1},
               int64_t group = 1, const Format &format = NCHW);
     void set_kernel_size(const std::vector<int64_t> &kernel_size);
     void set_stride(const std::vector<int64_t> &stride);
     void set_dilation(const std::vector<int64_t> &dilation);
     void set_pad_mode(const PadMode &pad_mode);
     void set_pad(const std::vector<int64_t> &pad);
     void set_mode(int64_t mode);
     void set_group(int64_t group);
     void set_out_channel(int64_t out_channel);
     void set_format(const Format &format);
     std::vector<int64_t> get_kernel_size() const;
     std::vector<int64_t> get_stride() const;
     std::vector<int64_t> get_dilation() const;
     PadMode get_pad_mode() const;
     std::vector<int64_t> get_pad() const;
     int64_t get_mode() const;
     int64_t get_group() const;
     int64_t get_out_channel() const;
     Format get_format() const;
   };
   MIND_API abstract::AbstractBasePtr Conv2dInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                  const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_CONV2D_H_
