:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_dynamic_quant.h:

Program Listing for File dynamic_quant.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_dynamic_quant.h>` (``include/converter/include/ops/dynamic_quant.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_DYNAMIC_QUANT_H_
   #define MINDSPORE_CORE_OPS_DYNAMIC_QUANT_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include <algorithm>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameDynamicQuant = "DynamicQuant";
   class MIND_API DynamicQuant : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(DynamicQuant);
     DynamicQuant() : BaseOperator(kNameDynamicQuant) {}
   
     void Init(const bool symmetric, const int64_t dst_type);
   
     void set_symmetric(const bool symmetric);
   
     bool get_symmetric() const;
   
     void set_dst_type(const int64_t dst_type);
   
     int64_t get_dst_type() const;
   };
   MIND_API abstract::AbstractBasePtr DynamicQuantInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                        const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_QUANTD_TYPE_CAST_H_
