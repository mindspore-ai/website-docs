:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_abstract_dshape.h:

Program Listing for File dshape.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_abstract_dshape.h>` (``include/core/abstract/dshape.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_ABSTRACT_DSHAPE_H_
   #define MINDSPORE_CORE_ABSTRACT_DSHAPE_H_
   
   #include <vector>
   #include <string>
   #include <sstream>
   #include <typeindex>
   #include <memory>
   #include <algorithm>
   
   #include "utils/log_adapter.h"
   #include "base/base.h"
   #include "utils/shape_utils.h"
   
   namespace mindspore {
   namespace abstract {
   class BaseShape;
   using BaseShapePtr = std::shared_ptr<BaseShape>;
   using BaseShapePtrList = std::vector<BaseShapePtr>;
   
   class MS_CORE_API BaseShape : public Base {
    public:
     BaseShape() = default;
   
     ~BaseShape() override = default;
   
     MS_DECLARE_PARENT(BaseShape, Base)
   
     
     virtual bool operator==(const BaseShape &other) const;
   
     bool operator!=(const BaseShape &other) const;
   
     std::size_t hash() const override { return tid(); }
   
     virtual bool IsDynamic() const = 0;
   
     virtual bool IsDimZero() const = 0;
   
     virtual bool IsDimUnknown() const = 0;
   
     virtual BaseShapePtr Clone() const = 0;
   
     virtual void Broaden() {}
   };
   
   class MS_CORE_API NoShape final : public BaseShape {
    public:
     MS_DECLARE_PARENT(NoShape, BaseShape)
   
     BaseShapePtr Clone() const override { return std::make_shared<NoShape>(); }
   
     std::string ToString() const override { return type_name(); }
   
     bool IsDynamic() const override { return false; }
   
     bool IsDimZero() const override { return true; };
   
     bool IsDimUnknown() const override { return false; }
   };
   
   inline const std::shared_ptr<NoShape> kNoShape = std::make_shared<NoShape>();
   
   class MS_CORE_API Shape final : public BaseShape {
    public:
     static const int64_t SHP_ANY = -1;
   
     Shape() : shape_() {}
   
     Shape(const std::initializer_list<int64_t> &list) : shape_(list) {}
   
     explicit Shape(const ShapeVector &list) : shape_(list) {}
   
     Shape(const ShapeVector &list, const ShapeVector &min_shape, const ShapeVector &max_shape)
         : shape_(list), min_shape_(min_shape), max_shape_(max_shape) {}
   
     ~Shape() override = default;
     MS_DECLARE_PARENT(Shape, BaseShape)
   
     
     std::string ToString() const override;
   
     std::string DumpText() const override;
   
     bool operator==(const BaseShape &other) const override;
   
     BaseShapePtr Clone() const override { return std::make_shared<Shape>(shape_, min_shape_, max_shape_); }
   
     void Broaden() override;
   
     void set_shape(const ShapeVector &shape) { shape_ = shape; }
   
     const ShapeVector &shape() const { return shape_; }
   
     const ShapeVector &min_shape() const { return min_shape_; }
   
     const ShapeVector &max_shape() const { return max_shape_; }
   
     bool IsDynamic() const override {
       return std::any_of(shape_.begin(), shape_.end(), [](int64_t s) { return s < 0; });
     }
   
     bool IsDimZero() const override { return shape_.empty(); };
   
     bool IsDimUnknown() const override {
       return std::any_of(shape_.begin(), shape_.end(), [](int64_t s) { return s < -1; });
     }
   
    private:
     ShapeVector shape_;      // use SHP_ANY to implement the any shape in python
     ShapeVector min_shape_;  // record minimum length for each dynamic dimension
     ShapeVector max_shape_;  // record maximum length for each dynamic dimension
   };
   using ShapePtr = std::shared_ptr<Shape>;
   using ShapePtrList = std::vector<ShapePtr>;
   
   class MS_CORE_API SequenceShape : public BaseShape {
    public:
     SequenceShape() : p_shapes_() {}
   
     explicit SequenceShape(const BaseShapePtrList &shapes) : p_shapes_(shapes) {}
   
     ~SequenceShape() override = default;
     MS_DECLARE_PARENT(SequenceShape, BaseShape)
   
     
     std::string ToString() const override;
   
     BaseShapePtrList ElementsClone() const;
   
     template <typename T>
     bool SequenceEqual(const BaseShape &other) const;
   
     const BaseShapePtrList &shape() const { return p_shapes_; }
   
     size_t size() const { return p_shapes_.size(); }
   
     const BaseShapePtr operator[](std::size_t dim) const { return p_shapes_[dim]; }
   
     bool IsDynamic() const override {
       return std::any_of(p_shapes_.begin(), p_shapes_.end(), [](const BaseShapePtr &bs) { return bs->IsDynamic(); });
     }
   
     bool IsDimZero() const override {
       return std::all_of(p_shapes_.begin(), p_shapes_.end(), [](const BaseShapePtr &bs) { return bs->IsDimZero(); });
     };
   
     bool IsDimUnknown() const override {
       return std::any_of(p_shapes_.begin(), p_shapes_.end(), [](const BaseShapePtr &bs) { return bs->IsDimUnknown(); });
     }
   
    protected:
     BaseShapePtrList p_shapes_;  // shape list of each elements
   };
   using SequenceShapePtr = std::shared_ptr<SequenceShape>;
   
   class MS_CORE_API TupleShape final : public SequenceShape {
    public:
     TupleShape() : SequenceShape() {}
   
     explicit TupleShape(const BaseShapePtrList &shapes) : SequenceShape(shapes) {}
   
     ~TupleShape() override = default;
     MS_DECLARE_PARENT(TupleShape, SequenceShape)
   
     std::string ToString() const override { return type_name() + "(" + SequenceShape::ToString() + ")"; }
   
     BaseShapePtr Clone() const override { return std::make_shared<TupleShape>(ElementsClone()); }
   
     bool operator==(const BaseShape &other) const override { return SequenceEqual<TupleShape>(other); }
   };
   using TupleShapePtr = std::shared_ptr<TupleShape>;
   
   class MS_CORE_API ListShape final : public SequenceShape {
    public:
     ListShape() : SequenceShape() {}
     explicit ListShape(const BaseShapePtrList &shapes) : SequenceShape(shapes) {}
   
     ~ListShape() override = default;
     MS_DECLARE_PARENT(ListShape, SequenceShape)
   
     std::string ToString() const override { return type_name() + "[" + SequenceShape::ToString() + "]"; }
   
     BaseShapePtr Clone() const override { return std::make_shared<ListShape>(SequenceShape::ElementsClone()); }
   
     bool operator==(const BaseShape &other) const override { return SequenceEqual<ListShape>(other); }
   };
   using ListShapePtr = std::shared_ptr<ListShape>;
   }  // namespace abstract
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_ABSTRACT_DSHAPE_H_
