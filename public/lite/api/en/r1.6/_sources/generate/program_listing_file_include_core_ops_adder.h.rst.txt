:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_adder.h:

Program Listing for File adder.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_adder.h>` (``include/core/ops/adder.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_ADDER_H_
   #define MINDSPORE_CORE_OPS_ADDER_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameAdder = "Adder";
   class MS_CORE_API Adder : public PrimitiveC {
    public:
     explicit Adder(const std::string &k_name = kNameAdder) : PrimitiveC(k_name) {}
   
     ~Adder() = default;
     MS_DECLARE_PARENT(Adder, PrimitiveC);
   
     void Init(const int64_t in_channel, const int64_t out_channel, const std::vector<int64_t> &kernel_size,
               const PadMode &pad_mode, const std::vector<int64_t> &stride, const std::vector<int64_t> &pad_list,
               const std::vector<int64_t> &dilation, const int64_t group, const Format &format);
   
     void set_in_channel(const int64_t in_channel);
   
     void set_out_channel(const int64_t out_channel);
   
     void set_kernel_size(const std::vector<int64_t> &kernel_size);
   
     void set_pad_mode(const PadMode &pad_mode);
   
     void set_stride(const std::vector<int64_t> &stride);
   
     void set_pad_list(const std::vector<int64_t> &pad_list);
   
     void set_dilation(const std::vector<int64_t> &dilation);
   
     void set_group(const int64_t group);
   
     void set_format(const Format &format);
   
     int64_t get_in_channel() const;
   
     int64_t get_out_channel() const;
   
     std::vector<int64_t> get_kernel_size() const;
   
     PadMode get_pad_mode() const;
   
     std::vector<int64_t> get_stride() const;
   
     std::vector<int64_t> get_pad_list() const;
   
     std::vector<int64_t> get_dilation() const;
   
     int64_t get_group() const;
   
     Format get_format() const;
   };
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_ADDER_H_
