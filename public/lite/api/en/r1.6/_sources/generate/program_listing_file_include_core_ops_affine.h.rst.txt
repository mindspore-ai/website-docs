:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_affine.h:

Program Listing for File affine.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_affine.h>` (``include/core/ops/affine.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_AFFINE_H_
   #define MINDSPORE_CORE_OPS_AFFINE_H_
   #include <vector>
   #include <string>
   #include "ops/primitive_c.h"
   #include "ops/op_utils.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   
   constexpr auto kNameAffine = "Affine";
   constexpr auto kAffineContext = "context";
   constexpr auto kAffineOutputDim = "output_dim";
   
   class MS_CORE_API Affine : public PrimitiveC {
    public:
     Affine() : PrimitiveC(kNameAffine) { InitIOName({"x1", "x2"}, {"outputs"}); }
     ~Affine() = default;
     MS_DECLARE_PARENT(Affine, PrimitiveC);
     void Init(const std::vector<int64_t> &contexts, int64_t output_dim, bool transpose_a = false,
               bool transpose_b = false);
     void set_context(const std::vector<int64_t> &);
     void set_output_dim(int64_t output_dim);
     void set_transpose_a(bool transpose_a);
     void set_transpose_b(bool transpose_b);
     void set_activation_type(const ActivationType &activation_type);
   
     bool get_transpose_a() const;
     bool get_transpose_b() const;
     std::vector<int64_t> get_context() const;
     int64_t get_output_dim() const;
     ActivationType get_activation_type() const;
   };
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_AFFINE_H_
