:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_apply_ada_max.h:

Program Listing for File apply_ada_max.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_apply_ada_max.h>` (``include/core/ops/apply_ada_max.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_APPLY_ADA_MAX_H_
   #define MINDSPORE_CORE_OPS_APPLY_ADA_MAX_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameApplyAdaMax = "ApplyAdaMax";
   class ApplyAdaMax : public PrimitiveC {
    public:
     ApplyAdaMax() : PrimitiveC(kNameApplyAdaMax) {
       InitIOName({"var", "m", "v", "beta1_power", "lr", "beta1", "beta2", "epsilon", "grad"}, {"var", "m", "v"});
     }
     ~ApplyAdaMax() = default;
     MS_DECLARE_PARENT(ApplyAdaMax, PrimitiveC);
   };
   AbstractBasePtr ApplyAdaMaxInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                    const std::vector<AbstractBasePtr> &input_args);
   
   using kPrimApplyAdaMaxPtr = std::shared_ptr<ApplyAdaMax>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_APPLY_ADA_MAX_H_
