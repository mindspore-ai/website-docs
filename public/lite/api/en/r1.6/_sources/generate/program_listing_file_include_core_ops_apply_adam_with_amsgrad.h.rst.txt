:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_apply_adam_with_amsgrad.h:

Program Listing for File apply_adam_with_amsgrad.h
==================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_apply_adam_with_amsgrad.h>` (``include/core/ops/apply_adam_with_amsgrad.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_APPLY_ADAM_WITH_AMSGRAD_H_
   #define MINDSPORE_CORE_OPS_APPLY_ADAM_WITH_AMSGRAD_H_
   #include <vector>
   #include <memory>
   
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameApplyAdamWithAmsgrad = "ApplyAdamWithAmsgrad";
   class ApplyAdamWithAmsgrad : public PrimitiveC {
    public:
     ApplyAdamWithAmsgrad() : PrimitiveC(kNameApplyAdamWithAmsgrad) {
       InitIOName({"var", "m", "v", "vhat", "beta1_power", "beta2_power", "lr", "grad"}, {"var", "m", "v", "vhat"});
     }
     ~ApplyAdamWithAmsgrad() = default;
     MS_DECLARE_PARENT(ApplyAdamWithAmsgrad, PrimitiveC);
   };
   
   AbstractBasePtr ApplyAdamWithAmsgradInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                             const std::vector<AbstractBasePtr> &input_args);
   
   using PrimApplyAdamWithAmsgradPtr = std::shared_ptr<ApplyAdamWithAmsgrad>;
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_APPLY_ADAM_WITH_AMSGRAD_H_
