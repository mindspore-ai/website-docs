:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_apply_add_sign.h:

Program Listing for File apply_add_sign.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_apply_add_sign.h>` (``include/core/ops/apply_add_sign.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_APPLY_ADD_SIGN_H_
   #define MINDSPORE_CORE_OPS_APPLY_ADD_SIGN_H_
   
   #include <map>
   #include <memory>
   #include <string>
   #include <vector>
   #include "abstract/abstract_value.h"
   #include "ops/primitive_c.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameApplyAddSign = "ApplyAddSign";
   
   class ApplyAddSign : public PrimitiveC {
    public:
     ApplyAddSign() : PrimitiveC(kNameApplyAddSign) {
       InitIOName({"var", "m", "lr", "alpha", "sign_decay", "beta", "grad"}, {"var", "m"});
     }
   
     ~ApplyAddSign() = default;
   
     MS_DECLARE_PARENT(ApplyAddSign, PrimitiveC);
   };
   
   AbstractBasePtr ApplyAddSignInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                     const std::vector<AbstractBasePtr> &input_args);
   using kPrimApplyAddSignPtr = std::shared_ptr<ApplyAddSign>;
   }  // namespace ops
   }  // namespace mindspore
   #endif
