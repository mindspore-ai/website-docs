:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_apply_keras_momentum.h:

Program Listing for File apply_keras_momentum.h
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_apply_keras_momentum.h>` (``include/core/ops/apply_keras_momentum.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_APPLY_KERAS_MOMENTUM_H_
   #define MINDSPORE_CORE_OPS_APPLY_KERAS_MOMENTUM_H_
   
   #include <map>
   #include <memory>
   #include <vector>
   #include <string>
   
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameApplyKerasMomentum = "ApplyKerasMomentum";
   class MS_CORE_API ApplyKerasMomentum : public PrimitiveC {
    public:
     ApplyKerasMomentum() : PrimitiveC(kNameApplyKerasMomentum) {
       InitIOName({"var", "accum", "lr", "grad", "momentum"}, {"var", "accum"});
     }
     ~ApplyKerasMomentum() = default;
     MS_DECLARE_PARENT(ApplyKerasMomentum, PrimitiveC);
   };
   
   AbstractBasePtr ApplyKerasMomentumInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                           const std::vector<AbstractBasePtr> &input_args);
   
   using PrimApplyKerasMomentumPtr = std::shared_ptr<ApplyKerasMomentum>;
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_APPLY_KERAS_MOMENTUM_H_
