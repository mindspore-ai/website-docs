:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_apply_momentum.h:

Program Listing for File apply_momentum.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_apply_momentum.h>` (``include/core/ops/apply_momentum.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_APPLY_MOMENTUM_H_
   #define MINDSPORE_CORE_OPS_APPLY_MOMENTUM_H_
   #include <vector>
   #include <memory>
   #include <string>
   #include <set>
   #include <map>
   
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameApplyMomentum = "ApplyMomentum";
   class MS_CORE_API ApplyMomentum : public PrimitiveC {
    public:
     ApplyMomentum() : PrimitiveC(kNameApplyMomentum) {
       InitIOName({"var", "accum", "lr", "grad", "momentum"}, {"var", "accum"});
     }
     ~ApplyMomentum() = default;
     MS_DECLARE_PARENT(ApplyMomentum, PrimitiveC);
     void Init(const bool use_nesterov = false, const bool use_locking = false, const float gradient_scale = 1.0);
     void set_use_nesterov(const bool use_nesterov);
     void set_use_locking(const bool use_locking);
     void set_gradient_scale(const float gradient_scale);
     bool get_use_nesterov() const;
     bool get_use_locking() const;
     float get_gradient_scale() const;
   };
   AbstractBasePtr ApplyMomentumInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                      const std::vector<AbstractBasePtr> &input_args);
   using kPrimApplyMomentumPtr = std::shared_ptr<ApplyMomentum>;
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_APPLY_MOMENTUM_H_
