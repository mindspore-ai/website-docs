:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_batch_matmul.h:

Program Listing for File batch_matmul.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_batch_matmul.h>` (``include/core/ops/batch_matmul.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_BATCH_MATMUL_H_
   #define MINDSPORE_CORE_OPS_BATCH_MATMUL_H_
   #include <vector>
   #include <memory>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   class MS_CORE_API BatchMatmul : public PrimitiveC {
    public:
     BatchMatmul() : PrimitiveC(prim::kPrimBatchMatMul->name()) { InitIOName({"x1", "x2"}, {"output"}); }
     ~BatchMatmul() = default;
     MS_DECLARE_PARENT(BatchMatmul, PrimitiveC);
     void Init(bool transpose_a = false, bool transpose_b = false);
     void set_transpose_a(bool transpose_a);
     void set_transpose_b(bool transpose_b);
     bool get_transpose_a() const;
     bool get_transpose_b() const;
   };
   AbstractBasePtr BatchMatmulInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                    const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_BATCH_MATMUL_H_
