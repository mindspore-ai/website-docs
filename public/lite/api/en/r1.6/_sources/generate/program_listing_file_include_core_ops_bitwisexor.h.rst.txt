:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_bitwisexor.h:

Program Listing for File bitwisexor.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_bitwisexor.h>` (``include/core/ops/bitwisexor.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_BitwiseXor_H_
   #define MINDSPORE_CORE_OPS_BitwiseXor_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameBitwiseXor = "BitwiseXor";
   class BitwiseXor : public PrimitiveC {
    public:
     BitwiseXor() : PrimitiveC(kNameBitwiseXor) { InitIOName({"x1", "x2"}, {"y"}); }
     explicit BitwiseXor(const std::string k_name) : PrimitiveC(k_name) { InitIOName({"x1", "x2"}, {"y"}); }
     ~BitwiseXor() = default;
     MS_DECLARE_PARENT(BitwiseXor, PrimitiveC);
     void Init() {}
   };
   AbstractBasePtr BitwiseXorInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                   const std::vector<AbstractBasePtr> &input_args);
   using kPrimBitwiseXorPtr = std::shared_ptr<BitwiseXor>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_BitwiseXor_H_
