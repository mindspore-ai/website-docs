:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_broadcast.h:

Program Listing for File broadcast.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_broadcast.h>` (``include/core/ops/broadcast.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_BROADCAST_H_
   #define MINDSPORE_CORE_OPS_BROADCAST_H_
   #include <string>
   #include <vector>
   #include <memory>
   
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameBroadcast = "Broadcast";
   class MS_CORE_API Broadcast : public PrimitiveC {
    public:
     Broadcast() : PrimitiveC(kNameBroadcast) {}
     ~Broadcast() = default;
     MS_DECLARE_PARENT(Broadcast, PrimitiveC);
     void Init(const int64_t root_rank, const std::string &group = "hccl_world_group");
     void set_root_rank(const int64_t root_rank);
     void set_group(const std::string &group);
     int64_t get_root_rank() const;
     std::string get_group() const;
   };
   AbstractBasePtr BroadcastInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                  const std::vector<AbstractBasePtr> &input_args);
   using PrimBroadcast = std::shared_ptr<Broadcast>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_BROADCAST_H_
