:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_constant_of_shape.h:

Program Listing for File constant_of_shape.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_constant_of_shape.h>` (``include/core/ops/constant_of_shape.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_CONSTANT_OF_SHAPE_H_
   #define MINDSPORE_CORE_OPS_CONSTANT_OF_SHAPE_H_
   #include <memory>
   #include <vector>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameConstantOfShape = "ConstantOfShape";
   class MS_CORE_API ConstantOfShape : public PrimitiveC {
    public:
     ConstantOfShape() : PrimitiveC(kNameConstantOfShape) {}
   
     ~ConstantOfShape() = default;
   
     MS_DECLARE_PARENT(ConstantOfShape, PrimitiveC);
   
     void Init(int64_t data_type, const std::vector<float> &value);
   
     void set_data_type(int64_t data_type);
   
     void set_value(const std::vector<float> &value);
   
     int64_t get_data_type() const;
   
     std::vector<float> get_value() const;
   };
   
   AbstractBasePtr ConstantOfShapeInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                        const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_CONSTANT_OF_SHAPE_H_
