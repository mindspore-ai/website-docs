:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_conv2d_transpose.h:

Program Listing for File conv2d_transpose.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_conv2d_transpose.h>` (``include/core/ops/conv2d_transpose.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_CONV2D_TRANSPOSE_H_
   #define MINDSPORE_CORE_OPS_CONV2D_TRANSPOSE_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   
   #include "ops/op_utils.h"
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   namespace mindspore {
   namespace ops {
   constexpr auto kNameConv2DTranspose = "Conv2DTranspose";
   class MS_CORE_API Conv2DTranspose : public PrimitiveC {
    public:
     Conv2DTranspose() : PrimitiveC(kNameConv2DTranspose) {
       InitIOName({"out_backprop", "filter", "input_sizes"}, {"output"});
     }
     explicit Conv2DTranspose(const std::string k_name) : PrimitiveC(k_name) {
       InitIOName({"out_backprop", "filter", "input_sizes"}, {"output"});
     }
     ~Conv2DTranspose() = default;
     MS_DECLARE_PARENT(Conv2DTranspose, PrimitiveC);
     void Init(int64_t in_channel, int64_t out_channel, const std::vector<int64_t> &kernel_size, int64_t mode = 1,
               const PadMode &pad_mode = VALID, const std::vector<int64_t> &pad = {0, 0, 0, 0},
               const std::vector<int64_t> &stride = {1, 1}, const std::vector<int64_t> &dilation = {1, 1},
               int64_t group = 1, const Format &format = NCHW, const std::vector<int64_t> &pad_list = {0, 0, 0, 0});
     void set_in_channel(int64_t in_channel);
     void set_out_channel(int64_t out_channel);
     virtual void set_kernel_size(const std::vector<int64_t> &kernel_size);
     void set_stride(const std::vector<int64_t> &stride);
     virtual void set_dilation(const std::vector<int64_t> &dilation);
     void set_pad_mode(const PadMode &pad_mode);
     void set_pad(const std::vector<int64_t> &pad);
     void set_mode(int64_t mode);
     void set_group(int64_t group);
     void set_format(const Format &format);
     void set_pad_list(const std::vector<int64_t> &pad_list);
   
     int64_t get_in_channel() const;
     int64_t get_out_channel() const;
     std::vector<int64_t> get_kernel_size() const;
     std::vector<int64_t> get_stride() const;
     std::vector<int64_t> get_dilation() const;
     PadMode get_pad_mode() const;
     std::vector<int64_t> get_pad() const;
     int64_t get_mode() const;
     int64_t get_group() const;
     Format get_format() const;
     std::vector<int64_t> get_pad_list() const;
   };
   AbstractBasePtr Conv2DTransposeInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                        const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_CONV2D_TRANSPOSE_H_
