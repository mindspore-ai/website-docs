:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_crop.h:

Program Listing for File crop.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_crop.h>` (``include/core/ops/crop.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_CROP_H_
   #define MINDSPORE_CORE_OPS_CROP_H_
   #include <vector>
   #include <memory>
   
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameCrop = "Crop";
   class MS_CORE_API Crop : public PrimitiveC {
    public:
     Crop() : PrimitiveC(kNameCrop) {}
   
     ~Crop() = default;
   
     MS_DECLARE_PARENT(Crop, PrimitiveC);
   
     void Init(const int64_t axis, const std::vector<int64_t> &offsets);
   
     void set_axis(const int64_t axis);
   
     void set_offsets(const std::vector<int64_t> &offsets);
   
     int64_t get_axis() const;
   
     std::vector<int64_t> get_offsets() const;
   };
   AbstractBasePtr CropInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                             const std::vector<AbstractBasePtr> &input_args);
   using PrimCrop = std::shared_ptr<Crop>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_CROP_H_
