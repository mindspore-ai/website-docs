:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_custom_predict.h:

Program Listing for File custom_predict.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_custom_predict.h>` (``include/core/ops/custom_predict.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_CUSTOM_PREDICT_H_
   #define MINDSPORE_CORE_OPS_CUSTOM_PREDICT_H_
   #include <memory>
   #include <vector>
   
   #include "ops/primitive_c.h"
   #include "ops/op_utils.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameCustomPredict = "CustomPredict";
   class MS_CORE_API CustomPredict : public PrimitiveC {
    public:
     CustomPredict() : PrimitiveC(kNameCustomPredict) {}
     ~CustomPredict() = default;
     MS_DECLARE_PARENT(CustomPredict, PrimitiveC);
     void Init(const int64_t output_num, const float weight_threshold);
     void set_output_num(const int64_t output_num);
     void set_weight_threshold(const float weight_threshold);
     int64_t get_output_num() const;
     float get_weight_threshold() const;
   };
   AbstractBasePtr CustomPredictInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                      const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_CUSTOM_PREDICT_H_
