:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_fake_quant_with_min_max_vars_per_channel.h:

Program Listing for File fake_quant_with_min_max_vars_per_channel.h
===================================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_fake_quant_with_min_max_vars_per_channel.h>` (``include/core/ops/fake_quant_with_min_max_vars_per_channel.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_FAKE_QUANT_WITH_MIN_MAX_VARS_PER_CHANNEL_H_
   #define MINDSPORE_CORE_OPS_FAKE_QUANT_WITH_MIN_MAX_VARS_PER_CHANNEL_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameFakeQuantWithMinMaxVarsPerChannel = "FakeQuantWithMinMaxVarsPerChannel";
   class MS_CORE_API FakeQuantWithMinMaxVarsPerChannel : public PrimitiveC {
    public:
     FakeQuantWithMinMaxVarsPerChannel() : PrimitiveC(kNameFakeQuantWithMinMaxVarsPerChannel) {}
     ~FakeQuantWithMinMaxVarsPerChannel() = default;
     MS_DECLARE_PARENT(FakeQuantWithMinMaxVarsPerChannel, PrimitiveC);
     void Init(const int64_t num_bits = 8, const bool narrow_range = false);
     void set_num_bits(const int64_t num_bits);
     void set_narrow_range(const bool narrow_range);
     int64_t get_num_bits() const;
     bool get_narrow_range() const;
   };
   
   AbstractBasePtr FakeQuantWithMinMaxVarsPerChannelInfer(const abstract::AnalysisEnginePtr &,
                                                          const PrimitivePtr &primitive,
                                                          const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_FAKE_QUANT_WITH_MIN_MAX_VARS_PER_CHANNEL_H_
