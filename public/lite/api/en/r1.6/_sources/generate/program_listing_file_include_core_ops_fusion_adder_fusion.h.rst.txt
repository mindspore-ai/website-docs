:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_fusion_adder_fusion.h:

Program Listing for File adder_fusion.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_fusion_adder_fusion.h>` (``include/core/ops/fusion/adder_fusion.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_ADDER_FUSION_H_
   #define MINDSPORE_CORE_OPS_ADDER_FUSION_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/adder.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameAdderFusion = "AdderFusion";
   class MS_CORE_API AdderFusion : public Adder {
    public:
     AdderFusion() : Adder(kNameAdderFusion) {}
   
     ~AdderFusion() = default;
   
     MS_DECLARE_PARENT(AdderFusion, Adder);
   
     void Init(const int64_t in_channel, const int64_t out_channel, const std::vector<int64_t> &kernel_size,
               const PadMode &pad_mode, const std::vector<int64_t> &stride, const std::vector<int64_t> &pad_list,
               const std::vector<int64_t> &dilation, const int64_t group, const Format &format,
               const ActivationType activation_type);
   
     void set_activation_type(const ActivationType activation_type);
   
     ActivationType get_activation_type() const;
   };
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_ADDER_FUSION_H_
