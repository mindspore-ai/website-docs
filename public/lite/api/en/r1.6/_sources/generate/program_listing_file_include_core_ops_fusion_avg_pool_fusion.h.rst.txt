:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_fusion_avg_pool_fusion.h:

Program Listing for File avg_pool_fusion.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_fusion_avg_pool_fusion.h>` (``include/core/ops/fusion/avg_pool_fusion.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_AVG_POOL_FUSION_H_
   #define MINDSPORE_CORE_OPS_AVG_POOL_FUSION_H_
   #include <vector>
   #include <memory>
   
   #include "ops/avg_pool.h"
   #include "ops/op_utils.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameAvgPoolFusion = "AvgPoolFusion";
   class MS_CORE_API AvgPoolFusion : public AvgPool {
    public:
     AvgPoolFusion() : AvgPool(kNameAvgPoolFusion) { InitIOName({"x"}, {"output"}); }
   
     ~AvgPoolFusion() = default;
   
     MS_DECLARE_PARENT(AvgPoolFusion, AvgPool);
   
     void Init(const std::vector<int64_t> &kernel_size = {1}, const std::vector<int64_t> &stride = {1},
               const PadMode &pad_mode = VALID, const Format &format = NCHW,
               const std::vector<int64_t> &pad = {0, 0, 0, 0}, const RoundMode &round_mode = FLOOR,
               const bool global = false, const ActivationType activation_type = NO_ACTIVATION);
   
     void set_global(const bool global);
   
     void set_activation_type(const ActivationType activation_type);
   
     bool get_global() const;
   
     ActivationType get_activation_type() const;
   };
   
   AbstractBasePtr AvgPoolFusionInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                      const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_AVG_POOL_FUSION_H_
