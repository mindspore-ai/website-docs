:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_fusion_reduce_fusion.h:

Program Listing for File reduce_fusion.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_fusion_reduce_fusion.h>` (``include/core/ops/fusion/reduce_fusion.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_REDUCE_FUSION_H_
   #define MINDSPORE_CORE_OPS_REDUCE_FUSION_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/reduce.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameReduceFusion = "ReduceFusion";
   class MS_CORE_API ReduceFusion : public Reduce {
    public:
     ReduceFusion() : Reduce(kNameReduceFusion) {}
   
     ~ReduceFusion() = default;
   
     MS_DECLARE_PARENT(ReduceFusion, PrimitiveC);
   
     void Init(const bool keep_dims = false, const ReduceMode mode = ReduceMode::Reduce_Mean,
               const bool reduce_to_end = false, const float coeff = 1.0);
   
     void set_keep_dims(const bool keep_dims);
   
     void set_mode(const ReduceMode mode);
   
     void set_reduce_to_end(const bool reduce_to_end);
   
     void set_coeff(const float coeff);
   
     bool get_keep_dims() const;
   
     ReduceMode get_mode() const;
   
     bool get_reduce_to_end() const;
   
     float get_coeff() const;
   };
   AbstractBasePtr ReduceFusionInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                     const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_REDUCE_FUSION_H_
