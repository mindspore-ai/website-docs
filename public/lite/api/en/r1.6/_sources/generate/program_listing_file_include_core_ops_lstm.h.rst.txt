:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_lstm.h:

Program Listing for File lstm.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_lstm.h>` (``include/core/ops/lstm.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_LSTM_H_
   #define MINDSPORE_CORE_OPS_LSTM_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include <algorithm>
   #include "ops/op_utils.h"
   #include "ops/primitive_c.h"
   #include "abstract/primitive_infer_map.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameLSTM = "LSTM";
   class MS_CORE_API LSTM : public PrimitiveC {
    public:
     LSTM() : PrimitiveC(kNameLSTM) {}
     ~LSTM() = default;
     MS_DECLARE_PARENT(LSTM, PrimitiveC);
     void Init(const int64_t input_size, const int64_t hidden_size, const int64_t num_layers, const bool has_bias,
               const float dropout, const bool bidirectional = false, const float zoneout_cell = 0.0f,
               const float zoneout_hidden = 0.0f);
     void set_input_size(const int64_t input_size);
     int64_t get_input_size() const;
     void set_hidden_size(const int64_t hidden_size);
     int64_t get_hidden_size() const;
     void set_num_layers(const int64_t num_layers);
     int64_t get_num_layers() const;
     void set_has_bias(const bool has_bias);
     bool get_has_bias() const;
     void set_dropout(const float dropout);
     float get_dropout() const;
     void set_bidirectional(const bool bidirectional);
     bool get_bidirectional() const;
     void set_num_directions(const int64_t num_directions);
     int64_t get_num_directions() const;
     void set_zoneout_cell(float zoneout_cell);
     float get_zoneout_cell() const;
     void set_zoneout_hidden(float zoneout_hidden);
     float get_zoneout_hidden() const;
     int64_t get_good_ld(const int64_t dim, const int64_t type_size);
   };
   AbstractBasePtr LstmInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                             const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_LSTM_H_
