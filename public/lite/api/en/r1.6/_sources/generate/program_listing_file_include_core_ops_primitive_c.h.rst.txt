:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_primitive_c.h:

Program Listing for File primitive_c.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_primitive_c.h>` (``include/core/ops/primitive_c.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_PRIMITIVE_C_H_
   #define MINDSPORE_CORE_OPS_PRIMITIVE_C_H_
   #include <string>
   #include <vector>
   #include <map>
   #include <memory>
   #include "ir/primitive.h"
   #include "abstract/primitive_infer_map.h"
   #include "ir/value.h"
   namespace mindspore {
   namespace ops {
   class MS_CORE_API PrimitiveC : public Primitive {
    public:
     explicit PrimitiveC(const std::string &name) : Primitive(name) {}
     MS_DECLARE_PARENT(PrimitiveC, Primitive);
   
     ~PrimitiveC() = default;
   
     AbstractBasePtr Infer(const AbstractBasePtrList &abstract_list);
   
    protected:
     void InitIOName(const std::vector<std::string> &inputs_name, const std::vector<std::string> &outputs_name);
   };
   
   using OpPrimCDefineFunc = std::function<std::shared_ptr<PrimitiveC>()>;
   class MS_CORE_API OpPrimCRegister {
    public:
     ~OpPrimCRegister() {}
   
     static OpPrimCRegister &GetInstance();
   
     std::map<std::string, OpPrimCDefineFunc> GetPrimCMap();
   
     void SetPrimCMap(const std::string &kname, const OpPrimCDefineFunc &fn);
   
    private:
     OpPrimCRegister() {}
     std::map<std::string, OpPrimCDefineFunc> op_primc_fns_;
   };
   
   class MS_CORE_API OpPrimCRegisterHelper {
    public:
     OpPrimCRegisterHelper(const std::string &kname, const OpPrimCDefineFunc &fn) {
       OpPrimCRegister::GetInstance().SetPrimCMap(kname, fn);
     }
   
     ~OpPrimCRegisterHelper() = default;
   
    private:
     int id_{0};
   };
   
   #define REGISTER_PRIMITIVE_C(kname, primc)               \
     std::shared_ptr<PrimitiveC> GetDefaultPrimC##primc() { \
       auto out = std::make_shared<primc>();                \
       return out;                                          \
     }                                                      \
     OpPrimCRegisterHelper primc_gen_##kname(kname, GetDefaultPrimC##primc);
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_PRIMITIVE_C_H_
