:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_quant_dtype_cast.h:

Program Listing for File quant_dtype_cast.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_quant_dtype_cast.h>` (``include/core/ops/quant_dtype_cast.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_QUANTD_TYPE_CAST_H_
   #define MINDSPORE_CORE_OPS_QUANTD_TYPE_CAST_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include <algorithm>
   #include "ops/op_utils.h"
   #include "ops/primitive_c.h"
   #include "abstract/primitive_infer_map.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameQuantDTypeCast = "QuantDTypeCast";
   class MS_CORE_API QuantDTypeCast : public PrimitiveC {
    public:
     QuantDTypeCast() : PrimitiveC(kNameQuantDTypeCast) {}
   
     ~QuantDTypeCast() = default;
   
     MS_DECLARE_PARENT(QuantDTypeCast, PrimitiveC);
   
     void Init(const int64_t src_t, const int64_t dst_t);
   
     void set_src_t(const int64_t src_t);
   
     int64_t get_src_t() const;
   
     void set_dst_t(const int64_t dst_t);
   
     int64_t get_dst_t() const;
   };
   AbstractBasePtr QuantDTypeCastInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                       const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_QUANTD_TYPE_CAST_H_
