:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_sigmoid_cross_entropy_with_logits.h:

Program Listing for File sigmoid_cross_entropy_with_logits.h
============================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_sigmoid_cross_entropy_with_logits.h>` (``include/core/ops/sigmoid_cross_entropy_with_logits.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_SIGMOID_CROSS_ENTROPY_WITH_LOGITS_H_
   #define MINDSPORE_CORE_OPS_SIGMOID_CROSS_ENTROPY_WITH_LOGITS_H_
   #include <vector>
   #include <memory>
   #include <string>
   #include <set>
   #include <map>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameSigmoidCrossEntropyWithLogits = "SigmoidCrossEntropyWithLogits";
   class MS_CORE_API SigmoidCrossEntropyWithLogits : public PrimitiveC {
    public:
     SigmoidCrossEntropyWithLogits() : PrimitiveC(kNameSigmoidCrossEntropyWithLogits) {
       InitIOName({"predict", "target"}, {"loss"});
     }
     ~SigmoidCrossEntropyWithLogits() = default;
     MS_DECLARE_PARENT(SigmoidCrossEntropyWithLogits, PrimitiveC);
     void Init() {}
   };
   AbstractBasePtr SigmoidCrossEntropyWithLogitsInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                      const std::vector<AbstractBasePtr> &input_args);
   using kPrimSigmoidCrossEntropyWithLogitsPtr = std::shared_ptr<SigmoidCrossEntropyWithLogits>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_SIGMOID_CROSS_ENTROPY_WITH_LOGITS_H_
