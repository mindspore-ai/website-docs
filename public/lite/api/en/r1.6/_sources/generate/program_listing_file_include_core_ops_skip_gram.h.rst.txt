:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_skip_gram.h:

Program Listing for File skip_gram.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_skip_gram.h>` (``include/core/ops/skip_gram.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_SKIP_GRAM_H_
   #define MINDSPORE_CORE_OPS_SKIP_GRAM_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include <algorithm>
   #include "ops/op_utils.h"
   #include "ops/primitive_c.h"
   #include "abstract/primitive_infer_map.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameSkipGram = "SkipGram";
   class MS_CORE_API SkipGram : public PrimitiveC {
    public:
     SkipGram() : PrimitiveC(kNameSkipGram) {}
   
     ~SkipGram() = default;
   
     MS_DECLARE_PARENT(SkipGram, PrimitiveC);
   
     void Init(const bool include_all_grams, const int64_t max_skip_size, const int64_t ngram_size);
   
     void set_include_all_grams(const bool include_all_grams);
   
     bool get_include_all_grams() const;
   
     void set_max_skip_size(const int64_t max_skip_size);
   
     int64_t get_max_skip_size() const;
   
     void set_ngram_size(const int64_t ngram_size);
   
     int64_t get_ngram_size() const;
   };
   AbstractBasePtr SkipGramInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                 const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_SKIP_GRAM_H_
