:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_smooth_l1_loss.h:

Program Listing for File smooth_l1_loss.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_smooth_l1_loss.h>` (``include/core/ops/smooth_l1_loss.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_SMOOTH_L1_LOSS_H_
   #define MINDSPORE_CORE_OPS_SMOOTH_L1_LOSS_H_
   #include <memory>
   #include <vector>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameSmoothL1Loss = "SmoothL1Loss";
   class MS_CORE_API SmoothL1Loss : public PrimitiveC {
    public:
     SmoothL1Loss() : PrimitiveC(kNameSmoothL1Loss) { InitIOName({"prediction", "target"}, {"output"}); }
     ~SmoothL1Loss() = default;
     MS_DECLARE_PARENT(SmoothL1Loss, PrimitiveC);
     void Init(const float beta);
     void set_beta(const float beta);
     float get_beta() const;
   };
   AbstractBasePtr SmoothL1LossInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                     const std::vector<AbstractBasePtr> &input_args);
   using kPrimSmoothL1LossPtr = std::shared_ptr<SmoothL1Loss>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_SMOOTH_L1_LOSS_H_
