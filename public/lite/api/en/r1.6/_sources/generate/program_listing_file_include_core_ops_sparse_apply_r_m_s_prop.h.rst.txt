:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_sparse_apply_r_m_s_prop.h:

Program Listing for File sparse_apply_r_m_s_prop.h
==================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_sparse_apply_r_m_s_prop.h>` (``include/core/ops/sparse_apply_r_m_s_prop.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_SPARSE_APPLY_R_M_S_PROP_H_
   #define MINDSPORE_CORE_OPS_SPARSE_APPLY_R_M_S_PROP_H_
   
   #include <map>
   #include <memory>
   #include <string>
   #include <vector>
   
   #include "abstract/abstract_value.h"
   #include "ops/primitive_c.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameSparseApplyRMSProp = "SparseApplyRMSProp";
   class SparseApplyRMSProp : public PrimitiveC {
    public:
     SparseApplyRMSProp() : PrimitiveC(kNameSparseApplyRMSProp) {
       InitIOName({"var", "ms", "mom", "lr", "grad", "indices"}, {"var", "ms", "mom"});
     }
     ~SparseApplyRMSProp() = default;
     MS_DECLARE_PARENT(SparseApplyRMSProp, PrimitiveC);
   };
   
   AbstractBasePtr SparseApplyRMSPropInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                           const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_SPARSE_APPLY_R_M_S_PROP_H_
