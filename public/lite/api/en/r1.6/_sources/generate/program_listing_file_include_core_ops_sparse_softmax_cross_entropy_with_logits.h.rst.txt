:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_sparse_softmax_cross_entropy_with_logits.h:

Program Listing for File sparse_softmax_cross_entropy_with_logits.h
===================================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_sparse_softmax_cross_entropy_with_logits.h>` (``include/core/ops/sparse_softmax_cross_entropy_with_logits.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_SPARSE_SOFTMAX_CROSS_ENTROPY_WITH_LOGITS_H_
   #define MINDSPORE_CORE_OPS_SPARSE_SOFTMAX_CROSS_ENTROPY_WITH_LOGITS_H_
   #include <memory>
   #include <vector>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameSparseSoftmaxCrossEntropyWithLogits = "SparseSoftmaxCrossEntropyWithLogits";
   class MS_CORE_API SparseSoftmaxCrossEntropyWithLogits : public PrimitiveC {
    public:
     SparseSoftmaxCrossEntropyWithLogits() : PrimitiveC(kNameSparseSoftmaxCrossEntropyWithLogits) {}
     ~SparseSoftmaxCrossEntropyWithLogits() = default;
     MS_DECLARE_PARENT(SparseSoftmaxCrossEntropyWithLogits, PrimitiveC);
     void Init(const bool is_grad = false);
     void set_is_grad(const bool is_grad);
     bool get_is_grad() const;
   };
   AbstractBasePtr SparseSoftmaxCrossEntropyWithLogitsInfer(const abstract::AnalysisEnginePtr &,
                                                            const PrimitivePtr &primitive,
                                                            const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_SPARSE_SOFTMAX_CROSS_ENTROPY_WITH_LOGITS_H_
