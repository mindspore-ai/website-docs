:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_splice.h:

Program Listing for File splice.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_splice.h>` (``include/core/ops/splice.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_SPLICE_H_
   #define MINDSPORE_CORE_OPS_SPLICE_H_
   #include <vector>
   #include <memory>
   #include "ops/primitive_c.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameSplice = "Splice";
   class MS_CORE_API Splice : public PrimitiveC {
    public:
     Splice() : PrimitiveC(kNameSplice) { InitIOName({"inputs"}, {"outputs"}); }
   
     ~Splice() = default;
     MS_DECLARE_PARENT(Splice, PrimitiveC);
   
     void Init(const std::vector<int64_t> &contexts, const std::vector<int64_t> &forward_indexes, int64_t output_dims);
   
     void set_context(const std::vector<int64_t> &contexts);
   
     void set_forward_indexes(const std::vector<int64_t> &forward_indexes);
   
     void set_output_dim(int64_t output_dim);
   
     std::vector<int64_t> get_context() const;
   
     std::vector<int64_t> get_forward_indexes() const;
   
     int64_t get_output_dim() const;
     AbstractBasePtr SpliceInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                 const std::vector<AbstractBasePtr> &input_args);
   };
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_SPLICE_H_
