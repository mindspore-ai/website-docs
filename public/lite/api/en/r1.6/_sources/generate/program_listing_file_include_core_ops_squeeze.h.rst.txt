:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_squeeze.h:

Program Listing for File squeeze.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_squeeze.h>` (``include/core/ops/squeeze.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_SQUEEZE_H_
   #define MINDSPORE_CORE_OPS_SQUEEZE_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include <algorithm>
   #include "ops/op_utils.h"
   #include "ops/primitive_c.h"
   #include "abstract/primitive_infer_map.h"
   #include "abstract/abstract_value.h"
   #include "utils/check_convert_utils.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameSqueeze = "Squeeze";
   class MS_CORE_API Squeeze : public PrimitiveC {
    public:
     Squeeze() : PrimitiveC(kNameSqueeze) { InitIOName({"x"}, {"output"}); }
     ~Squeeze() = default;
     MS_DECLARE_PARENT(Squeeze, PrimitiveC);
     void Init(const std::vector<int64_t> &axis = {});
     void set_axis(const std::vector<int64_t> &axis);
     std::vector<int64_t> get_axis() const;
   };
   
   AbstractBasePtr SqueezeInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                const std::vector<AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_SQUEEZE_H_
