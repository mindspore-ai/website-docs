:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_utils_signal.h:

Program Listing for File signal.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_utils_signal.h>` (``include/core/utils/signal.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_UTILS_SIGNAL_H_
   #define MINDSPORE_CORE_UTILS_SIGNAL_H_
   
   #include <functional>
   #include <memory>
   #include <vector>
   #include <utility>
   
   namespace mindspore {
   template <class Return, class Type, class... Args>
   std::function<Return(Args...)> bind_member(Type *instance, Return (Type::*method)(Args...)) {
     return [=](Args &&... args) -> Return { return (instance->*method)(std::forward<Args>(args)...); };
   }
   
   template <class FuncType>
   class Slot {
    public:
     explicit Slot(const std::function<FuncType> &callback) : callback(callback) {}
   
     ~Slot() {}
   
     std::function<FuncType> callback = nullptr;
   };
   
   template <class FuncType>
   class Signal {
    public:
     template <class... Args>
     void operator()(Args &&... args) {
       for (auto &slot : slots_) {
         if (slot->callback != nullptr) {
           slot->callback(std::forward<Args>(args)...);
         }
       }
     }
   
     void add_slot(const std::function<FuncType> &func) {
       auto slot = std::make_shared<Slot<FuncType>>(func);
       slots_.push_back(slot);
     }
   
     // signal connect to a class member func
     template <class InstanceType, class MemberFuncType>
     void connect(InstanceType instance, MemberFuncType func) {
       add_slot(bind_member(instance, func));
     }
   
    private:
     std::vector<std::shared_ptr<Slot<FuncType>>> slots_;
   };
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_UTILS_EVENT_H_
