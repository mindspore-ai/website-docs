:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_lite_include_ms_tensor.h:

Program Listing for File ms_tensor.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_lite_include_ms_tensor.h>` (``include/lite/include/ms_tensor.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_LITE_INCLUDE_MS_TENSOR_H_
   #define MINDSPORE_LITE_INCLUDE_MS_TENSOR_H_
   
   #include <vector>
   #include "include/lite_utils.h"
   #include "ir/dtype/type_id.h"
   
   namespace mindspore {
   enum Format : int64_t;
   
   namespace tensor {
   class  MSTensor {
    public:
     MSTensor() = default;
   
     virtual ~MSTensor() = default;
   
     static MSTensor *CreateTensor(const String &name, TypeId type, const Vector<int> &shape, const void *data,
                                   size_t data_len);
   
     virtual void set_allocator(AllocatorPtr allocator) = 0;
   
     virtual AllocatorPtr allocator() const = 0;
   
     virtual TypeId data_type() const = 0;
   
     virtual void set_data_type(TypeId data_type) = 0;
   
     virtual void set_format(mindspore::Format format) = 0;
   
     virtual mindspore::Format format() const = 0;
   
     virtual Vector<int> shape() const = 0;
   
     virtual void set_shape(const Vector<int> &shape) = 0;
   
     virtual int64_t ElementsNum() const = 0;
   
     virtual size_t Size() const = 0;
   
     virtual String tensor_name() const = 0;
   
     virtual void set_tensor_name(const String &name) = 0;
   
     virtual void *MutableData() = 0;
   
     virtual void *data() = 0;
   
     virtual void set_data(void *data) = 0;
   
     virtual Vector<lite::LiteQuantParam> quant_params() const = 0;
   
     virtual void set_quant_params(Vector<lite::LiteQuantParam>) = 0;
   
     virtual bool IsConst() const = 0;
   };
   }  // namespace tensor
   }  // namespace mindspore
   #endif  // MINDSPORE_LITE_INCLUDE_MS_TENSOR_H_
