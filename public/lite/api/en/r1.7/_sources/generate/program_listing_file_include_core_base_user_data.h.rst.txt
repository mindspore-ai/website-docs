:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_base_user_data.h:

Program Listing for File user_data.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_base_user_data.h>` (``include/core/base/user_data.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_USER_DATA_H_
   #define MINDSPORE_CORE_USER_DATA_H_
   
   #include <string>
   #include <memory>
   #include <utility>
   #include "utils/hash_map.h"
   
   namespace mindspore {
   class UserData {
    public:
     using DataMap = mindspore::HashMap<std::string, std::shared_ptr<void>>;
   
     UserData() = default;
     UserData(const UserData &other) : data_(other.data_ ? std::make_unique<DataMap>(*other.data_) : nullptr) {}
     UserData(UserData &&other) : data_(std::move(other.data_)) {}
     UserData &operator=(const UserData &other) {
       if (this == &other) {
         return *this;
       }
       data_ = (other.data_ ? std::make_unique<DataMap>(*other.data_) : nullptr);
       return *this;
     }
     UserData &operator=(UserData &&other) {
       if (this == &other) {
         return *this;
       }
       data_ = std::move(other.data_);
       return *this;
     }
     ~UserData() = default;
   
     template <typename T>
     void set(const std::string &key, const std::shared_ptr<T> &value) {
       InitData();
       if (value == nullptr) {
         (void)data_->erase(key);
       } else {
         (void)data_->insert_or_assign(key, value);
       }
     }
   
     template <typename T>
     std::shared_ptr<T> get(const std::string &key) const {
       if (data_ == nullptr) {
         return nullptr;
       }
       auto iter = data_->find(key);
       if (iter == data_->end()) {
         return nullptr;
       }
       return std::static_pointer_cast<T>(iter->second);
     }
   
     bool has(const std::string &key) const { return (data_ != nullptr) && (data_->find(key) != data_->end()); }
   
    private:
     void InitData() {
       if (data_ == nullptr) {
         data_ = std::make_unique<DataMap>();
       }
     }
     std::unique_ptr<DataMap> data_;
   };
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_USER_DATA_H_
