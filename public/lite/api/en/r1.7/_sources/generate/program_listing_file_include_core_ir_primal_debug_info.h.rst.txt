:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ir_primal_debug_info.h:

Program Listing for File primal_debug_info.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ir_primal_debug_info.h>` (``include/core/ir/primal_debug_info.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_IR_PRIMAL_DEBUG_INFO_H
   #define MINDSPORE_CORE_IR_PRIMAL_DEBUG_INFO_H
   #include <string>
   #include <memory>
   #include <stack>
   #include <vector>
   #include <set>
   #include "utils/hash_map.h"
   #include "utils/info.h"
   #include "utils/visible.h"
   
   namespace mindspore {
   class MS_CORE_API PrimalDebugInfoManager {
    public:
     static PrimalDebugInfoManager &GetInstance() noexcept;
     PrimalDebugInfoManager(const PrimalDebugInfoManager &) = delete;
     PrimalDebugInfoManager &operator=(const PrimalDebugInfoManager &) = delete;
     ~PrimalDebugInfoManager() = default;
     void SetPrimalDebugInfo(const std::vector<NodeDebugInfoPtr> &primal_debug_infos) {
       (void)std::for_each(primal_debug_infos.begin(), primal_debug_infos.end(),
                           [this](const NodeDebugInfoPtr &debug_info) { (void)primal_debug_infos_.emplace(debug_info); });
     }
     void ClearPrimalDebugInfo() noexcept { primal_debug_infos_.clear(); }
     std::set<NodeDebugInfoPtr, DebugInfoCompare> GetCurrentPrimalDebugInfo() { return primal_debug_infos_; }
   
    private:
     PrimalDebugInfoManager() = default;
     std::set<NodeDebugInfoPtr, DebugInfoCompare> primal_debug_infos_;
   };
   
   // PrimalDebugInfoGuard is a class that help generate the back propagation cnode
   // with specified primal_debug_infos in the current c++ action scope.
   class PrimalDebugInfoGuard {
    public:
     explicit PrimalDebugInfoGuard(const std::vector<NodeDebugInfoPtr> &primal_debug_infos) {
       PrimalDebugInfoManager::GetInstance().SetPrimalDebugInfo(primal_debug_infos);
     }
     ~PrimalDebugInfoGuard() { PrimalDebugInfoManager::GetInstance().ClearPrimalDebugInfo(); }
   };
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_IR_PRIMAL_DEBUG_INFO_H
