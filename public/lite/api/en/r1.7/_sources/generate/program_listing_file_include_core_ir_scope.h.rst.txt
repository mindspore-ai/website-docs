:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ir_scope.h:

Program Listing for File scope.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ir_scope.h>` (``include/core/ir/scope.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_IR_SCOPE_H_
   #define MINDSPORE_CORE_IR_SCOPE_H_
   #include <string>
   #include <memory>
   #include <stack>
   #include "utils/visible.h"
   
   namespace mindspore {
   class Scope;
   using ScopePtr = std::shared_ptr<Scope>;
   MS_CORE_API extern const ScopePtr kDefaultScope;
   
   class MS_CORE_API Scope {
    public:
     explicit Scope(const std::string &name) : name_(name) {}
   
     ~Scope() = default;
   
     std::string name() const { return name_; }
   
    private:
     std::string name_;
   };
   
   class MS_CORE_API ScopeManager {
    public:
     static ScopeManager &GetInstance() noexcept;
   
     ScopeManager(const ScopeManager &) = delete;
     ScopeManager &operator=(const ScopeManager &) = delete;
     ~ScopeManager() = default;
   
     void EnterScope(const ScopePtr &scope);
   
     void LeaveScope(const ScopePtr &scope) noexcept;
   
     ScopePtr GetCurrentScope();
   
     void ClearScope();
   
    private:
     ScopeManager() = default;
     std::stack<ScopePtr> scope_stack_;
   };
   
   // ScopeGuard is a class that help generate the anf node of specified scope
   // in the current c++ action scope.
   class ScopeGuard {
    public:
     explicit ScopeGuard(const ScopePtr &scope) {
       scope_ = scope;
       ScopeManager::GetInstance().EnterScope(scope);
     }
     ~ScopeGuard() { ScopeManager::GetInstance().LeaveScope(scope_); }
   
    private:
     ScopePtr scope_;
   };
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_IR_SCOPE_H_
