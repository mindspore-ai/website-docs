:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_apply_power_sign_d.h:

Program Listing for File apply_power_sign_d.h
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_apply_power_sign_d.h>` (``include/core/ops/apply_power_sign_d.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_APPLY_POWER_SIGN_D_H_
   #define MINDSPORE_CORE_OPS_APPLY_POWER_SIGN_D_H_
   #include <vector>
   #include <memory>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameApplyPowerSign = "ApplyPowerSign";
   class MIND_API ApplyPowerSign : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ApplyPowerSign);
     ApplyPowerSign() : BaseOperator(kNameApplyPowerSign) {
       InitIOName({"var", "m", "lr", "logbase", "sign_decay", "beta", "grad"}, {"var", "m"});
     }
   };
   abstract::AbstractBasePtr ApplyPowerSignDInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                  const std::vector<abstract::AbstractBasePtr> &input_args);
   using kPrimApplyPowerSignDPtr = std::shared_ptr<ApplyPowerSign>;
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_APPLY_POWERSIGND_H_
