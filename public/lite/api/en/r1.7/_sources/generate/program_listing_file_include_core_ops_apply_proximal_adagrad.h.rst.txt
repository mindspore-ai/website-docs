:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_apply_proximal_adagrad.h:

Program Listing for File apply_proximal_adagrad.h
=================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_apply_proximal_adagrad.h>` (``include/core/ops/apply_proximal_adagrad.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_APPLY_PROXIMAL_ADAGRAD_H_
   #define MINDSPORE_CORE_OPS_APPLY_PROXIMAL_ADAGRAD_H_
   
   #include <map>
   #include <memory>
   #include <vector>
   #include <string>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameApplyProximalAdagrad = "ApplyProximalAdagrad";
   class MIND_API ApplyProximalAdagrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ApplyProximalAdagrad);
     ApplyProximalAdagrad() : BaseOperator(kNameApplyProximalAdagrad) {
       InitIOName({"var", "accum", "lr", "l1", "l2", "grad"}, {"var", "accum"});
     }
   };
   
   abstract::AbstractBasePtr ApplyProximalAdagradInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                       const std::vector<abstract::AbstractBasePtr> &input_args);
   
   using kPrimApplyProximalAdagradPtr = std::shared_ptr<ApplyProximalAdagrad>;
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_APPLY_PROXIMAL_ADAGRAD_H_
