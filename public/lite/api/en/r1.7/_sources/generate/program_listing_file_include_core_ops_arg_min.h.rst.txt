:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_arg_min.h:

Program Listing for File arg_min.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_arg_min.h>` (``include/core/ops/arg_min.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_ARG_MIN_H_
   #define MINDSPORE_CORE_OPS_ARG_MIN_H_
   #include <string>
   #include <vector>
   #include <memory>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   #include "mindapi/base/type_id.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameArgMin = "ArgMin";
   class MIND_API ArgMin : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ArgMin);
     ArgMin() : BaseOperator(kNameArgMin) { InitIOName({"x"}, {"output"}); }
     explicit ArgMin(const std::string k_name) : BaseOperator(k_name) { InitIOName({"x"}, {"output"}); }
     void Init(const int64_t axis = -1, const TypeId output_type = kNumberTypeInt32);
     void set_axis(const int64_t axis);
     void set_output_type(const TypeId output_type);
   
     int64_t get_axis() const;
     TypeId get_output_type() const;
   };
   abstract::AbstractBasePtr ArgMinInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                         const std::vector<abstract::AbstractBasePtr> &input_args);
   using PrimArgMin = std::shared_ptr<ArgMin>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_ARG_MIN_H_
