:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_ctc_loss_v2_grad.h:

Program Listing for File ctc_loss_v2_grad.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_ctc_loss_v2_grad.h>` (``include/core/ops/ctc_loss_v2_grad.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_CTC_LOSS_V2_GRAD_H_
   #define MINDSPORE_CORE_OPS_CTC_LOSS_V2_GRAD_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameCTCLossV2Grad = "CTCLossV2Grad";
   class MIND_API CTCLossV2Grad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(CTCLossV2Grad);
     CTCLossV2Grad() : BaseOperator(kNameCTCLossV2Grad) {
       InitIOName(
         {"grad_out", "log_probs", "targets", "input_lengths", "target_lengths", "neg_log_likelihood", "log_alpha"},
         {"grad"});
     }
     void Init() const {}
   };
   
   abstract::AbstractBasePtr CTCLossV2GradInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                const std::vector<abstract::AbstractBasePtr> &input_args);
   using PrimCTCLossV2Ptr = std::shared_ptr<CTCLossV2Grad>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_CTC_LOSS_V2_GRAD_H_
