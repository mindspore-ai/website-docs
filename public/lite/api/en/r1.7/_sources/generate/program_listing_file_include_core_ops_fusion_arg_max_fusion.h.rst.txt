:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_fusion_arg_max_fusion.h:

Program Listing for File arg_max_fusion.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_fusion_arg_max_fusion.h>` (``include/core/ops/fusion/arg_max_fusion.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_ARGMAX_FUSION_H_
   #define MINDSPORE_CORE_OPS_ARGMAX_FUSION_H_
   #include <memory>
   #include <vector>
   
   #include "ops/arg_max.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameArgMaxFusion = "ArgMaxFusion";
   class MIND_API ArgMaxFusion : public ArgMax {
    public:
     MIND_API_BASE_MEMBER(ArgMaxFusion);
     ArgMaxFusion() : ArgMax(kNameArgMaxFusion) { InitIOName({"x"}, {"output"}); }
   
     void Init(const bool keep_dims, const bool out_max_value, const int64_t top_k, const int64_t axis = -1);
   
     void set_keep_dims(const bool keep_dims);
   
     void set_out_max_value(const bool out_max_value);
   
     void set_top_k(const int64_t top_k);
   
     bool get_keep_dims() const;
   
     bool get_out_max_value() const;
   
     int64_t get_top_k() const;
   };
   abstract::AbstractBasePtr ArgMaxFusionInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                               const std::vector<abstract::AbstractBasePtr> &input_args);
   using PrimArgMaxFusion = std::shared_ptr<ArgMaxFusion>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_ARGMAX_FUSION_H_
