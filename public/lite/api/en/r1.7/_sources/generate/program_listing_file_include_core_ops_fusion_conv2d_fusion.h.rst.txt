:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_fusion_conv2d_fusion.h:

Program Listing for File conv2d_fusion.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_fusion_conv2d_fusion.h>` (``include/core/ops/fusion/conv2d_fusion.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_CONV2D_FUSION_H_
   #define MINDSPORE_CORE_OPS_CONV2D_FUSION_H_
   #include <vector>
   
   #include "ops/conv2d.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameConv2DFusion = "Conv2DFusion";
   class MIND_API Conv2DFusion : public Conv2D {
    public:
     MIND_API_BASE_MEMBER(Conv2DFusion);
     Conv2DFusion() : Conv2D(kNameConv2DFusion) {}
   
     void Init(int64_t in_channel, int64_t out_channel, const std::vector<int64_t> &kernel_size, int64_t mode = 1,
               const PadMode &pad_mode = VALID, const std::vector<int64_t> &pad = {0, 0, 0, 0},
               const std::vector<int64_t> &stride = {1, 1, 1, 1}, const std::vector<int64_t> &dilation = {1, 1, 1, 1},
               int64_t group = 1, const Format &format = NCHW, const std::vector<int64_t> &pad_list = {0, 0, 0, 0},
               const ActivationType &activation_type = NO_ACTIVATION);
   
     void set_in_channel(const int64_t in_channel);
   
     void set_pad_list(const std::vector<int64_t> &pad_list);
   
     void set_activation_type(const ActivationType &activation_type);
   
     int64_t get_in_channel() const;
   
     std::vector<int64_t> get_pad_list() const;
   
     ActivationType get_activation_type() const;
   };
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_CONV2D_FUSION_H_
