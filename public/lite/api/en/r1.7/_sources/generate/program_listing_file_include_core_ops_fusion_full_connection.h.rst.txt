:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_fusion_full_connection.h:

Program Listing for File full_connection.h
==========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_fusion_full_connection.h>` (``include/core/ops/fusion/full_connection.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_FULL_CONNECTION_FUSION_H_
   #define MINDSPORE_CORE_OPS_FULL_CONNECTION_FUSION_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameFullConnection = "FullConnection";
   class MIND_API FullConnection : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(FullConnection);
     FullConnection() : BaseOperator(kNameFullConnection) { InitIOName({"x1", "x2", "b"}, {"output"}); }
   
     void Init(const bool has_bias, const int64_t axis, const bool use_axis, const ActivationType &activation_type);
   
     void set_has_bias(const bool has_bias);
   
     void set_axis(const int64_t axis);
   
     void set_use_axis(const bool use_axis);
   
     void set_activation_type(const ActivationType &activation_type);
   
     bool get_has_bias() const;
   
     int64_t get_axis() const;
   
     bool get_use_axis() const;
   
     ActivationType get_activation_type() const;
   };
   abstract::AbstractBasePtr FullConnectionInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                 const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_FULL_CONNECTION_FUSION_H_
