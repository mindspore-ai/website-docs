:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_fusion_layer_norm_fusion.h:

Program Listing for File layer_norm_fusion.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_fusion_layer_norm_fusion.h>` (``include/core/ops/fusion/layer_norm_fusion.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_LAYER_NORM_FUSION_H_
   #define MINDSPORE_CORE_OPS_LAYER_NORM_FUSION_H_
   #include <vector>
   #include <memory>
   
   #include "ops/layer_norm.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameLayerNormFusion = "LayerNormFusion";
   class MIND_API LayerNormFusion : public LayerNorm {
    public:
     MIND_API_BASE_MEMBER(LayerNormFusion);
     LayerNormFusion() : LayerNorm(kNameLayerNormFusion) {}
   
     void Init(const int64_t begin_norm_axis = 1, const int64_t begin_params_axis = 1, const float epsilon = 1e-7,
               const bool elementwise_affine = false);
   
     void set_elementwise_affine(const bool elementwise_affine);
   
     bool get_elementwise_affine() const;
   };
   
   abstract::AbstractBasePtr LayerNormFusionInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                  const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_LAYER_NORM_FUSION_H_
