:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_layer_norm.h:

Program Listing for File layer_norm.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_layer_norm.h>` (``include/core/ops/layer_norm.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_LAYER_NORM_H_
   #define MINDSPORE_CORE_OPS_LAYER_NORM_H_
   #include <string>
   #include <vector>
   #include <memory>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameLayerNorm = "LayerNorm";
   class MIND_API LayerNorm : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LayerNorm);
     LayerNorm() : BaseOperator(kNameLayerNorm) {}
     explicit LayerNorm(const std::string k_name) : BaseOperator(k_name) {}
     void Init(const int64_t begin_norm_axis = 1, const int64_t begin_params_axis = 1, const float epsilon = 1e-7);
     void set_begin_norm_axis(const int64_t begin_norm_axis);
     void set_begin_params_axis(const int64_t begin_params_axis);
     void set_epsilon(const float epsilon);
     int64_t get_begin_norm_axis() const;
     int64_t get_begin_params_axis() const;
     float get_epsilon() const;
   };
   
   abstract::AbstractBasePtr LayerNormInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                            const std::vector<abstract::AbstractBasePtr> &input_args);
   using PrimLayerNormPtr = std::shared_ptr<LayerNorm>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_LAYER_NORM_H_
