:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_core_ops_op_utils.h:

Program Listing for File op_utils.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_core_ops_op_utils.h>` (``include/core/ops/op_utils.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_OP_UTILS_H
   #define MINDSPORE_CORE_OPS_OP_UTILS_H
   #include <string>
   #include <set>
   #include <vector>
   #include <algorithm>
   #include <memory>
   #include "abstract/primitive_infer_map.h"
   #include "mindapi/base/shared_ptr.h"
   #include "./op_name.h"
   
   namespace mindspore::ops {
   const std::set<TypePtr> common_valid_types = {kInt8,   kInt16,  kInt32,   kInt64,   kUInt8,  kUInt16,
                                                 kUInt32, kUInt64, kFloat16, kFloat32, kFloat64};
   
   const std::set<TypePtr> common_valid_types_with_complex = {kInt8,    kInt16,     kInt32,     kInt64,   kUInt8,
                                                              kUInt16,  kUInt32,    kUInt64,    kFloat16, kFloat32,
                                                              kFloat64, kComplex64, kComplex128};
   
   const std::set<TypePtr> common_valid_types_with_complex_and_bool = {
     kInt8,   kInt16,   kInt32,   kInt64,   kUInt8,     kUInt16,     kUInt32,
     kUInt64, kFloat16, kFloat32, kFloat64, kComplex64, kComplex128, kBool};
   
   const std::set<TypePtr> all_types = {
     kBool,   kInt,    kInt8,   kInt16, kInt32,   kInt64,   kUInt,    kUInt8,
     kUInt16, kUInt32, kUInt64, kFloat, kFloat16, kFloat32, kFloat64, kComplex64,
   };
   std::vector<int64_t> CalBroadCastShape(std::vector<int64_t> x_shape, std::vector<int64_t> y_shape,
                                          const std::string &op_name, const std::string &op_x_name = "input1",
                                          const std::string &op_y_name = "input2");
   abstract::ShapePtr BroadCastInferShape(const std::string &op_name,
                                          const std::vector<abstract::AbstractBasePtr> &input_args);
   
   template <typename T>
   api::SharedPtr<T> GetOperator(const AnfNodePtr &node) {
     auto prim = GetValueNode<PrimitivePtr>(node);
     if (prim == nullptr) {
       return nullptr;
     }
     return api::MakeShared<T>(prim);
   }
   }  // namespace mindspore::ops
   #endif  // MINDSPORE_CORE_OPS_OP_UTILS_H
