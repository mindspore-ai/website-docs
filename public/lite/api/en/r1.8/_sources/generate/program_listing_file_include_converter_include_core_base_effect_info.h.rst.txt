:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_base_effect_info.h:

Program Listing for File effect_info.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_base_effect_info.h>` (``include/converter/include/core/base/effect_info.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_EFFECT_INFO_H_
   #define MINDSPORE_CORE_EFFECT_INFO_H_
   
   namespace mindspore {
   struct EffectInfo {
     enum State : unsigned char {
       kUnknown = 0,
       kDetecting = 1,
       kDetected = 2,
     };
     State state = kUnknown;  // effect info state.
     bool memory = false;     // memory side effects, e.g., access global variable.
     bool io = false;         // IO side effects, e.g., print message.
     bool load = false;       // load value from global variable, e.g. add(self.para, x).
   
     void Merge(const EffectInfo &info) {
       if (info.state != EffectInfo::kDetected) {
         state = EffectInfo::kDetecting;
       }
       memory = memory || info.memory;
       io = io || info.io;
       load = load || info.load;
     }
   };
   
   // EffectInfoHolder as base class for effect info holders, such as CNode, FuncGraph, etc.
   class EffectInfoHolder {
    public:
     // Gets effect info.
     const EffectInfo &GetEffectInfo() const { return effect_info_; }
   
     // Set effect info.
     void SetEffectInfo(const EffectInfo &info) { effect_info_ = info; }
   
     virtual ~EffectInfoHolder() = default;
   
    protected:
     EffectInfo effect_info_;
   };
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_EFFECT_INFO_H_
