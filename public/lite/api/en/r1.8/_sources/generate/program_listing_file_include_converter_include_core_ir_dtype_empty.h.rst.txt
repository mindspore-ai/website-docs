:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ir_dtype_empty.h:

Program Listing for File empty.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ir_dtype_empty.h>` (``include/converter/include/core/ir/dtype/empty.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_IR_DTYPE_EMPTY_H_
   #define MINDSPORE_CORE_IR_DTYPE_EMPTY_H_
   
   #include <cstddef>
   #include <iostream>
   #include <initializer_list>
   #include <map>
   #include <memory>
   #include <utility>
   #include <sstream>
   #include <string>
   #include <vector>
   #include <type_traits>
   #include <algorithm>
   
   #include "utils/hash_map.h"
   #include "base/base.h"
   #include "ir/named.h"
   #include "ir/dtype/type.h"
   
   namespace mindspore {
   class MS_CORE_API TypeAnything : public Type {
    public:
     TypeAnything() : Type(kMetaTypeAnything) {}
   
     ~TypeAnything() override {}
     MS_DECLARE_PARENT(TypeAnything, Type)
   
     TypeId generic_type_id() const override { return kMetaTypeAnything; }
     TypePtr DeepCopy() const override;
     std::string DumpText() const override { return "AnythingType"; }
   };
   using TypeAnythingPtr = std::shared_ptr<TypeAnything>;
   
   class MS_CORE_API TypeNone : public Type {
    public:
     TypeNone() : Type(kMetaTypeNone) {}
   
     ~TypeNone() override {}
     MS_DECLARE_PARENT(TypeNone, Type)
   
     TypeId generic_type_id() const override { return kMetaTypeNone; }
     TypePtr DeepCopy() const override { return std::make_shared<TypeNone>(); }
     std::string ToReprString() const override { return "type_none"; }
     std::string DumpText() const override { return "NoneType"; }
   };
   using TypeNonePtr = std::shared_ptr<TypeNone>;
   
   class MS_CORE_API TypeNull : public Type {
    public:
     TypeNull() : Type(kMetaTypeNull) {}
   
     ~TypeNull() override {}
     MS_DECLARE_PARENT(TypeNull, Type)
   
     TypeId generic_type_id() const override { return kMetaTypeNull; }
     TypePtr DeepCopy() const override { return std::make_shared<TypeNull>(); }
     std::string DumpText() const override { return "NullType"; }
   };
   using TypeNullPtr = std::shared_ptr<TypeNull>;
   
   class MS_CORE_API TypeEllipsis : public Type {
    public:
     TypeEllipsis() : Type(kMetaTypeEllipsis) {}
   
     ~TypeEllipsis() override {}
     MS_DECLARE_PARENT(TypeEllipsis, Type)
   
     TypeId generic_type_id() const override { return kMetaTypeEllipsis; }
     TypePtr DeepCopy() const override { return std::make_shared<TypeEllipsis>(); }
     std::string ToReprString() const override { return "Ellipsis"; }
     std::string DumpText() const override { return "Ellipsis"; }
   };
   using TypeEllipsisPtr = std::shared_ptr<TypeEllipsis>;
   
   GVAR_DEF(TypePtr, kTypeNone, std::make_shared<TypeNone>());
   GVAR_DEF(TypePtr, kTypeNull, std::make_shared<TypeNull>());
   GVAR_DEF(TypePtr, kTypeEllipsis, std::make_shared<TypeEllipsis>());
   GVAR_DEF(TypePtr, kAnyType, std::make_shared<TypeAnything>());
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_IR_DTYPE_EMPTY_H_
