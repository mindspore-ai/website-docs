:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ir_dtype_ref.h:

Program Listing for File ref.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ir_dtype_ref.h>` (``include/converter/include/core/ir/dtype/ref.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_IR_DTYPE_REF_H_
   #define MINDSPORE_CORE_IR_DTYPE_REF_H_
   
   #include <memory>
   #include <string>
   
   #include "base/base.h"
   #include "ir/named.h"
   #include "ir/dtype/type.h"
   #include "ir/dtype/tensor_type.h"
   
   namespace mindspore {
   // TypeRefKey type
   class MS_CORE_API RefKeyType final : public Object {
    public:
     RefKeyType() : Object(kObjectTypeRefKey) {}
   
     ~RefKeyType() override {}
     MS_DECLARE_PARENT(RefKeyType, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeRefKey; }
     TypePtr DeepCopy() const override { return std::make_shared<RefKeyType>(); }
     std::string ToReprString() const override { return "type_refkey"; }
     std::string DumpText() const override { return "RefKeyType"; }
   };
   
   // TypeRef type
   class MS_CORE_API RefType final : public TensorType {
    public:
     RefType() : TensorType() {}
   
     explicit RefType(const TensorTypePtr &subtype) : TensorType(subtype->element()) {}
   
     ~RefType() override {}
     MS_DECLARE_PARENT(RefType, TensorType)
   
     TypePtr DeepCopy() const override;
     std::string ToString() const override;
     std::string DumpText() const override;
   };
   using RefTypePtr = std::shared_ptr<RefType>;
   
   GVAR_DEF(TypePtr, kRefKeyType, std::make_shared<RefKeyType>());
   GVAR_DEF(TypePtr, kRefType, std::make_shared<RefType>());
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_IR_DTYPE_REF_H_
