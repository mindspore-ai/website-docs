:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ir_meta_tensor.h:

Program Listing for File meta_tensor.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ir_meta_tensor.h>` (``include/converter/include/core/ir/meta_tensor.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_IR_META_TENSOR_H_
   #define MINDSPORE_CORE_IR_META_TENSOR_H_
   
   #include <utility>
   #include <vector>
   #include <memory>
   #include <string>
   
   #include "base/base.h"
   #include "ir/param_info.h"
   #include "ir/dtype.h"
   #include "utils/convert_utils_base.h"
   #include "utils/hashing.h"
   #include "utils/shape_utils.h"
   
   // brief mindspore namespace.
   //
   // mindspore namespace is the top level namespace of MindSpore project.
   // Other namespace should be a sub namespace of mindspore namespace in the ME project.
   namespace mindspore {
   
   // brief mindspore::tensor namespace
   //
   // A sub namespace in ME to support tensor related definition.
   namespace tensor {
   // brief Device info of Tensor
   //
   // Includes the format, data type and host format of a tensor.
   struct DeviceInfo {
     explicit DeviceInfo(std::string format = "DefaultFormat", TypePtr data_type = nullptr,
                         std::string host_format = "DefaultFormat")
         : format_(std::move(format)), data_type_(std::move(data_type)), host_format_(std::move(host_format)) {}
     std::string format_ = "DefaultFormat";
     TypePtr data_type_ = nullptr;
     std::string host_format_ = "DefaultFormat";
   };
   
   // brief Metadata of Tensor
   //
   // Includes the metadata information of a tensor, such as data type, shape
   // and so on. But it does not contain values of a tensor.
   class MS_CORE_API MetaTensor : public Value {
    public:
     MetaTensor();
   
     MetaTensor(TypeId data_type, const ShapeVector &shape);
   
     MetaTensor(const TypePtr &type_ptr, const ShapeVector &shape);
     MetaTensor(const MetaTensor &meta_tensor);
   
     ~MetaTensor() override = default;
     MS_DECLARE_PARENT(MetaTensor, Value)
   
     
     virtual MetaTensor &operator=(const MetaTensor &meta_tensor);
   
     virtual bool operator==(const MetaTensor &meta_tensor) const;
   
     TypePtr Dtype() const;
   
     abstract::AbstractBasePtr ToAbstract() override;
   
     TypeId data_type() const { return data_type_; }
   
     std::string ToString() const override;
     std::string DumpText() const override;
   
     virtual TypeId set_data_type(TypeId data_type) {
       data_type_ = data_type;
       return data_type_;
     }
   
     virtual TypePtr SetDtype(const TypePtr type_ptr);
   
     const ShapeVector &shape() const { return shape_; }
   
     virtual size_t set_shape(const ShapeVector &shape) {
       this->shape_ = shape;
       return shape_.size();
     }
   
     DeviceInfo device_info() const { return device_info_; }
   
     void set_device_info(const DeviceInfo &device_info) { device_info_ = device_info; }
   
     void SetDeviceInfo(const std::string &format, const TypePtr &data_type,
                        const std::string &host_format = "DefaultFormat");
   
     int64_t DimensionSize(size_t index) const;
   
     int ElementsNum() const;
   
     std::size_t hash() const override {
       std::size_t hash_value = std::hash<int>{}(static_cast<int>(data_type_));
       hash_value = hash_combine(hash_value, std::hash<size_t>{}(shape_.size()));
       // hash all elements may costly, so only take at most 4 elements into account based on
       // some experiments.
       for (size_t i = 0; (i < shape_.size()) && (i < 4); ++i) {
         hash_value = hash_combine(hash_value, (std::hash<int>{}(LongToInt(shape_[i]))));
       }
       return hash_value;
     }
     bool operator==(const Value &other) const override {
       if (other.isa<MetaTensor>()) {
         auto other_ = static_cast<const MetaTensor &>(other);
         return *this == other_;
       } else {
         return false;
       }
     }
     ParamInfoPtr param_info() const { return param_info_; }
   
     bool is_parameter() const { return is_parameter_; }
   
     void set_param_info(const ParamInfoPtr &param_info) {
       is_parameter_ = true;
       param_info_ = param_info;
     }
   
    protected:
     // brief Data type of the tensor.
     //
     // All support data type is in Number Types of [TypeId],
     // including [kNumberTypeBool], [kNumberTypeInt],
     // [kNumberTypeUInt32], [kNumberTypeFloat32] and [kNumberTypeFloat64].
     TypeId data_type_;
   
     // brief Shape of the tensor.
     //
     // A ShapeVector container is used to store the shape of a tensor.
     // Each element of the vector represents the size of a dimension of the tensor.
     // The order of each element in the vector is as same as the the dimension's
     // order it represents. If the dimension size is not set, its value will be -1.
     ShapeVector shape_;
   
     // brief Device info of Tensor
     //
     // Includes the format and data type of a tensor on device.
     DeviceInfo device_info_;
   
     bool is_parameter_{false};
     ParamInfoPtr param_info_{nullptr};
   };
   
   using MetaTensorPtr = std::shared_ptr<MetaTensor>;
   
   // brief Metadata of SparseTensor
   //
   // Includes the metadata information of a SparseTensor, such as data type, shape
   // and so on. But it does not contain values of a SparseTensor.
   class MS_CORE_API MetaSparseTensor : public Value {
    public:
     MetaSparseTensor();
   
     MetaSparseTensor(TypeId data_type, const ShapeVector &shape);
   
     MetaSparseTensor(const MetaSparseTensor &meta_sparse_tensor);
   
     ~MetaSparseTensor() override = default;
     MS_DECLARE_PARENT(MetaSparseTensor, Value)
   
     
     virtual bool operator==(const MetaSparseTensor &meta_sparse_tensor) const {
       return data_type_ == meta_sparse_tensor.data_type() && shape_ == meta_sparse_tensor.shape();
     }
   
     TypePtr Dtype() const;
   
     TypeId data_type() const { return data_type_; }
   
     void set_data_type(TypeId data_type) { data_type_ = data_type; }
   
     const ShapeVector &shape() const { return shape_; }
   
     void set_shape(const ShapeVector &shape) { this->shape_ = shape; }
   
     virtual std::string ToString() const = 0;
   
    protected:
     // Data type of the sparsetensor.
     TypeId data_type_;
   
     // Shape of the sparsetensor.
     ShapeVector shape_;
   };
   
   using MetaSparseTensorPtr = std::shared_ptr<MetaSparseTensor>;
   }  // namespace tensor
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_IR_META_TENSOR_H_
