:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ops_batch_to_space.h:

Program Listing for File batch_to_space.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ops_batch_to_space.h>` (``include/converter/include/core/ops/batch_to_space.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_BATCH_TO_SPACE_H_
   #define MINDSPORE_CORE_OPS_BATCH_TO_SPACE_H_
   
   #include <vector>
   #include <memory>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameBatchToSpace = "BatchToSpace";
   class MIND_API BatchToSpace : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BatchToSpace);
     BatchToSpace() : BaseOperator(kNameBatchToSpace) {}
     void Init(const std::vector<int64_t> &block_size, const std::vector<std::vector<int64_t>> &crops);
     void set_block_size(const std::vector<int64_t> &block_size);
     void set_crops(const std::vector<std::vector<int64_t>> &crops);
     std::vector<int64_t> get_block_size() const;
     std::vector<std::vector<int64_t>> get_crops() const;
   };
   
   abstract::AbstractBasePtr BatchToSpaceInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                               const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_BATCH_TO_SPACE_H_
