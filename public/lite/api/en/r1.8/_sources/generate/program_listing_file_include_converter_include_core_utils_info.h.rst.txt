:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_utils_info.h:

Program Listing for File info.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_utils_info.h>` (``include/converter/include/core/utils/info.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_UTILS_INFO_H_
   #define MINDSPORE_CORE_UTILS_INFO_H_
   
   #include <string>
   #include <memory>
   #include <utility>
   #include <vector>
   
   #include "base/base.h"
   #include "utils/visible.h"
   #include "ir/scope.h"
   #include "utils/trace_info.h"
   namespace mindspore {
   enum class SourceLineTip { kSourceLineTipDiscard = 0, kSourceLineTipNextLine = 1, kSourceLineTipInLine = 2 };
   
   // typedef enum CacheBool { UNCACHED = -1, FALSE, TRUE } CacheBool;
   using CacheBool = int32_t;
   const CacheBool Uncached = -1;
   const CacheBool False = 0;
   const CacheBool True = 1;
   
   MS_CORE_API void ClearThreadLocal();
   
   // Location class record the location in source code.
   class Location {
    public:
     Location(const std::string &file_name, int line, int column, int line_end, int column_end)
         : file_name_(file_name), line_(line), column_(column), line_end_(line_end), column_end_(column_end) {}
     ~Location() = default;
     std::string ToString(SourceLineTip tip = kSourceLineTipNextLine) const;
     std::string file_name() const { return file_name_; }
     int line() const { return line_; }
     int line_end() const { return line_end_; }
     int column() const { return column_; }
     int column_end() const { return column_end_; }
   
     bool operator<(const Location &other) const;
   
    private:
     std::string file_name_;
     int line_;
     int column_;
     int line_end_;
     int column_end_;
   };
   
   class TraceContext {
    public:
     explicit TraceContext(const LocationPtr &loc);
     explicit TraceContext(const std::string &func_name);
     explicit TraceContext(const TraceInfoPtr &trace_info);
     TraceContext(const LocationPtr &loc, const std::string &func_name);
     ~TraceContext() = default;
     const LocationPtr &location() const { return location_; }
     const TraceInfoPtr &trace_info() const { return trace_info_; }
     const std::string &func_name() const { return func_name_; }
   
    private:
     LocationPtr location_;
     TraceInfoPtr trace_info_;
     std::string func_name_;
   };
   
   using TraceContextPtr = TraceContext *;
   
   class MS_CORE_API TraceManager {
    public:
     TraceManager() = default;
   
     ~TraceManager() = default;
   
     static TraceContextPtr CurrentContextInfo();
   
     static void DebugTrace(const std::string &func_name, const LocationPtr &location);
   
     static void DebugTrace(const LocationPtr &location);
   
     static void DebugTrace(const TraceInfoPtr &trace_info);
   
     static void DebugTrace(const DebugInfoPtr &debug_info, const TraceInfoPtr &trace_info);
   
     static void EndTrace() noexcept;
   
     static void ClearParseOrResolveDebugInfo();
   
     static DebugInfoPtr record_debug_info();
   
     static bool record_debug_info_flag();
   
     static void CloseRecordDebugInfoFlag();
   
     static void OpenRecordDebugInfoFlag();
   };
   
   class TraceGuard {
    public:
     TraceGuard(const std::string &func_name, const LocationPtr &location) {
       TraceManager::DebugTrace(func_name, location);
     }
     explicit TraceGuard(const LocationPtr &location) { TraceManager::DebugTrace(location); }
     explicit TraceGuard(const TraceInfoPtr &trace_info) { TraceManager::DebugTrace(trace_info); }
     TraceGuard(const DebugInfoPtr &debug_info, const TraceInfoPtr &trace_info) {
       TraceManager::DebugTrace(debug_info, trace_info);
     }
     ~TraceGuard() { TraceManager::EndTrace(); }
   };
   
   class MS_CORE_API DebugInfo {
    public:
     DebugInfo() : DebugInfo("") {}
   
     explicit DebugInfo(const std::string &name) : unique_id_(gen_unique_id()), name_(name) {
       auto top = TraceManager::CurrentContextInfo();
       if (top != nullptr) {
         trace_info_ = top->trace_info();
         location_ = top->location();
       }
     }
   
     explicit DebugInfo(const LocationPtr &loc) : unique_id_(gen_unique_id()), location_(loc) {
       auto top = TraceManager::CurrentContextInfo();
       if (top != nullptr) {
         trace_info_ = top->trace_info();
       }
     }
   
     explicit DebugInfo(TraceInfoPtr &&trace_info) : unique_id_(gen_unique_id()), trace_info_(std::move(trace_info)) {}
   
     virtual ~DebugInfo() = default;
   
     int64_t get_id() const;
   
     int64_t unique_id() const { return unique_id_; }
   
     int64_t unique_id_through_copy() const;
   
     void set_trace_info(const TraceInfoPtr &trace_info) { trace_info_ = trace_info; }
   
     TraceInfoPtr trace_info() const { return trace_info_; }
   
     void set_location(const LocationPtr &loc) { location_ = loc; }
   
     virtual LocationPtr location() const { return location_; }
   
     std::string name() { return name_; }
   
     void set_name(const std::string &name) { name_ = name; }
   
     virtual std::string debug_name() { return name_; }
   
     virtual std::string get_python_func_belonged() { return ""; }
   
    protected:
     static int64_t gen_unique_id() {
       static int64_t cur_unique_id = 0;
       return cur_unique_id++;
     }
   
     mutable int64_t id_ = 0;
     int64_t unique_id_;
     TraceInfoPtr trace_info_;
     LocationPtr location_;
     std::string name_;
   };
   
   class MS_CORE_API NodeDebugInfo : public DebugInfo {
    public:
     NodeDebugInfo() : DebugInfo() {
       auto top = TraceManager::CurrentContextInfo();
       if (top != nullptr) {
         py_func_belonged_ = top->func_name();
       }
     }
   
     explicit NodeDebugInfo(const std::string &name) : DebugInfo(name) {
       auto top = TraceManager::CurrentContextInfo();
       if (top != nullptr) {
         py_func_belonged_ = top->func_name();
       }
     }
   
     explicit NodeDebugInfo(TraceInfoPtr &&trace_info) : DebugInfo(std::move(trace_info)) {}
   
     ~NodeDebugInfo() override = default;
   
     std::string debug_name() override;
   
     void set_node(const AnfNodePtr &node) { node_ = AnfNodeWeakPtr(node); }
   
     AnfNodePtr get_node() const { return node_.lock(); }
   
     void set_py_func_belonged(const std::string &name) { py_func_belonged_ = name; }
   
     std::string get_python_func_belonged() override { return py_func_belonged_; }
   
    private:
     AnfNodeWeakPtr node_;
     std::string py_func_belonged_;
   };
   
   using NodeDebugInfoPtr = std::shared_ptr<NodeDebugInfo>;
   
   class MS_CORE_API GraphDebugInfo : public DebugInfo {
    public:
     GraphDebugInfo() : DebugInfo() {
       auto top = TraceManager::CurrentContextInfo();
       if (top != nullptr) {
         py_func_name_ = top->func_name();
       }
     }
   
     explicit GraphDebugInfo(const std::string &name) : DebugInfo(name) {
       auto top = TraceManager::CurrentContextInfo();
       if (top != nullptr) {
         py_func_name_ = top->func_name();
       }
     }
   
     explicit GraphDebugInfo(TraceInfoPtr &&trace_info) : DebugInfo(std::move(trace_info)) {}
   
     ~GraphDebugInfo() override = default;
   
     std::string debug_name() override;
     LocationPtr location() const override;
     LocationPtr deco_location() { return deco_loc_; }
     void set_graph(const FuncGraphPtr &func_graph) { func_graph_ = FuncGraphWeakPtr(func_graph); }
     FuncGraphPtr get_graph() const { return func_graph_.lock(); }
     void set_full_name(const std::string &name) { full_name_ = name; }
     std::string get_full_name() { return full_name_; }
     void set_deco_location(const LocationPtr &deco_list_loc);
     std::string get_python_func_belonged() override { return py_func_name_; }
   
    private:
     FuncGraphWeakPtr func_graph_;
     LocationPtr deco_loc_;
     std::string py_func_name_;
     std::string full_name_;
   };
   
   using GraphDebugInfoPtr = std::shared_ptr<GraphDebugInfo>;
   
   inline TraceContext::TraceContext(const LocationPtr &loc) : location_(loc) {
     auto top = TraceManager::CurrentContextInfo();
     if (top != nullptr) {
       trace_info_ = top->trace_info();
       func_name_ = top->func_name();
     }
   }
   
   inline TraceContext::TraceContext(const std::string &func_name) : func_name_(func_name) {
     auto top = TraceManager::CurrentContextInfo();
     if (top != nullptr) {
       location_ = top->location();
       trace_info_ = top->trace_info();
     }
   }
   
   inline TraceContext::TraceContext(const TraceInfoPtr &trace_info) : trace_info_(trace_info) {
     auto top = TraceManager::CurrentContextInfo();
     if (top != nullptr) {
       location_ = top->location();
       func_name_ = top->func_name();
     }
   }
   
   inline TraceContext::TraceContext(const LocationPtr &loc, const std::string &func_name)
       : location_(loc), func_name_(func_name) {
     auto top = TraceManager::CurrentContextInfo();
     if (top != nullptr) {
       trace_info_ = top->trace_info();
     }
   }
   
   struct MS_CORE_API DebugInfoCompare {
     bool operator()(const DebugInfoPtr &left, const DebugInfoPtr &right) const;
   };
   
   MS_CORE_API void UpdateDebugInfo(const FuncGraphPtr &func_graph, const ScopePtr &scope, const DebugInfoPtr &debug_info);
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_UTILS_INFO_H_
