:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_utils_shape_utils.h:

Program Listing for File shape_utils.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_utils_shape_utils.h>` (``include/converter/include/core/utils/shape_utils.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_SHAPE_UTILS_INFO_H_
   #define MINDSPORE_SHAPE_UTILS_INFO_H_
   
   #include <algorithm>
   #include "mindapi/base/shape_vector.h"
   #include "utils/log_adapter.h"
   
   namespace mindspore {
   constexpr size_t kDynamicRankLen = 1;
   static const ShapeValueDType UNKNOWN_DIM = -1;
   static const ShapeValueDType UNKNOWN_RANK = -2;
   
   inline size_t SizeOf(const ShapeVector &shape) {
     ShapeValueDType data_size = 1;
     for (auto dim : shape) {
       if (dim < 0) {
         // For dynamic shape which has negative dimensions, data size should be zero.
         return 0;
       }
       data_size *= dim;
     }
     return static_cast<size_t>(data_size);
   }
   
   inline bool IsDynamicRank(const ShapeVector &shape) {
     if ((shape.size() == kDynamicRankLen) && (shape[0] == UNKNOWN_RANK)) {
       return true;
     }
     if (std::any_of(shape.begin(), shape.end(), [](ShapeValueDType s) { return s == UNKNOWN_RANK; })) {
       MS_EXCEPTION(ValueError) << "Shape should have only one -2 or no -2 at all but got (" << shape << ").";
     }
     return false;
   }
   
   inline bool IsDynamic(const ShapeVector &shape) {
     if (std::any_of(shape.begin(), shape.end(), [](ShapeValueDType s) { return s < UNKNOWN_RANK; })) {
       MS_EXCEPTION(ValueError) << "Shape should not have values less than -2 but got (" << shape << ").";
     }
     return (IsDynamicRank(shape) ||
             std::any_of(shape.begin(), shape.end(), [](ShapeValueDType s) { return s == UNKNOWN_DIM; }));
   }
   }  // namespace mindspore
   
   #endif  // MINDSPORE_SHAPE_UTILS_INFO_H_
