:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ir_named.h:

Program Listing for File named.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ir_named.h>` (``include/converter/include/core/ir/named.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_IR_NAMED_H_
   #define MINDSPORE_CORE_IR_NAMED_H_
   
   #include <string>
   #include <memory>
   #include <functional>
   
   #include "ir/anf.h"
   
   namespace mindspore {
   class MS_CORE_API Named : public Value {
    public:
     explicit Named(const std::string &name) : name_(name), hash_id_(std::hash<std::string>{}(name)) {}
     Named(const Named &other) : Value(other) {
       this->name_ = other.name_;
       hash_id_ = std::hash<std::string>{}(other.name_);
     }
     ~Named() override = default;
     MS_DECLARE_PARENT(Named, Value);
     const std::string &name() const { return name_; }
     void set_name(const std::string &name) { name_ = name; }
     virtual bool operator==(const Named &other) const { return name_ == other.name(); }
     bool operator==(const Value &other) const override;
     virtual Named &operator=(const Named &other) {
       if (&other != this) {
         this->type_ = other.type_;
         this->name_ = other.name_;
         hash_id_ = std::hash<std::string>{}(name_);
       }
       return *this;
     }
     std::size_t Hash() const { return std::hash<std::string>{}(name_); }
     std::size_t hash() const override { return std::hash<std::string>{}(name_); }
     friend std::ostream &operator<<(std::ostream &os, const Named &nmd) {
       os << nmd.name();
       return os;
     }
     std::string ToString() const override { return name(); }
   
    private:
     std::string name_;
     std::size_t hash_id_;
   };
   using NamedPtr = std::shared_ptr<Named>;
   struct MS_CORE_API NamedHasher {
     std::size_t operator()(NamedPtr const &name) const {
       std::size_t hash = name->Hash();
       return hash;
     }
   };
   struct MS_CORE_API NamedEqual {
     bool operator()(NamedPtr const &t1, NamedPtr const &t2) const {
       MS_EXCEPTION_IF_NULL(t1);
       MS_EXCEPTION_IF_NULL(t2);
       return *t1 == *t2;
     }
   };
   class MS_CORE_API None final : public Named {
    public:
     None() : Named("None") {}
     ~None() override = default;
     MS_DECLARE_PARENT(None, Named);
     abstract::AbstractBasePtr ToAbstract() override;
   };
   GVAR_DEF(NamedPtr, kNone, std::make_shared<None>());
   
   class MS_CORE_API Null final : public Named {
    public:
     Null() : Named("Null") {}
     ~Null() override = default;
     MS_DECLARE_PARENT(Null, Named);
     abstract::AbstractBasePtr ToAbstract() override;
   };
   GVAR_DEF(NamedPtr, kNull, std::make_shared<Null>());
   
   class MS_CORE_API Ellipsis final : public Named {
    public:
     Ellipsis() : Named("Ellipsis") {}
     ~Ellipsis() override = default;
     MS_DECLARE_PARENT(Ellipsis, Named);
     abstract::AbstractBasePtr ToAbstract() override;
   };
   GVAR_DEF(NamedPtr, kEllipsis, std::make_shared<Ellipsis>());
   
   class MS_CORE_API MindIRClassType final : public Named {
    public:
     explicit MindIRClassType(const std::string &class_type) : Named(class_type) {}
     ~MindIRClassType() override = default;
     MS_DECLARE_PARENT(MindIRClassType, Named);
     abstract::AbstractBasePtr ToAbstract() override;
   };
   using MindIRClassTypePtr = std::shared_ptr<MindIRClassType>;
   
   class MindIRMetaFuncGraph final : public Named {
    public:
     explicit MindIRMetaFuncGraph(const std::string &name) : Named(name) {}
     ~MindIRMetaFuncGraph() override = default;
     MS_DECLARE_PARENT(MindIRMetaFuncGraph, Named);
   };
   using MindIRMetaFuncGraphPtr = std::shared_ptr<MindIRMetaFuncGraph>;
   
   class MS_CORE_API MindIRNameSpace final : public Named {
    public:
     explicit MindIRNameSpace(const std::string &name_space) : Named(name_space), name_space_(name_space) {}
     ~MindIRNameSpace() override = default;
     MS_DECLARE_PARENT(MindIRNameSpace, Named);
     const std::string &name_space() const { return name_space_; }
     abstract::AbstractBasePtr ToAbstract() override;
   
    private:
     std::string name_space_;
   };
   using MindIRNameSpacePtr = std::shared_ptr<MindIRNameSpace>;
   
   class MS_CORE_API MindIRSymbol final : public Named {
    public:
     explicit MindIRSymbol(const std::string &symbol) : Named(symbol), symbol_(symbol) {}
     ~MindIRSymbol() override = default;
     MS_DECLARE_PARENT(MindIRSymbol, Named);
     const std::string &symbol() const { return symbol_; }
     abstract::AbstractBasePtr ToAbstract() override;
   
    private:
     std::string symbol_;
   };
   using MindIRSymbolPtr = std::shared_ptr<MindIRSymbol>;
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_IR_NAMED_H_
