:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ops_fusion_arg_min_fusion.h:

Program Listing for File arg_min_fusion.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ops_fusion_arg_min_fusion.h>` (``include/converter/include/core/ops/fusion/arg_min_fusion.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_ARGMIN_FUSION_H_
   #define MINDSPORE_CORE_OPS_ARGMIN_FUSION_H_
   #include <vector>
   #include <memory>
   
   #include "ops/arg_min.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameArgMinFusion = "ArgMinFusion";
   class MIND_API ArgMinFusion : public ArgMin {
    public:
     MIND_API_BASE_MEMBER(ArgMinFusion);
     ArgMinFusion() : ArgMin(kNameArgMinFusion) { InitIOName({"x"}, {"output"}); }
   
     void Init(bool keep_dims, bool out_max_value, int64_t top_k, int64_t axis = -1);
   
     void set_keep_dims(const bool keep_dims);
   
     void set_out_max_value(bool out_max_value);
   
     void set_top_k(int64_t top_k);
   
     bool get_keep_dims() const;
   
     bool get_out_max_value() const;
   
     int64_t get_top_k() const;
   };
   abstract::AbstractBasePtr ArgMinFusionInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                               const std::vector<abstract::AbstractBasePtr> &input_args);
   using PrimArgMinFusion = std::shared_ptr<ArgMinFusion>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_ARGMINTOPKMAXVALUE_H_
