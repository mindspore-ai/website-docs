:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_roi_pooling.h:

Program Listing for File roi_pooling.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_roi_pooling.h>` (``include/converter/include/ops/roi_pooling.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_ROI_POOLING_H_
   #define MINDSPORE_CORE_OPS_ROI_POOLING_H_
   #include <map>
   #include <memory>
   #include <string>
   #include <vector>
   
   #include "mindapi/base/types.h"
   #include "ops/base_operator.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameROIPooling = "ROIPooling";
   class MIND_API ROIPooling : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ROIPooling);
     ROIPooling() : BaseOperator(kNameROIPooling) {}
   
     void Init(const int64_t pooled_h, const int64_t pooled_w, const float scale);
   
     void set_pooled_h(const int64_t pooled_h);
   
     void set_pooled_w(const int64_t pooled_w);
   
     void set_scale(const float scale);
   
     int64_t get_pooled_h() const;
   
     int64_t get_pooled_w() const;
   
     float get_scale() const;
   };
   MIND_API abstract::AbstractBasePtr ROIPoolingInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                      const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_ROI_POOLING_H_
