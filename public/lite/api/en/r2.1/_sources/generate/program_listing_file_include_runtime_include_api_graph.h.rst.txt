:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_runtime_include_api_graph.h:

Program Listing for File graph.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_runtime_include_api_graph.h>` (``include/runtime/include/api/graph.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_INCLUDE_API_GRAPH_H
   #define MINDSPORE_INCLUDE_API_GRAPH_H
   
   #include <cstddef>
   #include <vector>
   #include <map>
   #include <memory>
   #include "include/api/status.h"
   #include "include/api/types.h"
   
   namespace mindspore {
   class NetData;
   class Net;
   
   class MS_API Graph {
    public:
     class GraphData;
     enum Type : uint32_t {
       kExpressionGraph = 0,  
       kExecutableGraph = 1,  
       kUnknownTypeGraph = 0xffffffff
     };
     Graph();
     explicit Graph(const std::shared_ptr<GraphData> &graph_data);
     explicit Graph(std::shared_ptr<GraphData> &&graph_data);
     explicit Graph(std::nullptr_t);
     ~Graph();
     explicit Graph(Type executable);
     explicit Graph(Net *net);
   
     enum ModelType ModelType() const;
     bool operator==(std::nullptr_t) const;
     bool operator!=(std::nullptr_t) const;
     bool IsExecutable() { return graph_type_ == kExecutableGraph; }
   
    private:
     friend class GraphCell;
     friend class ModelImpl;
     friend class NetImpl;
     friend class Model;
     std::shared_ptr<GraphData> graph_data_;
     std::shared_ptr<NetData> net_data_;
     Type graph_type_ = kExecutableGraph;
   };
   }  // namespace mindspore
   #endif  // MINDSPORE_INCLUDE_API_GRAPH_H
