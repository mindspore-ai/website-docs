:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_runtime_include_c_api_ms_node.h:

Program Listing for File node.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_include_runtime_include_c_api_ms_node.h>` (``include/runtime/include/c_api/ms/node.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CCSRC_C_API_INCLUDE_NODE_H_
   #define MINDSPORE_CCSRC_C_API_INCLUDE_NODE_H_
   
   #include <stdbool.h>
   #include <stdlib.h>
   #include "include/c_api/ms/context.h"
   #include "include/c_api/ms/base/macros.h"
   #include "include/c_api/ms/base/status.h"
   #include "include/c_api/ms/base/handle_types.h"
   #include "include/c_api/ms/base/types.h"
   
   #ifdef __cplusplus
   extern "C" {
   #endif
   
   typedef struct CustomOpInfo {
     const char *func_name;
     const char *func_type;
     const char *target;
     const char **input_names;
     size_t input_num;
     const char **output_names;
     size_t output_num;
     const char **attr_names;
     ValueHandle *attr_values;
     size_t attr_num;
     DTypeFormat **dtype_formats;
     size_t dtype_formats_num;
     int64_t **output_shapes;
     size_t *output_dims;
     DataTypeC *output_dtypes;
     STATUS(*dtype_infer_func)
     (const DataTypeC *input_types, size_t input_num, DataTypeC *output_types, size_t output_num);
     STATUS(*shape_infer_func)
     (int64_t **input_shapes, const size_t *input_dims, size_t input_num, int64_t **output_shapes, size_t *output_dims,
      size_t output_num);
   } CustomOpInfo;
   
   typedef struct DynamicOpInfo {
     const char **attr_names;   // An array of of attribute names.
     ValueHandle *attr_values;  // An array of of attributes which has same length as [attr_names].
     size_t attr_num;           // The number of attributes.
     int64_t **output_shapes;   // An array of each output's shapes. Auto infer will be denied if specified.
     size_t *output_dims;       // An array of each output's dimension. Must be specified if [output_shapes] is not NULL.
     DataTypeC *output_dtypes;  // An array of each output's dtypes. Must be specified if [output_shapes] is not NULL.
   } DynamicOpInfo;
   
   MIND_C_API NodeHandle MSNewOp(ResMgrHandle res_mgr, GraphHandle graph, const char *op_type, Handle const inputs[],
                                 size_t input_num, const char *const *attr_names, ValueHandle attrs[], size_t attr_num);
   
   MIND_C_API STATUS MSOpSetAttrScalarFloat32(ResMgrHandle res_mgr, NodeHandle op, const char *attr_name, float value);
   
   MIND_C_API STATUS MSOpSetAttrScalarBool(ResMgrHandle res_mgr, NodeHandle op, const char *attr_name, bool value);
   
   MIND_C_API STATUS MSOpSetAttrScalarInt32(ResMgrHandle res_mgr, NodeHandle op, const char *attr_name, int32_t value);
   
   MIND_C_API STATUS MSOpSetAttrScalarInt64(ResMgrHandle res_mgr, NodeHandle op, const char *attr_name, int64_t value);
   
   MIND_C_API STATUS MSOpSetAttrType(ResMgrHandle res_mgr, NodeHandle op, const char *attr_name, DataTypeC value);
   
   MIND_C_API STATUS MSOpSetAttrTypeArray(ResMgrHandle res_mgr, NodeHandle op, const char *attr_name, DataTypeC value[],
                                          size_t vec_size);
   
   MIND_C_API STATUS MSOpSetAttrArray(ResMgrHandle res_mgr, NodeHandle op, const char *attr_name, void *value,
                                      size_t vec_size, DataTypeC data_type);
   
   MIND_C_API STATUS MSOpSetAttrStringArray(ResMgrHandle res_mgr, NodeHandle op, const char *attr_name,
                                            const char *value[], size_t vec_size);
   
   MIND_C_API STATUS MSOpSetAttrString(ResMgrHandle res_mgr, NodeHandle op, const char *attr_name, const char *value);
   
   MIND_C_API int64_t MSOpGetAttrScalarInt64(ResMgrHandle res_mgr, ConstNodeHandle op, const char *attr_name,
                                             STATUS *error);
   
   MIND_C_API STATUS MSOpGetAttrArrayInt64(ResMgrHandle res_mgr, ConstNodeHandle op, const char *attr_name,
                                           int64_t values[], size_t value_num);
   
   MIND_C_API STATUS MSOpSetName(ResMgrHandle res_mgr, NodeHandle node, const char *name);
   
   MIND_C_API STATUS MSNodeGetName(ResMgrHandle res_mgr, ConstNodeHandle node, char str_buf[], size_t str_len);
   
   MIND_C_API NodeHandle MSPackNodesTuple(ResMgrHandle res_mgr, GraphHandle graph, Handle const nodes[], size_t node_num);
   
   MIND_C_API NodeHandle MSOpGetSpecOutput(ResMgrHandle res_mgr, GraphHandle graph, ConstNodeHandle op, size_t i);
   
   MIND_C_API NodeHandle MSNewSwitch(ResMgrHandle res_mgr, GraphHandle graph, Handle cond, ConstGraphHandle true_br,
                                     ConstGraphHandle false_br);
   
   MIND_C_API NodeHandle MSNewWhile(ResMgrHandle res_mgr, GraphHandle graph, Handle cond, GraphHandle body_graph,
                                    GraphHandle after_graph);
   
   MIND_C_API NodeHandle MSNewCustomOp(ResMgrHandle res_mgr, GraphHandle graph, Handle const inputs[], size_t input_num,
                                       CustomOpInfo info);
   
   MIND_C_API NodeHandle MSOpGetInput(ResMgrHandle res_mgr, ConstNodeHandle op, size_t i);
   
   MIND_C_API size_t MSOpGetInputsNum(ResMgrHandle res_mgr, ConstNodeHandle op, STATUS *error);
   
   MIND_C_API STATUS MSOpGetInputs(ResMgrHandle res_mgr, ConstNodeHandle op, NodeHandle inputs[], size_t input_num);
   
   MIND_C_API size_t MSOpGetOutputDimension(ResMgrHandle res_mgr, ConstNodeHandle op, size_t output_index, STATUS *ret);
   
   MIND_C_API STATUS MSOpGetOutputShape(ResMgrHandle res_mgr, ConstNodeHandle op, int64_t shape_ret[], size_t dim,
                                        size_t output_index);
   
   MIND_C_API NodeHandle MSNewFuncCallNode(ResMgrHandle res_mgr, GraphHandle graph, ConstGraphHandle sub_graph,
                                           Handle const inputs[], size_t input_num);
   
   MIND_C_API NodeHandle MSNewPlaceholder(ResMgrHandle res_mgr, GraphHandle graph, DataTypeC type, const int64_t shape[],
                                          size_t shape_size);
   
   MIND_C_API NodeHandle MSNewVariableScalarFloat32(ResMgrHandle res_mgr, GraphHandle graph, float value);
   
   MIND_C_API NodeHandle MSNewVariableScalarInt32(ResMgrHandle res_mgr, GraphHandle graph, int value);
   
   MIND_C_API NodeHandle MSNewVariableArray(ResMgrHandle res_mgr, GraphHandle graph, void *data, DataTypeC type,
                                            const int64_t shape[], size_t shape_size, size_t data_len);
   
   MIND_C_API NodeHandle MSNewVariableFromTensor(ResMgrHandle res_mgr, GraphHandle graph, ConstTensorHandle tensor);
   
   MIND_C_API size_t MSVariableArrayGetDataSize(ResMgrHandle res_mgr, ConstNodeHandle node, STATUS *error);
   
   MIND_C_API void *MSVariableArrayGetData(ResMgrHandle res_mgr, ConstNodeHandle node);
   
   MIND_C_API NodeHandle MSNewConstantArray(ResMgrHandle res_mgr, void *data, DataTypeC type, const int64_t shape[],
                                            size_t shape_size, size_t data_len);
   
   MIND_C_API NodeHandle MSNewConstantFromTensor(ResMgrHandle res_mgr, TensorHandle tensor);
   
   MIND_C_API size_t MSConstantArrayGetDataSize(ResMgrHandle res_mgr, ConstNodeHandle node, STATUS *error);
   
   MIND_C_API void *MSConstantArrayGetData(ResMgrHandle res_mgr, ConstNodeHandle node);
   
   MIND_C_API NodeHandle MSNewConstantScalarFloat32(ResMgrHandle res_mgr, float value);
   
   MIND_C_API NodeHandle MSNewConstantScalarBool(ResMgrHandle res_mgr, bool value);
   
   MIND_C_API NodeHandle MSNewConstantScalarInt32(ResMgrHandle res_mgr, int value);
   
   MIND_C_API NodeHandle MSNewConstantScalarInt64(ResMgrHandle res_mgr, int64_t value);
   
   MIND_C_API NodeHandle MSNewConstantTupleInt64(ResMgrHandle res_mgr, const int64_t vec[], size_t size);
   
   MIND_C_API NodeHandle MSNewConstantString(ResMgrHandle res_mgr, const char *str);
   
   MIND_C_API NodeHandle MSNewConstantType(ResMgrHandle res_mgr, DataTypeC type);
   
   MIND_C_API int MSConstantScalarGetValueInt32(ResMgrHandle res_mgr, ConstNodeHandle node, STATUS *error);
   
   MIND_C_API float MSConstantScalarGetValueFloat32(ResMgrHandle res_mgr, ConstNodeHandle node, STATUS *error);
   
   MIND_C_API bool MSConstantScalarGetValueBool(ResMgrHandle res_mgr, ConstNodeHandle node, STATUS *error);
   
   MIND_C_API int64_t MSConstantScalarGetValueInt64(ResMgrHandle res_mgr, ConstNodeHandle node, STATUS *error);
   
   MIND_C_API STATUS MSConstantStringGetValue(ResMgrHandle res_mgr, ConstNodeHandle node, char str_buf[], size_t str_len);
   
   MIND_C_API size_t MSConstantTupleGetSize(ResMgrHandle res_mgr, ConstNodeHandle node, STATUS *error);
   
   MIND_C_API STATUS MSConstantTupleGetValueInt64(ResMgrHandle res_mgr, ConstNodeHandle node, int64_t vec[], size_t size);
   
   MIND_C_API DataTypeC MSConstantTypeGetValue(ResMgrHandle res_mgr, ConstNodeHandle node, STATUS *error);
   
   MIND_C_API STATUS MSRunOp(ResMgrHandle res_mgr, const char *op_type, TensorHandle const inputs[], size_t input_num,
                             TensorHandle outputs[], size_t output_num);
   
   MIND_C_API STATUS MSRunOpWithInfo(ResMgrHandle res_mgr, const char *op_type, TensorHandle const inputs[],
                                     size_t input_num, TensorHandle outputs[], size_t output_num,
                                     DynamicOpInfo extra_info);
   
   #ifdef __cplusplus
   }
   #endif
   #endif  // MINDSPORE_CCSRC_C_API_INCLUDE_NODE_H_
