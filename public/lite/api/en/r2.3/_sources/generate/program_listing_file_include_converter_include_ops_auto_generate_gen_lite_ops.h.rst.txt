:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_auto_generate_gen_lite_ops.h:

Program Listing for File gen_lite_ops.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_auto_generate_gen_lite_ops.h>` (``include/converter/include/ops/auto_generate/gen_lite_ops.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_GEN_LITE_OPS_H_
   #define MINDSPORE_CORE_OPS_GEN_LITE_OPS_H_
   
   #include <vector>
   #include "ops/base_operator.h"
   #include "ops/auto_generate/gen_ops_name.h"
   
   namespace mindspore::ops {
   class MIND_API AbsGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(AbsGrad);
     AbsGrad() : BaseOperator(kNameAbsGrad) {}
   };
   
   class MIND_API Abs : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Abs);
     Abs() : BaseOperator(kNameAbs) {}
   };
   
   class MIND_API ACosGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ACosGrad);
     ACosGrad() : BaseOperator(kNameACosGrad) {}
   };
   
   class MIND_API ACos : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ACos);
     ACos() : BaseOperator(kNameACos) {}
   };
   
   class MIND_API AcoshGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(AcoshGrad);
     AcoshGrad() : BaseOperator(kNameAcoshGrad) {}
   };
   
   class MIND_API Acosh : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Acosh);
     Acosh() : BaseOperator(kNameAcosh) {}
   };
   
   class MIND_API Add : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Add);
     Add() : BaseOperator(kNameAdd) {}
   };
   
   class MIND_API Addcdiv : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Addcdiv);
     Addcdiv() : BaseOperator(kNameAddcdiv) {}
   };
   
   class MIND_API Addcmul : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Addcmul);
     Addcmul() : BaseOperator(kNameAddcmul) {}
   };
   
   class MIND_API Angle : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Angle);
     Angle() : BaseOperator(kNameAngle) {}
   };
   
   class MIND_API Argmax : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Argmax);
     Argmax() : BaseOperator(kNameArgmax) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
     void set_output_type(const int64_t &output_type);
     int64_t get_output_type() const;
   };
   
   class MIND_API Argmin : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Argmin);
     Argmin() : BaseOperator(kNameArgmin) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
     void set_output_type(const int64_t &output_type);
     int64_t get_output_type() const;
   };
   
   class MIND_API AsinGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(AsinGrad);
     AsinGrad() : BaseOperator(kNameAsinGrad) {}
   };
   
   class MIND_API Asin : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Asin);
     Asin() : BaseOperator(kNameAsin) {}
   };
   
   class MIND_API AsinhGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(AsinhGrad);
     AsinhGrad() : BaseOperator(kNameAsinhGrad) {}
   };
   
   class MIND_API Asinh : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Asinh);
     Asinh() : BaseOperator(kNameAsinh) {}
   };
   
   class MIND_API Assign : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Assign);
     Assign() : BaseOperator(kNameAssign) {}
   };
   
   class MIND_API Atan2 : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Atan2);
     Atan2() : BaseOperator(kNameAtan2) {}
   };
   
   class MIND_API AtanGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(AtanGrad);
     AtanGrad() : BaseOperator(kNameAtanGrad) {}
   };
   
   class MIND_API Atan : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Atan);
     Atan() : BaseOperator(kNameAtan) {}
   };
   
   class MIND_API Atanh : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Atanh);
     Atanh() : BaseOperator(kNameAtanh) {}
   };
   
   class MIND_API AvgPoolGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(AvgPoolGrad);
     AvgPoolGrad() : BaseOperator(kNameAvgPoolGrad) {}
     void set_kernel_size(const std::vector<int64_t> &kernel_size);
     std::vector<int64_t> get_kernel_size() const;
     void set_strides(const std::vector<int64_t> &strides);
     std::vector<int64_t> get_strides() const;
     void set_pad_mode(const int64_t &pad_mode);
     int64_t get_pad_mode() const;
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API AvgPool : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(AvgPool);
     AvgPool() : BaseOperator(kNameAvgPool) {}
     void set_kernel_size(const std::vector<int64_t> &kernel_size);
     std::vector<int64_t> get_kernel_size() const;
     void set_strides(const std::vector<int64_t> &strides);
     std::vector<int64_t> get_strides() const;
     void set_pad_mode(const int64_t &pad_mode);
     int64_t get_pad_mode() const;
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API BatchNormGradGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BatchNormGradGrad);
     BatchNormGradGrad() : BaseOperator(kNameBatchNormGradGrad) {}
     void set_is_training(const bool &is_training);
     bool get_is_training() const;
     void set_epsilon(const float &epsilon);
     float get_epsilon() const;
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API BatchNormGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BatchNormGrad);
     BatchNormGrad() : BaseOperator(kNameBatchNormGrad) {}
     void set_is_training(const bool &is_training);
     bool get_is_training() const;
     void set_epsilon(const float &epsilon);
     float get_epsilon() const;
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API BatchNormGradWithActivation : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BatchNormGradWithActivation);
     BatchNormGradWithActivation() : BaseOperator(kNameBatchNormGradWithActivation) {}
     void set_is_training(const bool &is_training);
     bool get_is_training() const;
     void set_epsilon(const float &epsilon);
     float get_epsilon() const;
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API BatchNorm : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BatchNorm);
     BatchNorm() : BaseOperator(kNameBatchNorm) {}
     void set_is_training(const bool &is_training);
     bool get_is_training() const;
     void set_epsilon(const float &epsilon);
     float get_epsilon() const;
     void set_momentum(const float &momentum);
     float get_momentum() const;
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API BatchNormWithActivation : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BatchNormWithActivation);
     BatchNormWithActivation() : BaseOperator(kNameBatchNormWithActivation) {}
     void set_is_training(const bool &is_training);
     bool get_is_training() const;
     void set_epsilon(const float &epsilon);
     float get_epsilon() const;
     void set_momentum(const float &momentum);
     float get_momentum() const;
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API BatchNormWithAddAndActivation : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BatchNormWithAddAndActivation);
     BatchNormWithAddAndActivation() : BaseOperator(kNameBatchNormWithAddAndActivation) {}
     void set_is_training(const bool &is_training);
     bool get_is_training() const;
     void set_epsilon(const float &epsilon);
     float get_epsilon() const;
     void set_momentum(const float &momentum);
     float get_momentum() const;
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API Betainc : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Betainc);
     Betainc() : BaseOperator(kNameBetainc) {}
   };
   
   class MIND_API BiasAddGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BiasAddGrad);
     BiasAddGrad() : BaseOperator(kNameBiasAddGrad) {}
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API BiasAdd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BiasAdd);
     BiasAdd() : BaseOperator(kNameBiasAdd) {}
     void set_data_format(const int64_t &data_format);
     int64_t get_data_format() const;
   };
   
   class MIND_API BoolNot : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BoolNot);
     BoolNot() : BaseOperator(kNameBoolNot) {}
   };
   
   class MIND_API Ceil : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Ceil);
     Ceil() : BaseOperator(kNameCeil) {}
   };
   
   class MIND_API CeLU : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(CeLU);
     CeLU() : BaseOperator(kNameCeLU) {}
     void set_alpha(const float &alpha);
     float get_alpha() const;
   };
   
   class MIND_API CholeskyGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(CholeskyGrad);
     CholeskyGrad() : BaseOperator(kNameCholeskyGrad) {}
   };
   
   class MIND_API CholeskyInverse : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(CholeskyInverse);
     CholeskyInverse() : BaseOperator(kNameCholeskyInverse) {}
     void set_upper(const bool &upper);
     bool get_upper() const;
   };
   
   class MIND_API Cholesky : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Cholesky);
     Cholesky() : BaseOperator(kNameCholesky) {}
     void set_upper(const bool &upper);
     bool get_upper() const;
   };
   
   class MIND_API Complex : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Complex);
     Complex() : BaseOperator(kNameComplex) {}
   };
   
   class MIND_API Concat : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Concat);
     Concat() : BaseOperator(kNameConcat) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
   };
   
   class MIND_API Conj : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Conj);
     Conj() : BaseOperator(kNameConj) {}
   };
   
   class MIND_API Copy : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Copy);
     Copy() : BaseOperator(kNameCopy) {}
   };
   
   class MIND_API Cos : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Cos);
     Cos() : BaseOperator(kNameCos) {}
   };
   
   class MIND_API Cosh : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Cosh);
     Cosh() : BaseOperator(kNameCosh) {}
   };
   
   class MIND_API CumProd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(CumProd);
     CumProd() : BaseOperator(kNameCumProd) {}
     void set_exclusive(const bool &exclusive);
     bool get_exclusive() const;
     void set_reverse(const bool &reverse);
     bool get_reverse() const;
   };
   
   class MIND_API CumSum : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(CumSum);
     CumSum() : BaseOperator(kNameCumSum) {}
     void set_exclusive(const bool &exclusive);
     bool get_exclusive() const;
     void set_reverse(const bool &reverse);
     bool get_reverse() const;
   };
   
   class MIND_API Cummax : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Cummax);
     Cummax() : BaseOperator(kNameCummax) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
   };
   
   class MIND_API Cummin : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Cummin);
     Cummin() : BaseOperator(kNameCummin) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
   };
   
   class MIND_API Diag : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Diag);
     Diag() : BaseOperator(kNameDiag) {}
   };
   
   class MIND_API Diagonal : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Diagonal);
     Diagonal() : BaseOperator(kNameDiagonal) {}
     void set_offset(const int64_t &offset);
     int64_t get_offset() const;
     void set_dim1(const int64_t &dim1);
     int64_t get_dim1() const;
     void set_dim2(const int64_t &dim2);
     int64_t get_dim2() const;
   };
   
   class MIND_API Div : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Div);
     Div() : BaseOperator(kNameDiv) {}
   };
   
   class MIND_API Eig : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Eig);
     Eig() : BaseOperator(kNameEig) {}
     void set_compute_v(const bool &compute_v);
     bool get_compute_v() const;
   };
   
   class MIND_API EluGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(EluGrad);
     EluGrad() : BaseOperator(kNameEluGrad) {}
   };
   
   class MIND_API Elu : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Elu);
     Elu() : BaseOperator(kNameElu) {}
     void set_alpha(const float &alpha);
     float get_alpha() const;
   };
   
   class MIND_API Equal : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Equal);
     Equal() : BaseOperator(kNameEqual) {}
   };
   
   class MIND_API Erf : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Erf);
     Erf() : BaseOperator(kNameErf) {}
   };
   
   class MIND_API Erfc : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Erfc);
     Erfc() : BaseOperator(kNameErfc) {}
   };
   
   class MIND_API Erfinv : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Erfinv);
     Erfinv() : BaseOperator(kNameErfinv) {}
   };
   
   class MIND_API Exp : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Exp);
     Exp() : BaseOperator(kNameExp) {}
   };
   
   class MIND_API ExpandDims : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ExpandDims);
     ExpandDims() : BaseOperator(kNameExpandDims) {}
   };
   
   class MIND_API Expm1 : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Expm1);
     Expm1() : BaseOperator(kNameExpm1) {}
   };
   
   class MIND_API Eye : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Eye);
     Eye() : BaseOperator(kNameEye) {}
   };
   
   class MIND_API FastGeLUGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(FastGeLUGrad);
     FastGeLUGrad() : BaseOperator(kNameFastGeLUGrad) {}
   };
   
   class MIND_API FastGeLU : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(FastGeLU);
     FastGeLU() : BaseOperator(kNameFastGeLU) {}
   };
   
   class MIND_API FFTWithSize : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(FFTWithSize);
     FFTWithSize() : BaseOperator(kNameFFTWithSize) {}
     void set_signal_ndim(const int64_t &signal_ndim);
     int64_t get_signal_ndim() const;
     void set_inverse(const bool &inverse);
     bool get_inverse() const;
     void set_real(const bool &real);
     bool get_real() const;
     void set_norm(const int64_t &norm);
     int64_t get_norm() const;
     void set_onesided(const bool &onesided);
     bool get_onesided() const;
     void set_signal_sizes(const std::vector<int64_t> &signal_sizes);
     std::vector<int64_t> get_signal_sizes() const;
   };
   
   class MIND_API Flatten : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Flatten);
     Flatten() : BaseOperator(kNameFlatten) {}
   };
   
   class MIND_API FloorDiv : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(FloorDiv);
     FloorDiv() : BaseOperator(kNameFloorDiv) {}
   };
   
   class MIND_API FloorMod : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(FloorMod);
     FloorMod() : BaseOperator(kNameFloorMod) {}
   };
   
   class MIND_API Floor : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Floor);
     Floor() : BaseOperator(kNameFloor) {}
   };
   
   class MIND_API GatherDGradV2 : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GatherDGradV2);
     GatherDGradV2() : BaseOperator(kNameGatherDGradV2) {}
   };
   
   class MIND_API GatherD : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GatherD);
     GatherD() : BaseOperator(kNameGatherD) {}
   };
   
   class MIND_API GatherNd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GatherNd);
     GatherNd() : BaseOperator(kNameGatherNd) {}
   };
   
   class MIND_API Gather : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Gather);
     Gather() : BaseOperator(kNameGather) {}
     void set_batch_dims(const int64_t &batch_dims);
     int64_t get_batch_dims() const;
   };
   
   class MIND_API Gcd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Gcd);
     Gcd() : BaseOperator(kNameGcd) {}
   };
   
   class MIND_API GeLUGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GeLUGrad);
     GeLUGrad() : BaseOperator(kNameGeLUGrad) {}
   };
   
   class MIND_API GeLU : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GeLU);
     GeLU() : BaseOperator(kNameGeLU) {}
   };
   
   class MIND_API Geqrf : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Geqrf);
     Geqrf() : BaseOperator(kNameGeqrf) {}
   };
   
   class MIND_API GreaterEqual : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GreaterEqual);
     GreaterEqual() : BaseOperator(kNameGreaterEqual) {}
   };
   
   class MIND_API Greater : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Greater);
     Greater() : BaseOperator(kNameGreater) {}
   };
   
   class MIND_API GridSampler2DGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GridSampler2DGrad);
     GridSampler2DGrad() : BaseOperator(kNameGridSampler2DGrad) {}
     void set_interpolation_mode(const int64_t &interpolation_mode);
     int64_t get_interpolation_mode() const;
     void set_padding_mode(const int64_t &padding_mode);
     int64_t get_padding_mode() const;
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
   };
   
   class MIND_API GridSampler2D : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GridSampler2D);
     GridSampler2D() : BaseOperator(kNameGridSampler2D) {}
     void set_interpolation_mode(const int64_t &interpolation_mode);
     int64_t get_interpolation_mode() const;
     void set_padding_mode(const int64_t &padding_mode);
     int64_t get_padding_mode() const;
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
   };
   
   class MIND_API GridSampler3DGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GridSampler3DGrad);
     GridSampler3DGrad() : BaseOperator(kNameGridSampler3DGrad) {}
     void set_interpolation_mode(const int64_t &interpolation_mode);
     int64_t get_interpolation_mode() const;
     void set_padding_mode(const int64_t &padding_mode);
     int64_t get_padding_mode() const;
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
   };
   
   class MIND_API GridSampler3D : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(GridSampler3D);
     GridSampler3D() : BaseOperator(kNameGridSampler3D) {}
     void set_interpolation_mode(const int64_t &interpolation_mode);
     int64_t get_interpolation_mode() const;
     void set_padding_mode(const int64_t &padding_mode);
     int64_t get_padding_mode() const;
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
   };
   
   class MIND_API HShrinkGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(HShrinkGrad);
     HShrinkGrad() : BaseOperator(kNameHShrinkGrad) {}
     void set_lambd(const float &lambd);
     float get_lambd() const;
   };
   
   class MIND_API HShrink : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(HShrink);
     HShrink() : BaseOperator(kNameHShrink) {}
     void set_lambd(const float &lambd);
     float get_lambd() const;
   };
   
   class MIND_API HSigmoidGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(HSigmoidGrad);
     HSigmoidGrad() : BaseOperator(kNameHSigmoidGrad) {}
   };
   
   class MIND_API HSigmoid : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(HSigmoid);
     HSigmoid() : BaseOperator(kNameHSigmoid) {}
   };
   
   class MIND_API HSwishGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(HSwishGrad);
     HSwishGrad() : BaseOperator(kNameHSwishGrad) {}
   };
   
   class MIND_API HSwish : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(HSwish);
     HSwish() : BaseOperator(kNameHSwish) {}
   };
   
   class MIND_API Identity : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Identity);
     Identity() : BaseOperator(kNameIdentity) {}
   };
   
   class MIND_API LayerNormGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LayerNormGrad);
     LayerNormGrad() : BaseOperator(kNameLayerNormGrad) {}
     void set_begin_norm_axis(const int64_t &begin_norm_axis);
     int64_t get_begin_norm_axis() const;
     void set_begin_params_axis(const int64_t &begin_params_axis);
     int64_t get_begin_params_axis() const;
   };
   
   class MIND_API LayerNorm : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LayerNorm);
     LayerNorm() : BaseOperator(kNameLayerNorm) {}
     void set_begin_norm_axis(const int64_t &begin_norm_axis);
     int64_t get_begin_norm_axis() const;
     void set_begin_params_axis(const int64_t &begin_params_axis);
     int64_t get_begin_params_axis() const;
     void set_epsilon(const float &epsilon);
     float get_epsilon() const;
   };
   
   class MIND_API LessEqual : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LessEqual);
     LessEqual() : BaseOperator(kNameLessEqual) {}
   };
   
   class MIND_API Less : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Less);
     Less() : BaseOperator(kNameLess) {}
   };
   
   class MIND_API LinSpace : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LinSpace);
     LinSpace() : BaseOperator(kNameLinSpace) {}
   };
   
   class MIND_API Log1p : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Log1p);
     Log1p() : BaseOperator(kNameLog1p) {}
   };
   
   class MIND_API LogMatrixDeterminant : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LogMatrixDeterminant);
     LogMatrixDeterminant() : BaseOperator(kNameLogMatrixDeterminant) {}
   };
   
   class MIND_API Log : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Log);
     Log() : BaseOperator(kNameLog) {}
   };
   
   class MIND_API LogSoftmaxGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LogSoftmaxGrad);
     LogSoftmaxGrad() : BaseOperator(kNameLogSoftmaxGrad) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
   };
   
   class MIND_API LogSoftmax : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LogSoftmax);
     LogSoftmax() : BaseOperator(kNameLogSoftmax) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
   };
   
   class MIND_API LogicalAnd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LogicalAnd);
     LogicalAnd() : BaseOperator(kNameLogicalAnd) {}
   };
   
   class MIND_API LogicalNot : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LogicalNot);
     LogicalNot() : BaseOperator(kNameLogicalNot) {}
   };
   
   class MIND_API LogicalOr : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LogicalOr);
     LogicalOr() : BaseOperator(kNameLogicalOr) {}
   };
   
   class MIND_API LogicalXor : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LogicalXor);
     LogicalXor() : BaseOperator(kNameLogicalXor) {}
   };
   
   class MIND_API LogitGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LogitGrad);
     LogitGrad() : BaseOperator(kNameLogitGrad) {}
     void set_eps(const float &eps);
     float get_eps() const;
   };
   
   class MIND_API Logit : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Logit);
     Logit() : BaseOperator(kNameLogit) {}
     void set_eps(const float &eps);
     float get_eps() const;
   };
   
   class MIND_API MaskedFill : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(MaskedFill);
     MaskedFill() : BaseOperator(kNameMaskedFill) {}
   };
   
   class MIND_API MatrixDeterminant : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(MatrixDeterminant);
     MatrixDeterminant() : BaseOperator(kNameMatrixDeterminant) {}
   };
   
   class MIND_API MatrixExp : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(MatrixExp);
     MatrixExp() : BaseOperator(kNameMatrixExp) {}
   };
   
   class MIND_API MaximumGradGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(MaximumGradGrad);
     MaximumGradGrad() : BaseOperator(kNameMaximumGradGrad) {}
     void set_grad_x(const bool &grad_x);
     bool get_grad_x() const;
     void set_grad_y(const bool &grad_y);
     bool get_grad_y() const;
   };
   
   class MIND_API MaximumGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(MaximumGrad);
     MaximumGrad() : BaseOperator(kNameMaximumGrad) {}
     void set_grad_x(const bool &grad_x);
     bool get_grad_x() const;
     void set_grad_y(const bool &grad_y);
     bool get_grad_y() const;
   };
   
   class MIND_API Maximum : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Maximum);
     Maximum() : BaseOperator(kNameMaximum) {}
   };
   
   class MIND_API MinimumGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(MinimumGrad);
     MinimumGrad() : BaseOperator(kNameMinimumGrad) {}
     void set_grad_x(const bool &grad_x);
     bool get_grad_x() const;
     void set_grad_y(const bool &grad_y);
     bool get_grad_y() const;
   };
   
   class MIND_API Minimum : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Minimum);
     Minimum() : BaseOperator(kNameMinimum) {}
   };
   
   class MIND_API Mul : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Mul);
     Mul() : BaseOperator(kNameMul) {}
   };
   
   class MIND_API NanToNum : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(NanToNum);
     NanToNum() : BaseOperator(kNameNanToNum) {}
     void set_nan(const float &nan);
     float get_nan() const;
     void set_posinf(const float &posinf);
     float get_posinf() const;
     void set_neginf(const float &neginf);
     float get_neginf() const;
   };
   
   class MIND_API Neg : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Neg);
     Neg() : BaseOperator(kNameNeg) {}
   };
   
   class MIND_API NextAfter : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(NextAfter);
     NextAfter() : BaseOperator(kNameNextAfter) {}
   };
   
   class MIND_API NLLLossGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(NLLLossGrad);
     NLLLossGrad() : BaseOperator(kNameNLLLossGrad) {}
     void set_reduction(const int64_t &reduction);
     int64_t get_reduction() const;
     void set_ignore_index(const int64_t &ignore_index);
     int64_t get_ignore_index() const;
   };
   
   class MIND_API NLLLoss : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(NLLLoss);
     NLLLoss() : BaseOperator(kNameNLLLoss) {}
     void set_reduction(const int64_t &reduction);
     int64_t get_reduction() const;
     void set_ignore_index(const int64_t &ignore_index);
     int64_t get_ignore_index() const;
   };
   
   class MIND_API NonZero : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(NonZero);
     NonZero() : BaseOperator(kNameNonZero) {}
   };
   
   class MIND_API NotEqual : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(NotEqual);
     NotEqual() : BaseOperator(kNameNotEqual) {}
   };
   
   class MIND_API OneHot : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(OneHot);
     OneHot() : BaseOperator(kNameOneHot) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
   };
   
   class MIND_API OnesLike : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(OnesLike);
     OnesLike() : BaseOperator(kNameOnesLike) {}
   };
   
   class MIND_API Pow : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Pow);
     Pow() : BaseOperator(kNamePow) {}
   };
   
   class MIND_API PReLUGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(PReLUGrad);
     PReLUGrad() : BaseOperator(kNamePReLUGrad) {}
   };
   
   class MIND_API PReLU : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(PReLU);
     PReLU() : BaseOperator(kNamePReLU) {}
   };
   
   class MIND_API Qr : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Qr);
     Qr() : BaseOperator(kNameQr) {}
     void set_full_matrices(const bool &full_matrices);
     bool get_full_matrices() const;
   };
   
   class MIND_API RandpermV2 : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(RandpermV2);
     RandpermV2() : BaseOperator(kNameRandpermV2) {}
     void set_seed(const int64_t &seed);
     int64_t get_seed() const;
     void set_offset(const int64_t &offset);
     int64_t get_offset() const;
     void set_dtype(const int64_t &dtype);
     int64_t get_dtype() const;
   };
   
   class MIND_API Range : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Range);
     Range() : BaseOperator(kNameRange) {}
     void set_maxlen(const int64_t &maxlen);
     int64_t get_maxlen() const;
   };
   
   class MIND_API Rank : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Rank);
     Rank() : BaseOperator(kNameRank) {}
   };
   
   class MIND_API RealDiv : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(RealDiv);
     RealDiv() : BaseOperator(kNameRealDiv) {}
   };
   
   class MIND_API Real : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Real);
     Real() : BaseOperator(kNameReal) {}
   };
   
   class MIND_API ReciprocalGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReciprocalGrad);
     ReciprocalGrad() : BaseOperator(kNameReciprocalGrad) {}
   };
   
   class MIND_API Reciprocal : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Reciprocal);
     Reciprocal() : BaseOperator(kNameReciprocal) {}
   };
   
   class MIND_API ReduceAll : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReduceAll);
     ReduceAll() : BaseOperator(kNameReduceAll) {}
     void set_keep_dims(const bool &keep_dims);
     bool get_keep_dims() const;
   };
   
   class MIND_API ReduceAny : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReduceAny);
     ReduceAny() : BaseOperator(kNameReduceAny) {}
     void set_keep_dims(const bool &keep_dims);
     bool get_keep_dims() const;
   };
   
   class MIND_API ReduceMax : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReduceMax);
     ReduceMax() : BaseOperator(kNameReduceMax) {}
     void set_keep_dims(const bool &keep_dims);
     bool get_keep_dims() const;
   };
   
   class MIND_API ReduceMean : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReduceMean);
     ReduceMean() : BaseOperator(kNameReduceMean) {}
     void set_keep_dims(const bool &keep_dims);
     bool get_keep_dims() const;
   };
   
   class MIND_API ReduceMin : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReduceMin);
     ReduceMin() : BaseOperator(kNameReduceMin) {}
     void set_keep_dims(const bool &keep_dims);
     bool get_keep_dims() const;
   };
   
   class MIND_API ReduceProd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReduceProd);
     ReduceProd() : BaseOperator(kNameReduceProd) {}
     void set_keep_dims(const bool &keep_dims);
     bool get_keep_dims() const;
   };
   
   class MIND_API ReduceStd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReduceStd);
     ReduceStd() : BaseOperator(kNameReduceStd) {}
     void set_axis(const std::vector<int64_t> &axis);
     std::vector<int64_t> get_axis() const;
     void set_unbiased(const bool &unbiased);
     bool get_unbiased() const;
     void set_keep_dims(const bool &keep_dims);
     bool get_keep_dims() const;
   };
   
   class MIND_API ReduceSum : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReduceSum);
     ReduceSum() : BaseOperator(kNameReduceSum) {}
     void set_keep_dims(const bool &keep_dims);
     bool get_keep_dims() const;
     void set_skip_mode(const bool &skip_mode);
     bool get_skip_mode() const;
   };
   
   class MIND_API ReLU6Grad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReLU6Grad);
     ReLU6Grad() : BaseOperator(kNameReLU6Grad) {}
   };
   
   class MIND_API ReLU6 : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReLU6);
     ReLU6() : BaseOperator(kNameReLU6) {}
   };
   
   class MIND_API ReluGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReluGrad);
     ReluGrad() : BaseOperator(kNameReluGrad) {}
   };
   
   class MIND_API ReLU : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReLU);
     ReLU() : BaseOperator(kNameReLU) {}
   };
   
   class MIND_API Reshape : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Reshape);
     Reshape() : BaseOperator(kNameReshape) {}
   };
   
   class MIND_API ResizeBicubicGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeBicubicGrad);
     ResizeBicubicGrad() : BaseOperator(kNameResizeBicubicGrad) {}
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
     void set_half_pixel_centers(const bool &half_pixel_centers);
     bool get_half_pixel_centers() const;
   };
   
   class MIND_API ResizeBicubic : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeBicubic);
     ResizeBicubic() : BaseOperator(kNameResizeBicubic) {}
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
     void set_half_pixel_centers(const bool &half_pixel_centers);
     bool get_half_pixel_centers() const;
   };
   
   class MIND_API ResizeBilinearGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeBilinearGrad);
     ResizeBilinearGrad() : BaseOperator(kNameResizeBilinearGrad) {}
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
     void set_half_pixel_centers(const bool &half_pixel_centers);
     bool get_half_pixel_centers() const;
   };
   
   class MIND_API ResizeBilinearV2 : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeBilinearV2);
     ResizeBilinearV2() : BaseOperator(kNameResizeBilinearV2) {}
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
     void set_half_pixel_centers(const bool &half_pixel_centers);
     bool get_half_pixel_centers() const;
   };
   
   class MIND_API ResizeLinear1DGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeLinear1DGrad);
     ResizeLinear1DGrad() : BaseOperator(kNameResizeLinear1DGrad) {}
     void set_coordinate_transformation_mode(const int64_t &coordinate_transformation_mode);
     int64_t get_coordinate_transformation_mode() const;
   };
   
   class MIND_API ResizeLinear1D : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeLinear1D);
     ResizeLinear1D() : BaseOperator(kNameResizeLinear1D) {}
     void set_coordinate_transformation_mode(const int64_t &coordinate_transformation_mode);
     int64_t get_coordinate_transformation_mode() const;
   };
   
   class MIND_API ResizeNearestNeighborGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeNearestNeighborGrad);
     ResizeNearestNeighborGrad() : BaseOperator(kNameResizeNearestNeighborGrad) {}
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
     void set_half_pixel_centers(const bool &half_pixel_centers);
     bool get_half_pixel_centers() const;
   };
   
   class MIND_API ResizeNearestNeighbor : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeNearestNeighbor);
     ResizeNearestNeighbor() : BaseOperator(kNameResizeNearestNeighbor) {}
     void set_size(const std::vector<int64_t> &size);
     std::vector<int64_t> get_size() const;
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
     void set_half_pixel_centers(const bool &half_pixel_centers);
     bool get_half_pixel_centers() const;
   };
   
   class MIND_API ResizeNearestNeighborV2Grad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeNearestNeighborV2Grad);
     ResizeNearestNeighborV2Grad() : BaseOperator(kNameResizeNearestNeighborV2Grad) {}
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
     void set_half_pixel_centers(const bool &half_pixel_centers);
     bool get_half_pixel_centers() const;
   };
   
   class MIND_API ResizeNearestNeighborV2 : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ResizeNearestNeighborV2);
     ResizeNearestNeighborV2() : BaseOperator(kNameResizeNearestNeighborV2) {}
     void set_align_corners(const bool &align_corners);
     bool get_align_corners() const;
     void set_half_pixel_centers(const bool &half_pixel_centers);
     bool get_half_pixel_centers() const;
   };
   
   class MIND_API ReverseV2 : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReverseV2);
     ReverseV2() : BaseOperator(kNameReverseV2) {}
     void set_axis(const std::vector<int64_t> &axis);
     std::vector<int64_t> get_axis() const;
   };
   
   class MIND_API RightShift : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(RightShift);
     RightShift() : BaseOperator(kNameRightShift) {}
   };
   
   class MIND_API Roll : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Roll);
     Roll() : BaseOperator(kNameRoll) {}
     void set_shift(const std::vector<int64_t> &shift);
     std::vector<int64_t> get_shift() const;
     void set_axis(const std::vector<int64_t> &axis);
     std::vector<int64_t> get_axis() const;
   };
   
   class MIND_API Round : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Round);
     Round() : BaseOperator(kNameRound) {}
   };
   
   class MIND_API RsqrtGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(RsqrtGrad);
     RsqrtGrad() : BaseOperator(kNameRsqrtGrad) {}
   };
   
   class MIND_API Rsqrt : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Rsqrt);
     Rsqrt() : BaseOperator(kNameRsqrt) {}
   };
   
   class MIND_API ScalarAdd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarAdd);
     ScalarAdd() : BaseOperator(kNameScalarAdd) {}
   };
   
   class MIND_API ScalarBool : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarBool);
     ScalarBool() : BaseOperator(kNameScalarBool) {}
   };
   
   class MIND_API ScalarDiv : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarDiv);
     ScalarDiv() : BaseOperator(kNameScalarDiv) {}
   };
   
   class MIND_API ScalarEq : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarEq);
     ScalarEq() : BaseOperator(kNameScalarEq) {}
   };
   
   class MIND_API ScalarFloorDiv : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarFloorDiv);
     ScalarFloorDiv() : BaseOperator(kNameScalarFloorDiv) {}
   };
   
   class MIND_API ScalarGe : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarGe);
     ScalarGe() : BaseOperator(kNameScalarGe) {}
   };
   
   class MIND_API ScalarGt : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarGt);
     ScalarGt() : BaseOperator(kNameScalarGt) {}
   };
   
   class MIND_API ScalarLe : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarLe);
     ScalarLe() : BaseOperator(kNameScalarLe) {}
   };
   
   class MIND_API ScalarLog : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarLog);
     ScalarLog() : BaseOperator(kNameScalarLog) {}
   };
   
   class MIND_API ScalarLt : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarLt);
     ScalarLt() : BaseOperator(kNameScalarLt) {}
   };
   
   class MIND_API ScalarMod : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarMod);
     ScalarMod() : BaseOperator(kNameScalarMod) {}
   };
   
   class MIND_API ScalarMul : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarMul);
     ScalarMul() : BaseOperator(kNameScalarMul) {}
   };
   
   class MIND_API ScalarPow : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarPow);
     ScalarPow() : BaseOperator(kNameScalarPow) {}
   };
   
   class MIND_API ScalarSub : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarSub);
     ScalarSub() : BaseOperator(kNameScalarSub) {}
   };
   
   class MIND_API ScalarUadd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarUadd);
     ScalarUadd() : BaseOperator(kNameScalarUadd) {}
   };
   
   class MIND_API ScalarUsub : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScalarUsub);
     ScalarUsub() : BaseOperator(kNameScalarUsub) {}
   };
   
   class MIND_API ScatterNd : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ScatterNd);
     ScatterNd() : BaseOperator(kNameScatterNd) {}
   };
   
   class MIND_API Shape : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Shape);
     Shape() : BaseOperator(kNameShape) {}
   };
   
   class MIND_API SigmoidGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(SigmoidGrad);
     SigmoidGrad() : BaseOperator(kNameSigmoidGrad) {}
   };
   
   class MIND_API Sigmoid : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Sigmoid);
     Sigmoid() : BaseOperator(kNameSigmoid) {}
   };
   
   class MIND_API SiLU : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(SiLU);
     SiLU() : BaseOperator(kNameSiLU) {}
   };
   
   class MIND_API Sin : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Sin);
     Sin() : BaseOperator(kNameSin) {}
   };
   
   class MIND_API Sinc : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Sinc);
     Sinc() : BaseOperator(kNameSinc) {}
   };
   
   class MIND_API Sinh : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Sinh);
     Sinh() : BaseOperator(kNameSinh) {}
   };
   
   class MIND_API Softmax : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Softmax);
     Softmax() : BaseOperator(kNameSoftmax) {}
     void set_axis(const std::vector<int64_t> &axis);
     std::vector<int64_t> get_axis() const;
   };
   
   class MIND_API Split : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Split);
     Split() : BaseOperator(kNameSplit) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
     void set_output_num(const int64_t &output_num);
     int64_t get_output_num() const;
   };
   
   class MIND_API SqrtGrad : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(SqrtGrad);
     SqrtGrad() : BaseOperator(kNameSqrtGrad) {}
   };
   
   class MIND_API Sqrt : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Sqrt);
     Sqrt() : BaseOperator(kNameSqrt) {}
   };
   
   class MIND_API Square : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Square);
     Square() : BaseOperator(kNameSquare) {}
   };
   
   class MIND_API TensorCopySlices : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(TensorCopySlices);
     TensorCopySlices() : BaseOperator(kNameTensorCopySlices) {}
   };
   
   class MIND_API TensorShape : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(TensorShape);
     TensorShape() : BaseOperator(kNameTensorShape) {}
   };
   
   class MIND_API Tile : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Tile);
     Tile() : BaseOperator(kNameTile) {}
   };
   
   class MIND_API Trace : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Trace);
     Trace() : BaseOperator(kNameTrace) {}
   };
   
   class MIND_API Transpose : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Transpose);
     Transpose() : BaseOperator(kNameTranspose) {}
   };
   
   class MIND_API ZerosLike : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ZerosLike);
     ZerosLike() : BaseOperator(kNameZerosLike) {}
   };
   
   class MIND_API ExtractImagePatches : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ExtractImagePatches);
     ExtractImagePatches() : BaseOperator(kNameExtractImagePatches) {}
     void set_ksizes(const std::vector<int64_t> &ksizes);
     std::vector<int64_t> get_ksizes() const;
     void set_strides(const std::vector<int64_t> &strides);
     std::vector<int64_t> get_strides() const;
     void set_rates(const std::vector<int64_t> &rates);
     std::vector<int64_t> get_rates() const;
     void set_padding(const int64_t &padding);
     int64_t get_padding() const;
   };
   
   class MIND_API SequenceConcat : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(SequenceConcat);
     SequenceConcat() : BaseOperator(kNameSequenceConcat) {}
     void set_axis(const int64_t &axis);
     int64_t get_axis() const;
   };
   
   }  // namespace mindspore::ops
   #endif  // MINDSPORE_CORE_OPS_GEN_LITE_OPS_H_
