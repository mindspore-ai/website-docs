:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_runtime_include_c_api_context_c.h:

Program Listing for File context_c.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_runtime_include_c_api_context_c.h>` (``include/runtime/include/c_api/context_c.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_INCLUDE_C_API_CONTEXT_C_H
   #define MINDSPORE_INCLUDE_C_API_CONTEXT_C_H
   
   #include <stddef.h>
   #include <stdint.h>
   #include <stdbool.h>
   #include "include/c_api/types_c.h"
   
   #ifdef __cplusplus
   extern "C" {
   #endif
   
   typedef void *MSContextHandle;
   typedef void *MSDeviceInfoHandle;
   
   MS_API MSContextHandle MSContextCreate();
   
   MS_API void MSContextDestroy(MSContextHandle *context);
   
   MS_API void MSContextSetThreadNum(MSContextHandle context, int32_t thread_num);
   
   MS_API int32_t MSContextGetThreadNum(const MSContextHandle context);
   
   MS_API void MSContextSetThreadAffinityMode(MSContextHandle context, int mode);
   
   MS_API int MSContextGetThreadAffinityMode(const MSContextHandle context);
   
   MS_API void MSContextSetThreadAffinityCoreList(MSContextHandle context, const int32_t *core_list, size_t core_num);
   
   MS_API const int32_t *MSContextGetThreadAffinityCoreList(const MSContextHandle context, size_t *core_num);
   
   MS_API void MSContextSetEnableParallel(MSContextHandle context, bool is_parallel);
   
   MS_API bool MSContextGetEnableParallel(const MSContextHandle context);
   
   MS_API void MSContextAddDeviceInfo(MSContextHandle context, MSDeviceInfoHandle device_info);
   
   MS_API MSDeviceInfoHandle MSDeviceInfoCreate(MSDeviceType device_type);
   
   MS_API void MSDeviceInfoDestroy(MSDeviceInfoHandle *device_info);
   
   MS_API void MSDeviceInfoSetProvider(MSDeviceInfoHandle device_info, const char *provider);
   
   MS_API const char *MSDeviceInfoGetProvider(const MSDeviceInfoHandle device_info);
   
   MS_API void MSDeviceInfoSetProviderDevice(MSDeviceInfoHandle device_info, const char *device);
   
   MS_API const char *MSDeviceInfoGetProviderDevice(const MSDeviceInfoHandle device_info);
   
   MS_API MSDeviceType MSDeviceInfoGetDeviceType(const MSDeviceInfoHandle device_info);
   
   MS_API void MSDeviceInfoSetEnableFP16(MSDeviceInfoHandle device_info, bool is_fp16);
   
   MS_API bool MSDeviceInfoGetEnableFP16(const MSDeviceInfoHandle device_info);
   
   MS_API void MSDeviceInfoSetFrequency(MSDeviceInfoHandle device_info, int frequency);
   
   MS_API int MSDeviceInfoGetFrequency(const MSDeviceInfoHandle device_info);
   
   #ifdef __cplusplus
   }
   #endif
   #endif  // MINDSPORE_INCLUDE_C_API_CONTEXT_C_H
