:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_audio_spectrogram.h:

Program Listing for File audio_spectrogram.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_audio_spectrogram.h>` (``include/converter/include/ops/audio_spectrogram.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_AUDIO_SPECTROGRAM_H_
   #define MINDSPORE_CORE_OPS_AUDIO_SPECTROGRAM_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameAudioSpectrogram = "AudioSpectrogram";
   class MIND_API AudioSpectrogram : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(AudioSpectrogram);
     AudioSpectrogram() : BaseOperator(kNameAudioSpectrogram) {}
   
     void Init(const int64_t window_size, const int64_t stride, const bool mag_square);
   
     void set_window_size(const int64_t window_size);
   
     void set_stride(const int64_t stride);
   
     void set_mag_square(const bool mag_square);
   
     int64_t get_window_size() const;
   
     int64_t get_stride() const;
   
     bool get_mag_square() const;
   };
   MIND_API abstract::AbstractBasePtr AudioSpectrogramInfer(const abstract::AnalysisEnginePtr &,
                                                            const PrimitivePtr &primitive,
                                                            const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_AUDIO_SPECTROGRAM_H_
