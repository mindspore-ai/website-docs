:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_batch_to_space_nd.h:

Program Listing for File batch_to_space_nd.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_batch_to_space_nd.h>` (``include/converter/include/ops/batch_to_space_nd.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_BATCH_TO_SPACE_ND_H_
   #define MINDSPORE_CORE_OPS_BATCH_TO_SPACE_ND_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameBatchToSpaceND = "BatchToSpaceND";
   class MIND_API BatchToSpaceND : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(BatchToSpaceND);
     BatchToSpaceND() : BaseOperator(kNameBatchToSpaceND) {}
     void Init(const std::vector<int64_t> block_shape, const std::vector<std::vector<int64_t>> crops);
     void set_crops(std::vector<std::vector<int64_t>> crops);
     void set_block_shape(std::vector<int64_t> block_shape);
     std::vector<int64_t> get_block_shape() const;
     std::vector<std::vector<int64_t>> get_crops() const;
   };
   MIND_API abstract::AbstractBasePtr BatchToSpaceNDInfer(const abstract::AnalysisEnginePtr &,
                                                          const PrimitivePtr &primitive,
                                                          const std::vector<abstract::AbstractBasePtr> &input_args);
   using kPrimBatchToSpaceNDPtr = std::shared_ptr<BatchToSpaceND>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_BATCH_TO_SPACE_ND_H_
