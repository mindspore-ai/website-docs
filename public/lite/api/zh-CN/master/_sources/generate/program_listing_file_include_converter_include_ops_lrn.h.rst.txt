:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_lrn.h:

Program Listing for File lrn.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_lrn.h>` (``include/converter/include/ops/lrn.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_LRN_H_
   #define MINDSPORE_CORE_OPS_LRN_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   // An unique id for MS Lite.
   constexpr auto kNameLRN = "LRN";
   class MIND_API LRN : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(LRN);
     LRN() : BaseOperator(kNameLRN) { InitIOName({"x"}, {"y"}); }
     void Init(const int64_t depth_radius = 5, const float bias = 1.0, const float alpha = 1.0, const float beta = 0.5,
               const std::string &norm_region = "ACROSS_CHANNELS");
     void set_depth_radius(const int64_t depth_radius);
     void set_bias(const float bias);
     void set_alpha(const float alpha);
     void set_beta(const float beta);
     void set_norm_region(const std::string &norm_region);
     int64_t get_depth_radius() const;
     float get_bias() const;
     float get_alpha() const;
     float get_beta() const;
     std::string get_norm_region() const;
   };
   MIND_API abstract::AbstractBasePtr LrnInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                               const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_LRN_H_
