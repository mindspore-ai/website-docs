:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_mfcc.h:

Program Listing for File mfcc.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_mfcc.h>` (``include/converter/include/ops/mfcc.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_OPS_MFCC_H_
   #define MINDSPORE_CORE_OPS_MFCC_H_
   #include <memory>
   #include <vector>
   
   #include "mindapi/base/types.h"
   #include "ops/base_operator.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameMfcc = "Mfcc";
   class MIND_API Mfcc : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Mfcc);
     Mfcc() : BaseOperator(kNameMfcc) {}
   
     void Init(const float freq_upper_limit, const float freq_lower_limit, const int64_t filter_bank_channel_num,
               const int64_t dct_coeff_num);
   
     void set_freq_upper_limit(const float freq_upper_limit);
   
     void set_freq_lower_limit(const float freq_lower_limit);
   
     void set_filter_bank_channel_num(const int64_t filter_bank_channel_num);
   
     void set_dct_coeff_num(const int64_t dct_coeff_num);
   
     float get_freq_upper_limit() const;
   
     float get_freq_lower_limit() const;
   
     int64_t get_filter_bank_channel_num() const;
   
     int64_t get_dct_coeff_num() const;
   };
   MIND_API abstract::AbstractBasePtr MfccInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_MFCC_H_
