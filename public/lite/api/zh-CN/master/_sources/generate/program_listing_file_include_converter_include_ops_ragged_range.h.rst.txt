:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_ragged_range.h:

Program Listing for File ragged_range.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_ragged_range.h>` (``include/converter/include/ops/ragged_range.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_RAGGEDRANGE_H_
   #define MINDSPORE_CORE_OPS_RAGGEDRANGE_H_
   #include <algorithm>
   #include <functional>
   #include <memory>
   #include <set>
   #include <string>
   #include <vector>
   #include "mindapi/base/types.h"
   #include "ops/base_operator.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameRaggedRange = "RaggedRange";
   class MIND_API RaggedRange : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(RaggedRange);
     RaggedRange() : BaseOperator(kNameRaggedRange) {
       InitIOName({"starts", "limits", "deltas"}, {"rt_nested_splits", "rt_dense_values"});
     }
     void Init() const {}
   };
   MIND_API abstract::AbstractBasePtr RaggedRangeInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                       const std::vector<abstract::AbstractBasePtr> &input_args);
   using PrimRaggedRangePtr = std::shared_ptr<RaggedRange>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_RAGGED_RANGE_H_
