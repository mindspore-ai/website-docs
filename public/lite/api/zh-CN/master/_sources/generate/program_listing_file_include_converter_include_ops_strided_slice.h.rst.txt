:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_strided_slice.h:

Program Listing for File strided_slice.h
========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_strided_slice.h>` (``include/converter/include/ops/strided_slice.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_STRIDED_SLICE_H_
   #define MINDSPORE_CORE_OPS_STRIDED_SLICE_H_
   #include <map>
   #include <memory>
   #include <string>
   #include <vector>
   
   #include "mindapi/base/types.h"
   #include "ops/base_operator.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameStridedSlice = "StridedSlice";
   
   class MIND_API StridedSlice : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(StridedSlice);
     StridedSlice() : BaseOperator(kNameStridedSlice) { InitIOName({"x", "begin", "end", "strides"}, {"output"}); }
     void Init(int64_t begin_mask = 0, int64_t end_mask = 0, int64_t ellipsis_mask = 0, int64_t new_axis_mask = 0,
               int64_t shrink_axis_mask = 0);
     void set_begin_mask(int64_t begin_mask);
     void set_end_mask(int64_t end_mask);
     void set_ellipsis_mask(int64_t ellipsis_mask);
     void set_new_axis_mask(int64_t new_axis_mask);
     void set_shrink_axis_mask(int64_t shrink_axis_mask);
     int64_t get_begin_mask() const;
     int64_t get_end_mask() const;
     int64_t get_ellipsis_mask() const;
     int64_t get_new_axis_mask() const;
     int64_t get_shrink_axis_mask() const;
   
     std::vector<int64_t> get_begin() const;
     std::vector<int64_t> get_end() const;
     std::vector<int64_t> get_strides() const;
   };
   
   MIND_API abstract::AbstractBasePtr StridedSliceInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                        const std::vector<abstract::AbstractBasePtr> &input_args);
   using PrimStridedSlicePtr = std::shared_ptr<StridedSlice>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_STRIDED_SLICE_H_
