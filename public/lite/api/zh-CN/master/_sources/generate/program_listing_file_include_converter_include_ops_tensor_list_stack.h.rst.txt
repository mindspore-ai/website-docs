:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_tensor_list_stack.h:

Program Listing for File tensor_list_stack.h
============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_tensor_list_stack.h>` (``include/converter/include/ops/tensor_list_stack.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_TENSOR_LIST_STACK_H_
   #define MINDSPORE_CORE_OPS_TENSOR_LIST_STACK_H_
   #include <memory>
   #include <vector>
   
   #include "mindapi/base/types.h"
   #include "ops/base_operator.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameTensorListStack = "TensorListStack";
   class MIND_API TensorListStack : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(TensorListStack);
     TensorListStack() : BaseOperator(kNameTensorListStack) {}
   
     void Init(const int64_t num_elements, const int64_t element_dtype);
   
     void set_num_elements(const int64_t num_elements);
   
     void set_element_dtype(const int64_t element_dtype);
   
     int64_t get_num_elements() const;
   
     int64_t get_element_dtype() const;
   };
   
   MIND_API abstract::AbstractBasePtr TensorListStackInfer(const abstract::AnalysisEnginePtr &,
                                                           const PrimitivePtr &primitive,
                                                           const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_TENSOR_LIST_STACK_H_
