:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ir_dtype_monad_type.h:

Program Listing for File monad_type.h
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ir_dtype_monad_type.h>` (``include/converter/include/core/ir/dtype/monad_type.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_IR_DTYPE_MONAD_H_
   #define MINDSPORE_CORE_IR_DTYPE_MONAD_H_
   
   #include <memory>
   #include <string>
   
   #include "base/base.h"
   #include "ir/dtype/type.h"
   
   namespace mindspore {
   class MonadType : public Object {
    public:
     ~MonadType() override = default;
     MS_DECLARE_PARENT(MonadType, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeMonad; }
     TypePtr DeepCopy() const override = 0;
   
    protected:
     explicit MonadType(const TypeId type_id) : Object(type_id) {}
   };
   using MonadTypePtr = std::shared_ptr<MonadType>;
   
   // UniversalMonad type
   class UMonadType : public MonadType {
    public:
     UMonadType() : MonadType(kObjectTypeUMonad) {}
     ~UMonadType() override {}
     MS_DECLARE_PARENT(UMonadType, MonadType)
   
     TypeId generic_type_id() const override { return kObjectTypeUMonad; }
     TypePtr DeepCopy() const override { return std::make_shared<UMonadType>(); }
     std::string ToString() const override { return "UMonad"; }
   };
   using UMonadTypePtr = std::shared_ptr<UMonadType>;
   
   // IOMonad type
   class IOMonadType : public MonadType {
    public:
     IOMonadType() : MonadType(kObjectTypeIOMonad) {}
     ~IOMonadType() override {}
     MS_DECLARE_PARENT(IOMonadType, MonadType)
   
     TypeId generic_type_id() const override { return kObjectTypeIOMonad; }
     TypePtr DeepCopy() const override { return std::make_shared<IOMonadType>(); }
     std::string ToString() const override { return "IOMonad"; }
   };
   using IOMonadTypePtr = std::shared_ptr<IOMonadType>;
   
   MS_CORE_API extern const TypePtr kIOMonadType;
   MS_CORE_API extern const TypePtr kUMonadType;
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_IR_DTYPE_MONDA_H_
