:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ops_fused_batch_norm.h:

Program Listing for File fused_batch_norm.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ops_fused_batch_norm.h>` (``include/converter/include/core/ops/fused_batch_norm.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_FUSED_BATCH_NORM_H_
   #define MINDSPORE_CORE_OPS_FUSED_BATCH_NORM_H_
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameFusedBatchNorm = "FusedBatchNorm";
   class MIND_API FusedBatchNorm : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(FusedBatchNorm);
     FusedBatchNorm() : BaseOperator(kNameFusedBatchNorm) {
       InitIOName({"x", "scale", "b", "mean", "variance"},
                  {"y", "running_mean", "running_variance", "save_mean", "save_inv_variance"});
     }
   
     void Init(const int64_t mode = 0, const float epsilon = 1e-5, const float momentum = 0.1);
   
     void set_mode(const int64_t mode);
   
     void set_epsilon(const float epsilon);
   
     void set_momentum(const float momentum);
   
     int64_t get_mode() const;
   
     float get_epsilon() const;
   
     float get_momentum() const;
   };
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_FUSED_BATCH_NORM_H_
