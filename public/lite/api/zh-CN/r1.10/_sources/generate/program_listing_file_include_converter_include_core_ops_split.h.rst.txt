:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ops_split.h:

Program Listing for File split.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ops_split.h>` (``include/converter/include/core/ops/split.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_SPLIT_H_
   #define MINDSPORE_CORE_OPS_SPLIT_H_
   #include <vector>
   #include <memory>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameSplit = "Split";
   class MIND_API Split : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(Split);
     Split() : BaseOperator(kNameSplit) { InitIOName({"x"}, {"output"}); }
     void Init(const int64_t axis, const int64_t output_num);
     void set_size_splits(const std::vector<int64_t> &size_splits);
     void set_axis(const int64_t axis);
     void set_output_num(const int64_t output_num);
     std::vector<int64_t> get_size_splits() const;
     int64_t get_axis() const;
     int64_t get_output_num() const;
   };
   abstract::AbstractBasePtr SplitInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                        const std::vector<abstract::AbstractBasePtr> &input_args);
   using PrimSplit = std::shared_ptr<Split>;
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_SPLIT_H_
