:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_runtime_include_c_api_model_c.h:

Program Listing for File model_c.h
==================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_runtime_include_c_api_model_c.h>` (``include/runtime/include/c_api/model_c.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_INCLUDE_C_API_MODEL_C_H
   #define MINDSPORE_INCLUDE_C_API_MODEL_C_H
   
   #include "include/c_api/tensor_c.h"
   #include "include/c_api/context_c.h"
   #include "include/c_api/status_c.h"
   
   #ifdef __cplusplus
   extern "C" {
   #endif
   
   typedef void *MSModelHandle;
   
   typedef struct MSTensorHandleArray {
     size_t handle_num;
     MSTensorHandle *handle_list;
   } MSTensorHandleArray;
   
   #define MS_MAX_SHAPE_NUM 32
   typedef struct MSShapeInfo {
     size_t shape_num;
     int64_t shape[MS_MAX_SHAPE_NUM];
   } MSShapeInfo;
   
   typedef struct MSCallBackParamC {
     char *node_name;
     char *node_type;
   } MSCallBackParamC;
   
   typedef bool (*MSKernelCallBackC)(const MSTensorHandleArray inputs, const MSTensorHandleArray outputs,
                                     const MSCallBackParamC kernel_Info);
   
   MS_API MSModelHandle MSModelCreate();
   
   MS_API void MSModelDestroy(MSModelHandle *model);
   
   MS_API void MSModelSetWorkspace(MSModelHandle model, void *workspace, size_t workspace_size);
   
   MS_API MSStatus MSModelBuild(MSModelHandle model, const void *model_data, size_t data_size, MSModelType model_type,
                                const MSContextHandle model_context);
   
   MS_API MSStatus MSModelBuildFromFile(MSModelHandle model, const char *model_path, MSModelType model_type,
                                        const MSContextHandle model_context);
   
   MS_API MSStatus MSModelResize(MSModelHandle model, const MSTensorHandleArray inputs, MSShapeInfo *shape_infos,
                                 size_t shape_info_num);
   
   MS_API MSStatus MSModelPredict(MSModelHandle model, const MSTensorHandleArray inputs, MSTensorHandleArray *outputs,
                                  const MSKernelCallBackC before, const MSKernelCallBackC after);
   
   MS_API MSStatus MSModelRunStep(MSModelHandle model, const MSKernelCallBackC before, const MSKernelCallBackC after);
   
   MS_API MSStatus MSModelSetTrainMode(const MSModelHandle model, bool train);
   
   MS_API MSStatus MSModelExportWeight(const MSModelHandle model, const char *export_path);
   
   MS_API MSTensorHandleArray MSModelGetInputs(const MSModelHandle model);
   
   MS_API MSTensorHandleArray MSModelGetOutputs(const MSModelHandle model);
   
   MS_API MSTensorHandle MSModelGetInputByTensorName(const MSModelHandle model, const char *tensor_name);
   
   MS_API MSTensorHandle MSModelGetOutputByTensorName(const MSModelHandle model, const char *tensor_name);
   
   #ifdef __cplusplus
   }
   #endif
   #endif  // MINDSPORE_INCLUDE_C_API_MODEL_C_H
