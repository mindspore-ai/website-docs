:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_abstract_primitive_infer_map.h:

Program Listing for File primitive_infer_map.h
==============================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_abstract_primitive_infer_map.h>` (``include/converter/include/core/abstract/primitive_infer_map.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_CORE_ABSTRACT_PRIMITIVE_INFER_MAP_H_
   #define MINDSPORE_CORE_ABSTRACT_PRIMITIVE_INFER_MAP_H_
   
   #include <vector>
   #include <set>
   #include <string>
   #include <memory>
   #include "utils/hash_map.h"
   #include "ir/primitive.h"
   #include "ops/primitive_c.h"
   #include "mindspore/core/ops/core_ops.h"
   #include "abstract/abstract_value.h"
   #include "ir/anf.h"
   
   namespace mindspore {
   namespace abstract {
   using InferShapeImpl = AbstractBasePtr (*)(const abstract::AnalysisEnginePtr &, const PrimitivePtr &,
                                              const AbstractBasePtrList &);
   using InferValueImpl = ValuePtr (*)(const PrimitivePtr &, const AbstractBasePtrList &);
   
   struct StandardPrimitiveImplReg {
     InferShapeImpl infer_shape_impl_;  // infer shape and type for ops
     InferValueImpl infer_value_impl_;  // infer value for ops
     // in_white_list_ is true means this primitive can be executed by vm backend
     // else will be optimized by frontend
     bool in_white_list_;
   };
   
   using PrimitiveEvalImplMap =
     mindspore::HashMap<PrimitivePtr, StandardPrimitiveImplReg, PrimitiveHasher, PrimitiveEqual>;
   
   using PrimShapeDependMap = mindspore::HashMap<std::string, std::set<int64_t>>;
   
   MS_CORE_API PrimitiveEvalImplMap &GetPrimitiveToEvalImplMap();
   
   MS_CORE_API PrimitiveEvalImplMap &GetPrimitiveToBackendEvalImplMap();
   
   MS_CORE_API StandardPrimitiveImplReg GetPrimitiveInferImpl(const PrimitivePtr &primitive);
   
   MS_CORE_API std::set<int64_t> GetDependsFormMap(const std::string &prim_name, size_t input_num);
   
   MS_CORE_API std::set<int64_t> GetDependsFormMap(const CNodePtr &cnode);
   
   MS_CORE_API void RegisterStandardPrimitiveImpl(const PrimitivePtr &primitive, const StandardPrimitiveImplReg &impl_reg);
   
   class RegisterStandardPrimitiveEvalHelper {
    public:
     RegisterStandardPrimitiveEvalHelper(const PrimitivePtr &primitive, const InferShapeImpl &infer_impl,
                                         const InferValueImpl &infer_value_impl, const bool is_white_list = true) {
       const StandardPrimitiveImplReg impl_reg{infer_impl, infer_value_impl, is_white_list};
       RegisterStandardPrimitiveImpl(primitive, impl_reg);
     }
     ~RegisterStandardPrimitiveEvalHelper() = default;
   };
   
   #define REGISTER_PRIMITIVE_EVAL_IMPL(name, primitive, infer_impl, infer_value_impl, is_white_list)         \
     static auto helper_##name =                                                                              \
       abstract::RegisterStandardPrimitiveEvalHelper(primitive, infer_impl, infer_value_impl, is_white_list); \
     std::shared_ptr<ops::PrimitiveC> GetDefaultPrimC##name() {                                               \
       name out;                                                                                              \
       return std::dynamic_pointer_cast<ops::PrimitiveC>(out.impl());                                         \
     }                                                                                                        \
     ops::OpPrimCRegisterHelper primc_gen_##name(#name, GetDefaultPrimC##name);
   
   MS_CORE_API void RegisterHostDependsImpl(const std::string &name, const std::set<int64_t> &host_depends);
   
   class RegisterHostDependsHelper {
    public:
     RegisterHostDependsHelper(const std::string &name, const std::set<int64_t> &depends) {
       RegisterHostDependsImpl(name, depends);
     }
     ~RegisterHostDependsHelper() = default;
   };
   
   // Processes such as InferShape need to obtain some inputs value on the host
   #define REGISTER_HOST_DEPENDS(name, depends...) \
     static auto helper_host_depends_##name = abstract::RegisterHostDependsHelper(name, ##depends);
   }  // namespace abstract
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_ABSTRACT_PRIMITIVE_INFER_MAP_H_
