:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ir_dtype_tensor_type.h:

Program Listing for File tensor_type.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ir_dtype_tensor_type.h>` (``include/converter/include/core/ir/dtype/tensor_type.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_IR_DTYPE_TENSORTYPE_H_
   #define MINDSPORE_CORE_IR_DTYPE_TENSORTYPE_H_
   
   #include <cstddef>
   #include <iostream>
   #include <initializer_list>
   #include <map>
   #include <memory>
   #include <utility>
   #include <sstream>
   #include <string>
   #include <vector>
   #include <type_traits>
   #include <algorithm>
   
   #include "utils/hash_map.h"
   #include "base/base.h"
   #include "ir/named.h"
   #include "ir/dtype/type.h"
   
   namespace mindspore {
   class MS_CORE_API UndeterminedType final : public Object {
    public:
     UndeterminedType() : Object(kObjectTypeUndeterminedType) {}
   
     explicit UndeterminedType(const TypePtr &ele)
         : Object(kObjectTypeUndeterminedType, kMetaTypeObject, false), element_type_(ele) {}
   
     ~UndeterminedType() override = default;
     MS_DECLARE_PARENT(UndeterminedType, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeUndeterminedType; }
   
     const TypePtr element() const { return element_type_; }
   
     void set_element(const TypePtr &element_type) { element_type_ = element_type; }
   
     TypePtr DeepCopy() const override;
     std::string ToString() const override;
     std::string ToReprString() const override;
     std::string DumpText() const override;
   
     bool operator==(const Type &other) const override;
   
    protected:
     TypePtr element_type_;
   };
   using MetaTensorTypePtr = std::shared_ptr<UndeterminedType>;
   
   class MS_CORE_API TensorType : public Object {
    public:
     TensorType() : Object(kObjectTypeTensorType, kObjectTypeUndeterminedType) {}
   
     explicit TensorType(const TypePtr &ele)
         : Object(kObjectTypeTensorType, kObjectTypeUndeterminedType, false), element_type_(ele) {}
   
     ~TensorType() override = default;
     MS_DECLARE_PARENT(TensorType, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeTensorType; }
   
     const TypePtr element() const { return element_type_; }
   
     void set_element(const TypePtr &element_type) { element_type_ = element_type; }
   
     TypePtr DeepCopy() const override;
     std::string ToString() const override;
     std::string ToReprString() const override;
     std::string DumpText() const override;
     bool operator==(const Type &other) const override;
   
    private:
     TypePtr element_type_;
   };
   using TensorTypePtr = std::shared_ptr<TensorType>;
   
   class MS_CORE_API SparseTensorType : public Object {
    public:
     SparseTensorType() : Object(kObjectTypeSparseTensorType, kObjectTypeUndeterminedType) {}
   
     explicit SparseTensorType(const TypeId object_type) : Object(object_type, kObjectTypeUndeterminedType) {}
   
     explicit SparseTensorType(const TypePtrList &objs)
         : Object(kObjectTypeSparseTensorType, kObjectTypeUndeterminedType), elements_(objs.begin(), objs.end()) {}
   
     SparseTensorType(const TypeId object_type, const TypePtrList &objs)
         : Object(object_type, kObjectTypeUndeterminedType), elements_(objs.begin(), objs.end()) {}
   
     ~SparseTensorType() override = default;
     MS_DECLARE_PARENT(SparseTensorType, Object)
   
     enum StringType : int { kToString = 0, kDumpText, kReprString };
   
     virtual std::string GetSparseTensorTypeName() const { return "SparseTensorType"; }
     virtual size_t GetElementIndex() { return 0; }
     virtual TypePtr element_type() {
       if (elements_.empty()) {
         return nullptr;
       }
       return elements_[GetElementIndex()];
     }
     std::string ElementsDtypeStr(const StringType str_type) const;
     TypeId generic_type_id() const override { return kObjectTypeSparseTensorType; }
   
     const TypePtr operator[](size_t dim) const;
     bool operator==(const Type &other) const;
     TypePtrList elements() const { return elements_; }
   
     std::size_t size() const { return elements_.size(); }
     std::string ToString() const;
     std::string ToReprString() const;
     std::string DumpText() const;
     TypePtr DeepCopy() const;
   
    private:
     TypePtrList elements_;
   };
   using SparseTensorTypePtr = std::shared_ptr<SparseTensorType>;
   
   class MS_CORE_API RowTensorType final : public Object {
    public:
     RowTensorType() : Object(kObjectTypeRowTensorType, kObjectTypeUndeterminedType) {}
   
     explicit RowTensorType(const TypePtr &ele)
         : Object(kObjectTypeRowTensorType, kObjectTypeUndeterminedType, false), element_type_(ele) {}
   
     ~RowTensorType() override = default;
     MS_DECLARE_PARENT(RowTensorType, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeRowTensorType; }
   
     const TypePtr element() const { return element_type_; }
   
     void set_element(const TypePtr &element_type) { element_type_ = element_type; }
   
     TypePtr DeepCopy() const override;
     std::string ToString() const override;
     std::string ToReprString() const override;
     std::string DumpText() const override;
     bool operator==(const Type &other) const override;
   
    private:
     TypePtr element_type_;
   };
   using RowTensorTypePtr = std::shared_ptr<RowTensorType>;
   
   class MS_CORE_API COOTensorType final : public SparseTensorType {
    public:
     COOTensorType() : SparseTensorType(kObjectTypeCOOTensorType) {}
   
     explicit COOTensorType(const TypePtrList &obj)
         : SparseTensorType(kObjectTypeCOOTensorType, obj), elements_(obj.begin(), obj.end()) {}
   
     ~COOTensorType() override = default;
     MS_DECLARE_PARENT(COOTensorType, SparseTensorType)
   
     std::string GetSparseTensorTypeName() const override { return "COOTensor"; }
     size_t GetElementIndex() override { return 1; }
   
     TypeId generic_type_id() const override { return kObjectTypeCOOTensorType; }
     TypePtr DeepCopy() const override;
     bool operator==(const Type &other) const override;
   
    private:
     TypePtrList elements_;
   };
   using COOTensorTypePtr = std::shared_ptr<COOTensorType>;
   
   class MS_CORE_API CSRTensorType : public SparseTensorType {
    public:
     CSRTensorType() : SparseTensorType(kObjectTypeCSRTensorType) {}
   
     explicit CSRTensorType(const TypePtrList &obj)
         : SparseTensorType(kObjectTypeCSRTensorType, obj), elements_(obj.begin(), obj.end()) {}
   
     ~CSRTensorType() override = default;
     MS_DECLARE_PARENT(CSRTensorType, SparseTensorType)
   
     std::string GetSparseTensorTypeName() const override { return "CSRTensor"; }
     size_t GetElementIndex() override { return 2; }
     TypeId generic_type_id() const override { return kObjectTypeCSRTensorType; }
     TypePtr DeepCopy() const override;
     bool operator==(const Type &other) const override;
   
    private:
     TypePtrList elements_;
   };
   using CSRTensorTypePtr = std::shared_ptr<CSRTensorType>;
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_IR_DTYPE_TENSORTYPE_H_
