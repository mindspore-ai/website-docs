:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ops_depth_to_space.h:

Program Listing for File depth_to_space.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ops_depth_to_space.h>` (``include/converter/include/core/ops/depth_to_space.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_DEPTH_TO_SPACE_H_
   #define MINDSPORE_CORE_OPS_DEPTH_TO_SPACE_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   #include "mindapi/base/format.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameDepthToSpace = "DepthToSpace";
   class MIND_API DepthToSpace : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(DepthToSpace);
     DepthToSpace() : BaseOperator(kNameDepthToSpace) { InitIOName({"x"}, {"y"}); }
     void Init(const int64_t block_size, const Format &format = NCHW);
     void set_block_size(const int64_t block_size);
     int64_t get_block_size() const;
     void set_format(const Format &format);
     Format get_format() const;
   };
   
   abstract::AbstractBasePtr DepthToSpaceInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                               const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_DEPTH_TO_SPACE_H_
