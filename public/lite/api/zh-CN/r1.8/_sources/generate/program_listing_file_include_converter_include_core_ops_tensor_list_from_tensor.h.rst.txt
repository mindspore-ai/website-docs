:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ops_tensor_list_from_tensor.h:

Program Listing for File tensor_list_from_tensor.h
==================================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ops_tensor_list_from_tensor.h>` (``include/converter/include/core/ops/tensor_list_from_tensor.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_TENSOR_LIST_FROM_TENSOR_H_
   #define MINDSPORE_CORE_OPS_TENSOR_LIST_FROM_TENSOR_H_
   #include <memory>
   #include <vector>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameTensorListFromTensor = "TensorListFromTensor";
   class MIND_API TensorListFromTensor : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(TensorListFromTensor);
     TensorListFromTensor() : BaseOperator(kNameTensorListFromTensor) {}
   
     void Init(const int64_t element_dtype, const int64_t shape_type);
   
     void set_element_dtype(const int64_t element_dtype);
   
     void set_shape_type(const int64_t shape_type);
   
     int64_t get_element_dtype() const;
   
     int64_t get_shape_type() const;
   };
   abstract::AbstractBasePtr TensorListFromTensorInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                       const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_TENSOR_LIST_FROM_TENSOR_H_
