:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_runtime_include_api_status.h:

Program Listing for File status.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_runtime_include_api_status.h>` (``include/runtime/include/api/status.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #ifndef MINDSPORE_INCLUDE_API_STATUS_H
   #define MINDSPORE_INCLUDE_API_STATUS_H
   
   #include <memory>
   #include <string>
   #include <vector>
   #include <ostream>
   #include <climits>
   #include "include/api/dual_abi_helper.h"
   #include "include/api/types.h"
   
   namespace mindspore {
   enum class CompCode : uint32_t {
     kCore = 0x00000000u,
     kMD = 0x10000000u,
     kME = 0x20000000u,
     kMC = 0x30000000u,
     kLite = 0xF0000000u,
   };
   
   enum class StatusCode : uint32_t {
     kSuccess = 0,
     // Core
     kCoreFailed = kCore | 0x1,
   
     // MD
     kMDOutOfMemory = kMD | 1,
     kMDShapeMisMatch = kMD | 2,
     kMDInterrupted = kMD | 3,
     kMDNoSpace = kMD | 4,
     kMDPyFuncException = kMD | 5,
     kMDDuplicateKey = kMD | 6,
     kMDPythonInterpreterFailure = kMD | 7,
     kMDTDTPushFailure = kMD | 8,
     kMDFileNotExist = kMD | 9,
     kMDProfilingError = kMD | 10,
     kMDBoundingBoxOutOfBounds = kMD | 11,
     kMDBoundingBoxInvalidShape = kMD | 12,
     kMDSyntaxError = kMD | 13,
     kMDTimeOut = kMD | 14,
     kMDBuddySpaceFull = kMD | 15,
     kMDNetWorkError = kMD | 16,
     kMDNotImplementedYet = kMD | 17,
     // Make this error code the last one. Add new error code above it.
     kMDUnexpectedError = kMD | 127,
   
     // ME
     kMEFailed = kME | 0x1,
     kMEInvalidInput = kME | 0x2,
   
     // MC
     kMCFailed = kMC | 0x1,
     kMCDeviceError = kMC | 0x2,
     kMCInvalidInput = kMC | 0x3,
     kMCInvalidArgs = kMC | 0x4,
   
     // Lite  // Common error code, range: [-1, -100ï¼‰
     kLiteError = kLite | (0x0FFFFFFF & -1),            
     kLiteNullptr = kLite | (0x0FFFFFFF & -2),          
     kLiteParamInvalid = kLite | (0x0FFFFFFF & -3),     
     kLiteNoChange = kLite | (0x0FFFFFFF & -4),         
     kLiteSuccessExit = kLite | (0x0FFFFFFF & -5),      
     kLiteMemoryFailed = kLite | (0x0FFFFFFF & -6),     
     kLiteNotSupport = kLite | (0x0FFFFFFF & -7),       
     kLiteThreadPoolError = kLite | (0x0FFFFFFF & -8),  
     kLiteUninitializedObj = kLite | (0x0FFFFFFF & -9), 
     kLiteFileError = kLite | (0x0FFFFFFF & -10),       
     kLiteServiceDeny = kLite | (0x0FFFFFFF & -11),     
   
     // Executor error code, range: [-100,-200)
     kLiteOutOfTensorRange = kLite | (0x0FFFFFFF & -100), 
     kLiteInputTensorError = kLite | (0x0FFFFFFF & -101), 
     kLiteReentrantError = kLite | (0x0FFFFFFF & -102),   
   
     // Graph error code, range: [-200,-300)
     kLiteGraphFileError = kLite | (0x0FFFFFFF & -200), 
   
     // Node error code, range: [-300,-400)
     kLiteNotFindOp = kLite | (0x0FFFFFFF & -300),        
     kLiteInvalidOpName = kLite | (0x0FFFFFFF & -301),    
     kLiteInvalidOpAttr = kLite | (0x0FFFFFFF & -302),    
     kLiteOpExecuteFailure = kLite | (0x0FFFFFFF & -303), 
   
     // Tensor error code, range: [-400,-500)
     kLiteFormatError = kLite | (0x0FFFFFFF & -400), 
   
     // InferShape error code, range: [-500,-600)
     kLiteInferError = kLite | (0x0FFFFFFF & -500),   
     kLiteInferInvalid = kLite | (0x0FFFFFFF & -501), 
   
     // User input param error code, range: [-600, 700)
     kLiteInputParamInvalid = kLite | (0x0FFFFFFF & -600), 
   };
   
   class MS_API Status {
    public:
     Status();
     inline Status(enum StatusCode status_code, const std::string &status_msg = "");  // NOLINT(runtime/explicit)
     inline Status(const StatusCode code, int line_of_code, const char *file_name, const std::string &extra = "");
   
     ~Status() = default;
   
     enum StatusCode StatusCode() const;
     inline std::string ToString() const;
   
     int GetLineOfCode() const;
     inline std::string GetErrDescription() const;
     inline std::string SetErrDescription(const std::string &err_description);
   
     MS_API friend std::ostream &operator<<(std::ostream &os, const Status &s);
   
     bool operator==(const Status &other) const;
     bool operator==(enum StatusCode other_code) const;
     bool operator!=(const Status &other) const;
     bool operator!=(enum StatusCode other_code) const;
   
     explicit operator bool() const;
     explicit operator int() const;
   
     static Status OK();
   
     bool IsOk() const;
   
     bool IsError() const;
   
     static inline std::string CodeAsString(enum StatusCode c);
   
    private:
     // api without std::string
     Status(enum StatusCode status_code, const std::vector<char> &status_msg);
     Status(enum StatusCode code, int line_of_code, const char *file_name, const std::vector<char> &extra);
     std::vector<char> ToCString() const;
     std::vector<char> GetErrDescriptionChar() const;
     std::vector<char> SetErrDescription(const std::vector<char> &err_description);
     static std::vector<char> CodeAsCString(enum StatusCode c);
   
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   Status::Status(enum StatusCode status_code, const std::string &status_msg)
       : Status(status_code, StringToChar(status_msg)) {}
   Status::Status(const enum StatusCode code, int line_of_code, const char *file_name, const std::string &extra)
       : Status(code, line_of_code, file_name, StringToChar(extra)) {}
   std::string Status::ToString() const { return CharToString(ToCString()); }
   std::string Status::GetErrDescription() const { return CharToString(GetErrDescriptionChar()); }
   std::string Status::SetErrDescription(const std::string &err_description) {
     return CharToString(SetErrDescription(StringToChar(err_description)));
   }
   std::string Status::CodeAsString(enum StatusCode c) { return CharToString(CodeAsCString(c)); }
   }  // namespace mindspore
   #endif  // MINDSPORE_INCLUDE_API_STATUS_H
