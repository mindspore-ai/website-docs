:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_runtime_include_dataset_vision.h:

Program Listing for File vision.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_runtime_include_dataset_vision.h>` (``include/runtime/include/dataset/vision.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CCSRC_MINDDATA_DATASET_INCLUDE_DATASET_VISION_H_
   #define MINDSPORE_CCSRC_MINDDATA_DATASET_INCLUDE_DATASET_VISION_H_
   
   #include <map>
   #include <memory>
   #include <string>
   #include <utility>
   #include <vector>
   
   #include "include/api/dual_abi_helper.h"
   #include "include/api/status.h"
   #include "include/dataset/constants.h"
   #include "include/dataset/transforms.h"
   #include "include/dataset/vision_lite.h"
   
   namespace mindspore {
   namespace dataset {
   class TensorOperation;
   
   // Transform operations for performing computer vision.
   namespace vision {
   class MS_API AdjustGamma final : public TensorTransform {
    public:
     explicit AdjustGamma(float gamma, float gain = 1);
   
     ~AdjustGamma() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API AutoAugment final : public TensorTransform {
    public:
     explicit AutoAugment(AutoAugmentPolicy policy = AutoAugmentPolicy::kImageNet,
                          InterpolationMode interpolation = InterpolationMode::kNearestNeighbour,
                          const std::vector<uint8_t> &fill_value = {0, 0, 0});
   
     ~AutoAugment() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API AutoContrast final : public TensorTransform {
    public:
     explicit AutoContrast(float cutoff = 0.0, const std::vector<uint32_t> &ignore = {});
   
     ~AutoContrast() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API BoundingBoxAugment final : public TensorTransform {
    public:
     explicit BoundingBoxAugment(TensorTransform *transform, float ratio = 0.3);
   
     explicit BoundingBoxAugment(const std::shared_ptr<TensorTransform> &transform, float ratio = 0.3);
   
     explicit BoundingBoxAugment(const std::reference_wrapper<TensorTransform> &transform, float ratio = 0.3);
   
     ~BoundingBoxAugment() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API ConvertColor final : public TensorTransform {
    public:
     explicit ConvertColor(ConvertMode convert_mode);
   
     ~ConvertColor() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API CutMixBatch final : public TensorTransform {
    public:
     explicit CutMixBatch(ImageBatchFormat image_batch_format, float alpha = 1.0, float prob = 1.0);
   
     ~CutMixBatch() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API CutOut final : public TensorTransform {
    public:
     explicit CutOut(int32_t length, int32_t num_patches = 1);
   
     ~CutOut() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API Equalize final : public TensorTransform {
    public:
     Equalize();
   
     ~Equalize() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   };
   
   Status MS_API GetImageNumChannels(const mindspore::MSTensor &image, dsize_t *channels);
   
   Status MS_API GetImageSize(const mindspore::MSTensor &image, std::vector<dsize_t> *size);
   
   class MS_API HorizontalFlip final : public TensorTransform {
    public:
     HorizontalFlip();
   
     ~HorizontalFlip() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   };
   
   class MS_API Invert final : public TensorTransform {
    public:
     Invert();
   
     ~Invert() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   };
   
   class MS_API MixUpBatch final : public TensorTransform {
    public:
     explicit MixUpBatch(float alpha = 1);
   
     ~MixUpBatch() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API NormalizePad final : public TensorTransform {
    public:
     NormalizePad(const std::vector<float> &mean, const std::vector<float> &std, const std::string &dtype = "float32")
         : NormalizePad(mean, std, StringToChar(dtype)) {}
   
     NormalizePad(const std::vector<float> &mean, const std::vector<float> &std, const std::vector<char> &dtype);
   
     ~NormalizePad() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API Pad final : public TensorTransform {
    public:
     explicit Pad(const std::vector<int32_t> &padding, const std::vector<uint8_t> &fill_value = {0},
                  BorderType padding_mode = BorderType::kConstant);
   
     ~Pad() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API PadToSize final : public TensorTransform {
    public:
     explicit PadToSize(const std::vector<int32_t> &size, const std::vector<int32_t> &offset = {},
                        const std::vector<uint8_t> &fill_value = {0}, BorderType padding_mode = BorderType::kConstant);
   
     ~PadToSize() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomAutoContrast final : public TensorTransform {
    public:
     explicit RandomAutoContrast(float cutoff = 0.0, const std::vector<uint32_t> &ignore = {}, float prob = 0.5);
   
     ~RandomAutoContrast() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomAdjustSharpness final : public TensorTransform {
    public:
     explicit RandomAdjustSharpness(float degree, float prob = 0.5);
   
     ~RandomAdjustSharpness() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomColor final : public TensorTransform {
    public:
     RandomColor(float t_lb, float t_ub);
   
     ~RandomColor() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomColorAdjust final : public TensorTransform {
    public:
     explicit RandomColorAdjust(const std::vector<float> &brightness = {1.0, 1.0},
                                const std::vector<float> &contrast = {1.0, 1.0},
                                const std::vector<float> &saturation = {1.0, 1.0},
                                const std::vector<float> &hue = {0.0, 0.0});
   
     ~RandomColorAdjust() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomCrop final : public TensorTransform {
    public:
     explicit RandomCrop(const std::vector<int32_t> &size, const std::vector<int32_t> &padding = {0, 0, 0, 0},
                         bool pad_if_needed = false, const std::vector<uint8_t> &fill_value = {0, 0, 0},
                         BorderType padding_mode = BorderType::kConstant);
   
     ~RandomCrop() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomCropDecodeResize final : public TensorTransform {
    public:
     explicit RandomCropDecodeResize(const std::vector<int32_t> &size, const std::vector<float> &scale = {0.08, 1.0},
                                     const std::vector<float> &ratio = {3. / 4, 4. / 3},
                                     InterpolationMode interpolation = InterpolationMode::kLinear,
                                     int32_t max_attempts = 10);
   
     ~RandomCropDecodeResize() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomCropWithBBox final : public TensorTransform {
    public:
     explicit RandomCropWithBBox(const std::vector<int32_t> &size, const std::vector<int32_t> &padding = {0, 0, 0, 0},
                                 bool pad_if_needed = false, const std::vector<uint8_t> &fill_value = {0, 0, 0},
                                 BorderType padding_mode = BorderType::kConstant);
   
     ~RandomCropWithBBox() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomEqualize final : public TensorTransform {
    public:
     explicit RandomEqualize(float prob = 0.5);
   
     ~RandomEqualize() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomHorizontalFlip final : public TensorTransform {
    public:
     explicit RandomHorizontalFlip(float prob = 0.5);
   
     ~RandomHorizontalFlip() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomHorizontalFlipWithBBox final : public TensorTransform {
    public:
     explicit RandomHorizontalFlipWithBBox(float prob = 0.5);
   
     ~RandomHorizontalFlipWithBBox() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomInvert final : public TensorTransform {
    public:
     explicit RandomInvert(float prob = 0.5);
   
     ~RandomInvert() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomLighting final : public TensorTransform {
    public:
     explicit RandomLighting(float alpha = 0.05);
   
     ~RandomLighting() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomPosterize final : public TensorTransform {
    public:
     explicit RandomPosterize(const std::vector<uint8_t> &bit_range = {4, 8});
   
     ~RandomPosterize() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomResize final : public TensorTransform {
    public:
     explicit RandomResize(const std::vector<int32_t> &size);
   
     ~RandomResize() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomResizeWithBBox final : public TensorTransform {
    public:
     explicit RandomResizeWithBBox(const std::vector<int32_t> &size);
   
     ~RandomResizeWithBBox() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomResizedCrop final : public TensorTransform {
    public:
     explicit RandomResizedCrop(const std::vector<int32_t> &size, const std::vector<float> &scale = {0.08, 1.0},
                                const std::vector<float> &ratio = {3. / 4., 4. / 3.},
                                InterpolationMode interpolation = InterpolationMode::kLinear, int32_t max_attempts = 10);
   
     ~RandomResizedCrop() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomResizedCropWithBBox final : public TensorTransform {
    public:
     explicit RandomResizedCropWithBBox(const std::vector<int32_t> &size, const std::vector<float> &scale = {0.08, 1.0},
                                        const std::vector<float> &ratio = {3. / 4., 4. / 3.},
                                        InterpolationMode interpolation = InterpolationMode::kLinear,
                                        int32_t max_attempts = 10);
   
     ~RandomResizedCropWithBBox() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomRotation final : public TensorTransform {
    public:
     explicit RandomRotation(const std::vector<float> &degrees,
                             InterpolationMode resample = InterpolationMode::kNearestNeighbour, bool expand = false,
                             const std::vector<float> &center = {}, const std::vector<uint8_t> &fill_value = {0, 0, 0});
   
     ~RandomRotation() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomSelectSubpolicy final : public TensorTransform {
    public:
     explicit RandomSelectSubpolicy(const std::vector<std::vector<std::pair<TensorTransform *, double>>> &policy);
   
     explicit RandomSelectSubpolicy(
       const std::vector<std::vector<std::pair<std::shared_ptr<TensorTransform>, double>>> &policy);
   
     explicit RandomSelectSubpolicy(
       const std::vector<std::vector<std::pair<std::reference_wrapper<TensorTransform>, double>>> &policy);
   
     ~RandomSelectSubpolicy() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomSharpness final : public TensorTransform {
    public:
     explicit RandomSharpness(const std::vector<float> &degrees = {0.1, 1.9});
   
     ~RandomSharpness() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomSolarize final : public TensorTransform {
    public:
     explicit RandomSolarize(const std::vector<uint8_t> &threshold = {0, 255});
   
     ~RandomSolarize() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomVerticalFlip final : public TensorTransform {
    public:
     explicit RandomVerticalFlip(float prob = 0.5);
   
     ~RandomVerticalFlip() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RandomVerticalFlipWithBBox final : public TensorTransform {
    public:
     explicit RandomVerticalFlipWithBBox(float prob = 0.5);
   
     ~RandomVerticalFlipWithBBox() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API Rescale final : public TensorTransform {
    public:
     Rescale(float rescale, float shift);
   
     ~Rescale() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API ResizeWithBBox final : public TensorTransform {
    public:
     explicit ResizeWithBBox(const std::vector<int32_t> &size,
                             InterpolationMode interpolation = InterpolationMode::kLinear);
   
     ~ResizeWithBBox() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API RGBA2BGR final : public TensorTransform {
    public:
     RGBA2BGR();
   
     ~RGBA2BGR() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   };
   
   class MS_API RGBA2RGB final : public TensorTransform {
    public:
     RGBA2RGB();
   
     ~RGBA2RGB() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   };
   
   class MS_API SlicePatches final : public TensorTransform {
    public:
     explicit SlicePatches(int32_t num_height = 1, int32_t num_width = 1, SliceMode slice_mode = SliceMode::kPad,
                           uint8_t fill_value = 0);
   
     ~SlicePatches() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API SwapRedBlue final : public TensorTransform {
    public:
     SwapRedBlue();
   
     ~SwapRedBlue() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   };
   
   class MS_API UniformAugment final : public TensorTransform {
    public:
     explicit UniformAugment(const std::vector<TensorTransform *> &transforms, int32_t num_ops = 2);
   
     explicit UniformAugment(const std::vector<std::shared_ptr<TensorTransform>> &transforms, int32_t num_ops = 2);
   
     explicit UniformAugment(const std::vector<std::reference_wrapper<TensorTransform>> &transforms, int32_t num_ops = 2);
   
     ~UniformAugment() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   
    private:
     struct Data;
     std::shared_ptr<Data> data_;
   };
   
   class MS_API VerticalFlip final : public TensorTransform {
    public:
     VerticalFlip();
   
     ~VerticalFlip() = default;
   
    protected:
     std::shared_ptr<TensorOperation> Parse() override;
   };
   }  // namespace vision
   }  // namespace dataset
   }  // namespace mindspore
   #endif  // MINDSPORE_CCSRC_MINDDATA_DATASET_INCLUDE_DATASET_VISION_H_
