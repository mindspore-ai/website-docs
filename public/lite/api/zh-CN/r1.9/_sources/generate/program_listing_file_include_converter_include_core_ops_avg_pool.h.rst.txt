:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ops_avg_pool.h:

Program Listing for File avg_pool.h
===================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ops_avg_pool.h>` (``include/converter/include/core/ops/avg_pool.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_AVG_POOL_H_
   #define MINDSPORE_CORE_OPS_AVG_POOL_H_
   
   #include <map>
   #include <vector>
   #include <string>
   #include <memory>
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   #include "mindapi/base/format.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameAvgPool = "AvgPool";
   class MIND_API AvgPool : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(AvgPool);
     AvgPool() : BaseOperator(kNameAvgPool) { InitIOName({"x"}, {"output"}); }
     explicit AvgPool(const std::string k_name) : BaseOperator(k_name) { InitIOName({"x"}, {"output"}); }
     void Init(const std::vector<int64_t> &kernel_size = {1}, const std::vector<int64_t> &stride = {1},
               const PadMode &pad_mode = VALID, const Format &format = NCHW,
               const std::vector<int64_t> &pad = {0, 0, 0, 0}, const RoundMode &round_mode = FLOOR);
     void set_pad_mode(const PadMode &pad_mode);
     void set_kernel_size(const std::vector<int64_t> &kernel_size);
     void set_strides(const std::vector<int64_t> &strides);
     void set_format(const Format &format);
     void set_pad(const std::vector<int64_t> &pad);
     void set_round_mode(const RoundMode &round_mode);
   
     std::vector<int64_t> get_kernel_size() const;
     std::vector<int64_t> get_strides() const;
     PadMode get_pad_mode() const;
     Format get_format() const;
     std::vector<int64_t> get_pad() const;
     RoundMode get_round_mode() const;
   };
   
   abstract::AbstractBasePtr AvgPoolInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                          const std::vector<abstract::AbstractBasePtr> &input_args);
   using kPrimAvgPoolPtr = std::shared_ptr<AvgPool>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_AVG_POOL_H_
