:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ir_dtype.h:

Program Listing for File dtype.h
================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ir_dtype.h>` (``include/converter/include/core/ir/dtype.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_IR_DTYPE_H_
   #define MINDSPORE_CORE_IR_DTYPE_H_
   
   #include <iostream>
   #include <memory>
   #include <sstream>
   #include <string>
   #include <vector>
   #include <unordered_map>
   #include "base/base.h"
   #include "ir/named.h"
   
   #include "ir/dtype/type.h"
   #include "ir/dtype/number.h"
   #include "ir/dtype/container.h"
   #include "ir/dtype/empty.h"
   #include "ir/dtype/tensor_type.h"
   #include "ir/dtype/ref.h"
   #include "ir/dtype/monad_type.h"
   #include "utils/ms_utils.h"
   
   /* namespace to support intermediate representation definition */
   namespace mindspore {
   MS_CORE_API TypePtr TypeIdToType(TypeId id);
   
   MS_CORE_API std::string TypeIdToString(TypeId id, bool to_lower = false);
   
   class MS_CORE_API String final : public Object {
    public:
     String() : Object(kObjectTypeString, false) {}
   
     ~String() override = default;
     MS_DECLARE_PARENT(String, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeString; }
   
     TypePtr DeepCopy() const override { return std::make_shared<String>(); }
     std::string ToString() const override { return std::string("String"); }
     std::string ToReprString() const override { return "string_"; }
     std::string DumpText() const override { return "String"; }
   };
   using StringPtr = std::shared_ptr<String>;
   
   class MS_CORE_API Keyword final : public Object {
    public:
     Keyword() : Object(kObjectTypeKeyword, false), key_(""), value_(nullptr) {}
   
     Keyword(const std::string &key, const TypePtr &value) : Object(kObjectTypeKeyword, false), key_(key), value_(value) {}
   
     ~Keyword() override = default;
     MS_DECLARE_PARENT(Keyword, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeKeyword; }
     TypePtr DeepCopy() const override;
   
     std::string ToString() const override;
     std::string DumpText() const override;
     bool operator==(const Type &other) const override;
   
     std::string GetKey() const { return key_; }
   
     TypePtr GetValue() const { return value_; }
   
    private:
     std::string key_;
     TypePtr value_;
   };
   using KeywordPtr = std::shared_ptr<Keyword>;
   
   class MS_CORE_API Slice final : public Object {
    public:
     Slice() : Object(kObjectTypeSlice), start_(nullptr), stop_(nullptr), step_(nullptr) {}
   
     Slice(const TypePtr &start, const TypePtr &stop, const TypePtr &step)
         : Object(kObjectTypeSlice, false), start_(start), stop_(stop), step_(step) {}
   
     ~Slice() override = default;
     MS_DECLARE_PARENT(Slice, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeSlice; }
     TypePtr DeepCopy() const override;
   
     std::string ToString() const override;
     std::string DumpText() const override;
     bool operator==(const Type &other) const override;
   
     TypePtr get_start() const { return start_; }
   
     TypePtr get_stop() const { return stop_; }
   
     TypePtr get_step() const { return step_; }
   
    private:
     TypePtr start_;
     TypePtr stop_;
     TypePtr step_;
   };
   using SlicePtr = std::shared_ptr<Slice>;
   
   class MS_CORE_API Function final : public Object {
    public:
     Function();
   
     Function(const std::vector<TypePtr> &args, const TypePtr retval);
   
     ~Function() override = default;
     MS_DECLARE_PARENT(Function, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeFunction; }
   
     bool IsTransparent() const { return (args_.empty()) && (retval_ == nullptr); }
   
     const std::vector<TypePtr> &args() const { return args_; }
   
     const TypePtr &retval() const { return retval_; }
   
     TypePtr DeepCopy() const override;
     bool operator==(const Type &other) const override;
     std::string ToString() const override;
     std::string ToReprString() const override { return "function"; }
   
    private:
     std::vector<TypePtr> args_;
     TypePtr retval_;
   };
   using FunctionPtr = std::shared_ptr<Function>;
   
   class MS_CORE_API JTagged final : public Object {
    public:
     JTagged() : Object(kObjectTypeJTagged) {}
   
     explicit JTagged(const TypePtr &subtype) : Object(kObjectTypeJTagged, false), subtype_(subtype) {}
   
     ~JTagged() override = default;
     MS_DECLARE_PARENT(JTagged, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeJTagged; }
   
     TypePtr DeepCopy() const override;
     std::string ToString() const override;
     std::string DumpText() const override;
   
    private:
     TypePtr subtype_;
   };
   using JTaggedPtr = std::shared_ptr<JTagged>;
   
   class MS_CORE_API SymbolicKeyType final : public Object {
    public:
     SymbolicKeyType() : Object(kObjectTypeSymbolicKeyType) {}
   
     ~SymbolicKeyType() override = default;
     MS_DECLARE_PARENT(SymbolicKeyType, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeSymbolicKeyType; }
     TypePtr DeepCopy() const override { return std::make_shared<SymbolicKeyType>(); }
     std::string ToReprString() const override { return "symbolic_key"; }
     std::string DumpText() const override { return "SymType"; }
   };
   
   class MS_CORE_API EnvType final : public Object {
    public:
     EnvType() : Object(kObjectTypeEnvType) {}
   
     ~EnvType() override = default;
     MS_DECLARE_PARENT(EnvType, Object)
   
     TypePtr DeepCopy() const override { return std::make_shared<EnvType>(); }
     std::string ToReprString() const override { return "env_type"; }
     std::string DumpText() const override { return "EnvType"; }
   };
   using EnvTypePtr = std::shared_ptr<EnvType>;
   
   class MS_CORE_API TypeType final : public Type {
    public:
     TypeType() : Type(kMetaTypeTypeType) {}
   
     ~TypeType() override = default;
     MS_DECLARE_PARENT(TypeType, Type)
   
     TypeId generic_type_id() const override { return kMetaTypeTypeType; }
     TypePtr DeepCopy() const override { return std::make_shared<TypeType>(); }
     std::string ToReprString() const override { return "type_type"; }
     std::string DumpText() const override { return "TypeType"; }
   };
   using TypeTypePtr = std::shared_ptr<TypeType>;
   
   class MS_CORE_API Problem final : public Type {
    public:
     Problem() : Type(kMetaTypeProblem), kind_(Named("unknown")) {}
   
     explicit Problem(const Named &kind) : Type(kMetaTypeProblem), kind_(kind) {}
   
     ~Problem() override = default;
     MS_DECLARE_PARENT(Problem, Type)
   
     TypeId generic_type_id() const override { return kMetaTypeProblem; }
     TypePtr DeepCopy() const override { return std::make_shared<Problem>(); }
     std::string ToString() const override { return kind_.name(); }
     std::string DumpText() const override { return "ProblemType"; }
   
     friend std::ostream &operator<<(std::ostream &os, const std::shared_ptr<Problem> problem);
   
    private:
     Named kind_;
   };
   using ProblemPtr = std::shared_ptr<Problem>;
   
   class MS_CORE_API MsClassType final : public Type {
    public:
     MsClassType() : Type(kObjectTypeClass) {}
   
     ~MsClassType() override = default;
     MS_DECLARE_PARENT(MsClassType, Type)
   
     TypeId generic_type_id() const override { return kObjectTypeClass; }
     TypePtr DeepCopy() const override { return std::make_shared<MsClassType>(); }
     std::string DumpText() const override { return "MsClassType"; }
   };
   using MsClassTypePtr = std::shared_ptr<MsClassType>;
   
   class MS_CORE_API External final : public Type {
    public:
     External() : Type(kMetaTypeExternal) {}
   
     ~External() override = default;
     MS_DECLARE_PARENT(External, Type)
   
     TypeId generic_type_id() const override { return kMetaTypeExternal; }
     TypePtr DeepCopy() const override { return std::make_shared<External>(); }
     std::string DumpText() const override { return "ExternalType"; }
   };
   using ExternalPtr = std::shared_ptr<External>;
   
   // helper template
   template <class T>
   TypePtr Clone(const T &t) {
     return t.Clone();
   }
   
   MS_CORE_API TypePtr StringToType(const std::string &type_name);
   
   MS_CORE_API TypeId StringToTypeId(const std::string &type_name);
   
   MS_CORE_API bool IsIdentidityOrSubclass(TypePtr const &x, TypePtr const &base_type);
   
   MS_CORE_API bool IsSubType(TypePtr const &t1, TypePtr const &t2 = nullptr);
   
   GVAR_DEF(TypePtr, kTypeExternal, std::make_shared<External>());
   GVAR_DEF(TypePtr, kTypeEnv, std::make_shared<EnvType>());
   GVAR_DEF(TypePtr, kTypeType, std::make_shared<TypeType>());
   GVAR_DEF(TypePtr, kString, std::make_shared<String>());
   GVAR_DEF(TypePtr, kList, std::make_shared<List>());
   GVAR_DEF(TypePtr, kTuple, std::make_shared<Tuple>());
   GVAR_DEF(TypePtr, kDict, std::make_shared<Dictionary>());
   GVAR_DEF(TypePtr, kSlice, std::make_shared<Slice>());
   GVAR_DEF(TypePtr, kKeyword, std::make_shared<Keyword>());
   GVAR_DEF(TypePtr, kTensorType, std::make_shared<TensorType>());
   GVAR_DEF(TypePtr, kTensorTypeFP16, std::make_shared<TensorType>(std::make_shared<Float>(16)));
   GVAR_DEF(TypePtr, kTensorTypeFP32, std::make_shared<TensorType>(std::make_shared<Float>(32)));
   GVAR_DEF(TypePtr, kTensorTypeFP64, std::make_shared<TensorType>(std::make_shared<Float>(64)));
   GVAR_DEF(TypePtr, kCSRTensorType, std::make_shared<CSRTensorType>());
   GVAR_DEF(TypePtr, kCOOTensorType, std::make_shared<COOTensorType>());
   GVAR_DEF(TypePtr, kRowTensorType, std::make_shared<RowTensorType>());
   GVAR_DEF(TypePtr, kMapTensorType, std::make_shared<MapTensorType>());
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_IR_DTYPE_H_
