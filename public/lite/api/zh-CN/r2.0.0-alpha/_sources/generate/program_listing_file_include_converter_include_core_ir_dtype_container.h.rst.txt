:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ir_dtype_container.h:

Program Listing for File container.h
====================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ir_dtype_container.h>` (``include/converter/include/core/ir/dtype/container.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_IR_DTYPE_CONTAINER_H_
   #define MINDSPORE_CORE_IR_DTYPE_CONTAINER_H_
   
   #include <cstddef>
   #include <iostream>
   #include <initializer_list>
   #include <map>
   #include <memory>
   #include <utility>
   #include <sstream>
   #include <string>
   #include <vector>
   #include <type_traits>
   #include <algorithm>
   
   #include "utils/hash_map.h"
   #include "base/base.h"
   #include "ir/named.h"
   #include "ir/dtype/type.h"
   
   namespace mindspore {
   class MS_CORE_API List final : public Object {
    public:
     List() : Object(kObjectTypeList) {}
   
     List(const std::initializer_list<TypePtr> &objs)
         : Object(kObjectTypeList, false), elements_(objs.begin(), objs.end()) {}
   
     explicit List(const TypePtrList &obj) : Object(kObjectTypeList, false), elements_(obj) {}
   
     ~List() override {}
     MS_DECLARE_PARENT(List, Object)
   
     
     const TypePtr operator[](std::size_t dim) const;
   
     TypeId generic_type_id() const override { return kObjectTypeList; }
     TypePtr DeepCopy() const override;
     bool operator==(const Type &other) const override;
     size_t hash() const override;
   
     std::size_t size() const { return elements_.size(); }
   
     TypePtrList elements() const { return elements_; }
     std::string ToReprString() const override { return "list_"; }
     std::string ToString() const override { return DumpContent(false); }
     std::string DumpText() const override { return DumpContent(true); };
   
     bool dynamic_len() const { return dynamic_len_; }
   
     void set_dynamic_len(bool dynamic_len) { dynamic_len_ = dynamic_len; }
   
     TypePtr dynamic_element_type() const;
   
     void set_dynamic_element_type(TypePtr dynamic_element_type);
   
    private:
     std::string DumpContent(bool is_dumptext) const;
     TypePtrList elements_;
     bool dynamic_len_ = false;
     TypePtr dynamic_element_type_ = nullptr;
   };
   using ListPtr = std::shared_ptr<List>;
   
   class MS_CORE_API Tuple final : public Object {
    public:
     Tuple() : Object(kObjectTypeTuple) {}
   
     Tuple(const std::initializer_list<TypePtr> &objs)
         : Object(kObjectTypeTuple, false), elements_(objs.begin(), objs.end()) {}
   
     explicit Tuple(const TypePtrList &objs) : Object(kObjectTypeTuple, false), elements_(objs.begin(), objs.end()) {}
   
     ~Tuple() override {}
     MS_DECLARE_PARENT(Tuple, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeTuple; }
     TypePtr DeepCopy() const override;
     std::string ToReprString() const override { return "tuple_"; }
     std::string ToString() const override { return DumpContent(false); }
     std::string DumpText() const override { return DumpContent(true); }
   
     const TypePtr operator[](std::size_t dim) const;
   
     bool operator==(const Type &other) const override;
   
     size_t hash() const override;
   
     TypePtrList elements() const { return elements_; }
   
     std::size_t size() const { return elements_.size(); }
   
     bool dynamic_len() const { return dynamic_len_; }
   
     void set_dynamic_len(bool dynamic_len) { dynamic_len_ = dynamic_len; }
   
     TypePtr dynamic_element_type() const;
   
     void set_dynamic_element_type(TypePtr dynamic_element_type);
   
    private:
     std::string DumpContent(bool is_dumptext) const;
     TypePtrList elements_;
     bool dynamic_len_ = false;
     TypePtr dynamic_element_type_ = nullptr;
   };
   using TuplePtr = std::shared_ptr<Tuple>;
   
   class MS_CORE_API Dictionary final : public Object {
    public:
     Dictionary() : Object(kObjectTypeDictionary) {}
   
     explicit Dictionary(const std::vector<std::pair<TypePtr, TypePtr>> &key_values)
         : Object(kObjectTypeDictionary, false), key_values_(key_values) {}
   
     ~Dictionary() override = default;
     MS_DECLARE_PARENT(Dictionary, Object)
   
     TypeId generic_type_id() const override { return kObjectTypeDictionary; }
     bool operator==(const Type &other) const override;
     size_t hash() const override;
     TypePtr DeepCopy() const override;
     std::string ToString() const override { return DumpContent(false); }
     std::string DumpText() const override { return DumpContent(true); }
   
    private:
     std::string DumpContent(bool) const;
     std::vector<std::pair<TypePtr, TypePtr>> key_values_;
   };
   using DictionaryPtr = std::shared_ptr<Dictionary>;
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_IR_DTYPE_CONTAINER_H_
