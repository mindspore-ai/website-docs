:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_core_ir_dtype_number.h:

Program Listing for File number.h
=================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_core_ir_dtype_number.h>` (``include/converter/include/core/ir/dtype/number.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_IR_DTYPE_NUMBER_H_
   #define MINDSPORE_CORE_IR_DTYPE_NUMBER_H_
   
   #include <map>
   #include <memory>
   #include <sstream>
   #include <string>
   
   #include "utils/hash_map.h"
   #include "base/base.h"
   #include "ir/named.h"
   #include "ir/dtype/type.h"
   
   namespace mindspore {
   class MS_CORE_API Number : public Object {
    public:
     Number() : Object(kObjectTypeNumber), number_type_(kObjectTypeNumber), nbits_(0) {}
   
     Number(const TypeId number_type, const int nbits, bool is_generic = true)
         : Object(kObjectTypeNumber, is_generic), number_type_(number_type), nbits_(nbits) {}
   
     ~Number() override = default;
     MS_DECLARE_PARENT(Number, Object)
   
     
     int nbits() const { return nbits_; }
   
     TypeId number_type() const override { return number_type_; }
     TypeId type_id() const override { return number_type_; }
     TypeId generic_type_id() const override { return kObjectTypeNumber; }
     bool operator==(const Type &other) const override;
     size_t hash() const override;
     TypePtr DeepCopy() const override { return std::make_shared<Number>(); }
     std::string ToString() const override { return "Number"; }
     std::string ToReprString() const override { return "number"; }
     std::string DumpText() const override { return "Number"; }
   
     std::string GetTypeName(const std::string &type_name) const {
       std::ostringstream oss;
       oss << type_name;
       if (nbits() != 0) {
         oss << nbits();
       }
       return oss.str();
     }
   
    private:
     const TypeId number_type_;
     const int nbits_;
   };
   
   using NumberPtr = std::shared_ptr<Number>;
   
   // Bool
   class MS_CORE_API Bool : public Number {
    public:
     Bool() : Number(kNumberTypeBool, 8) {}
   
     ~Bool() override = default;
     MS_DECLARE_PARENT(Bool, Number)
   
     TypeId generic_type_id() const override { return kNumberTypeBool; }
     TypePtr DeepCopy() const override { return std::make_shared<Bool>(); }
     std::string ToString() const override { return "Bool"; }
     std::string ToReprString() const override { return "bool_"; }
     std::string DumpText() const override { return "Bool"; }
   };
   
   // Int
   class MS_CORE_API Int : public Number {
    public:
     Int() : Number(kNumberTypeInt, 0) {}
   
     explicit Int(const int nbits);
   
     ~Int() override = default;
     MS_DECLARE_PARENT(Int, Number)
   
     TypeId generic_type_id() const override { return kNumberTypeInt; }
     TypePtr DeepCopy() const override {
       if (nbits() == 0) {
         return std::make_shared<Int>();
       }
       return std::make_shared<Int>(nbits());
     }
   
     std::string ToString() const override { return GetTypeName("Int"); }
     std::string ToReprString() const override { return nbits() == 0 ? "int_" : GetTypeName("int"); }
     std::string DumpText() const override {
       return nbits() == 0 ? std::string("Int") : std::string("I") + std::to_string(nbits());
     }
   };
   
   // UInt
   class MS_CORE_API UInt : public Number {
    public:
     UInt() : Number(kNumberTypeUInt, 0) {}
   
     explicit UInt(const int nbits);
   
     TypeId generic_type_id() const override { return kNumberTypeUInt; }
   
     ~UInt() override {}
     MS_DECLARE_PARENT(UInt, Number)
   
     TypePtr DeepCopy() const override {
       if (nbits() == 0) {
         return std::make_shared<UInt>();
       }
       return std::make_shared<UInt>(nbits());
     }
   
     std::string ToString() const override { return GetTypeName("UInt"); }
     std::string ToReprString() const override { return GetTypeName("uint"); }
     std::string DumpText() const override {
       return nbits() == 0 ? std::string("UInt") : std::string("U") + std::to_string(nbits());
     }
   };
   
   // Float
   class MS_CORE_API Float : public Number {
    public:
     Float() : Number(kNumberTypeFloat, 0) {}
   
     explicit Float(const int nbits);
   
     ~Float() override {}
     MS_DECLARE_PARENT(Float, Number)
   
     TypeId generic_type_id() const override { return kNumberTypeFloat; }
     TypePtr DeepCopy() const override {
       if (nbits() == 0) {
         return std::make_shared<Float>();
       }
       return std::make_shared<Float>(nbits());
     }
   
     std::string ToString() const override { return GetTypeName("Float"); }
     std::string ToReprString() const override { return nbits() == 0 ? "float_" : GetTypeName("float"); }
     std::string DumpText() const override {
       return nbits() == 0 ? std::string("Float") : std::string("F") + std::to_string(nbits());
     }
   };
   
   // Complex
   class MS_CORE_API Complex : public Number {
    public:
     Complex() : Number(kNumberTypeComplex, 0) {}
   
     explicit Complex(const int nbits);
   
     ~Complex() override {}
     MS_DECLARE_PARENT(Complex, Number)
   
     TypeId generic_type_id() const override { return kNumberTypeComplex; }
     TypePtr DeepCopy() const override {
       if (nbits() == 0) {
         return std::make_shared<Complex>();
       }
       return std::make_shared<Complex>(nbits());
     }
   
     std::string ToString() const override { return GetTypeName("Complex"); }
     std::string ToReprString() const override { return GetTypeName("complex"); }
     std::string DumpText() const override { return std::string("Complex") + std::to_string(nbits()); }
   };
   
   GVAR_DEF(TypePtr, kBool, std::make_shared<Bool>());
   GVAR_DEF(TypePtr, kInt8, std::make_shared<Int>(static_cast<int>(BitsNum::eBits8)));
   GVAR_DEF(TypePtr, kInt16, std::make_shared<Int>(static_cast<int>(BitsNum::eBits16)));
   GVAR_DEF(TypePtr, kInt32, std::make_shared<Int>(static_cast<int>(BitsNum::eBits32)));
   GVAR_DEF(TypePtr, kInt64, std::make_shared<Int>(static_cast<int>(BitsNum::eBits64)));
   GVAR_DEF(TypePtr, kUInt8, std::make_shared<UInt>(static_cast<int>(BitsNum::eBits8)));
   GVAR_DEF(TypePtr, kUInt16, std::make_shared<UInt>(static_cast<int>(BitsNum::eBits16)));
   GVAR_DEF(TypePtr, kUInt32, std::make_shared<UInt>(static_cast<int>(BitsNum::eBits32)));
   GVAR_DEF(TypePtr, kUInt64, std::make_shared<UInt>(static_cast<int>(BitsNum::eBits64)));
   GVAR_DEF(TypePtr, kFloat16, std::make_shared<Float>(static_cast<int>(BitsNum::eBits16)));
   GVAR_DEF(TypePtr, kFloat32, std::make_shared<Float>(static_cast<int>(BitsNum::eBits32)));
   GVAR_DEF(TypePtr, kFloat64, std::make_shared<Float>(static_cast<int>(BitsNum::eBits64)));
   GVAR_DEF(TypePtr, kInt, std::make_shared<Int>());
   GVAR_DEF(TypePtr, kUInt, std::make_shared<UInt>());
   GVAR_DEF(TypePtr, kFloat, std::make_shared<Float>());
   GVAR_DEF(TypePtr, kNumber, std::make_shared<Number>());
   GVAR_DEF(TypePtr, kComplex64, std::make_shared<Complex>(static_cast<int>(BitsNum::eBits64)));
   GVAR_DEF(TypePtr, kComplex128, std::make_shared<Complex>(static_cast<int>(BitsNum::eBits128)));
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_IR_DTYPE_NUMBER_H_
