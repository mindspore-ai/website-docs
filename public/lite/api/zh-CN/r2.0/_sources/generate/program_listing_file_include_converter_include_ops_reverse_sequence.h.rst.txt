:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_reverse_sequence.h:

Program Listing for File reverse_sequence.h
===========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_reverse_sequence.h>` (``include/converter/include/ops/reverse_sequence.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_REVERSE_SEQUENCE_H_
   #define MINDSPORE_CORE_OPS_REVERSE_SEQUENCE_H_
   #include <vector>
   #include <memory>
   
   #include "ops/base_operator.h"
   #include "mindapi/base/types.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameReverseSequence = "ReverseSequence";
   class MIND_API ReverseSequence : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(ReverseSequence);
     ReverseSequence() : BaseOperator(kNameReverseSequence) { InitIOName({"x", "seq_lengths"}, {"y"}); }
     void Init(const int64_t seq_dim, const int64_t batch_dim = 0);
     void set_seq_dim(const int64_t seq_dim);
     void set_batch_dim(const int64_t batch_dim);
     int64_t get_seq_dim() const;
     int64_t get_batch_dim() const;
   };
   MIND_API abstract::AbstractBasePtr ReverseSequenceInfer(const abstract::AnalysisEnginePtr &,
                                                           const PrimitivePtr &primitive,
                                                           const std::vector<abstract::AbstractBasePtr> &input_args);
   using PrimReverseSequence = std::shared_ptr<ReverseSequence>;
   }  // namespace ops
   }  // namespace mindspore
   
   #endif  // MINDSPORE_CORE_OPS_REVERSE_SEQUENCE_H_
