:gitee_url: https://gitee.com/mindspore/docs


.. _program_listing_file_include_converter_include_ops_space_to_depth.h:

Program Listing for File space_to_depth.h
=========================================

|exhale_lsh| :ref:`Return to documentation for file <file_include_converter_include_ops_space_to_depth.h>` (``include/converter/include/ops/space_to_depth.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   
   #ifndef MINDSPORE_CORE_OPS_SPACE_TO_DEPTH_H_
   #define MINDSPORE_CORE_OPS_SPACE_TO_DEPTH_H_
   #include <memory>
   #include <vector>
   
   #include "mindapi/base/format.h"
   #include "mindapi/base/types.h"
   #include "ops/base_operator.h"
   
   namespace mindspore {
   namespace ops {
   constexpr auto kNameSpaceToDepth = "SpaceToDepth";
   class MIND_API SpaceToDepth : public BaseOperator {
    public:
     MIND_API_BASE_MEMBER(SpaceToDepth);
     SpaceToDepth() : BaseOperator(kNameSpaceToDepth) { InitIOName({"x"}, {"y"}); }
     void Init(const int64_t block_size, const Format &format = NCHW);
     void set_block_size(const int64_t block_size);
     int64_t get_block_size() const;
     void set_format(const Format &format);
     Format get_format() const;
   };
   MIND_API abstract::AbstractBasePtr SpaceToDepthInfer(const abstract::AnalysisEnginePtr &, const PrimitivePtr &primitive,
                                                        const std::vector<abstract::AbstractBasePtr> &input_args);
   }  // namespace ops
   }  // namespace mindspore
   #endif  // MINDSPORE_CORE_OPS_SpaceToDepth_H_
